; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_ll_adc.o --depend=stm32nes\stm32f4xx_ll_adc.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_ll_adc.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_adc.c]
                          THUMB

                          AREA ||i.LL_ADC_CommonDeInit||, CODE, READONLY, ALIGN=2

                  LL_ADC_CommonDeInit PROC
;;;305      */
;;;306    ErrorStatus LL_ADC_CommonDeInit(ADC_Common_TypeDef *ADCxy_COMMON)
000000  4805              LDR      r0,|L1.24|
000002  6801              LDR      r1,[r0,#0]
000004  f4417180          ORR      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
00000a  6801              LDR      r1,[r0,#0]
00000c  f4217180          BIC      r1,r1,#0x100
000010  6001              STR      r1,[r0,#0]
;;;307    {
;;;308      /* Check the parameters */
;;;309      assert_param(IS_ADC_COMMON_INSTANCE(ADCxy_COMMON));
;;;310      
;;;311    
;;;312      /* Force reset of ADC clock (core clock) */
;;;313      LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_ADC);
;;;314      
;;;315      /* Release reset of ADC clock (core clock) */
;;;316      LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_ADC);
;;;317      
;;;318      return SUCCESS;
000012  2001              MOVS     r0,#1
;;;319    }
000014  4770              BX       lr
;;;320    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x40023824

                          AREA ||i.LL_ADC_CommonInit||, CODE, READONLY, ALIGN=2

                  LL_ADC_CommonInit PROC
;;;335      */
;;;336    ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
000000  b430              PUSH     {r4,r5}
;;;337    {
;;;338      ErrorStatus status = SUCCESS;
;;;339      
;;;340      /* Check the parameters */
;;;341      assert_param(IS_ADC_COMMON_INSTANCE(ADCxy_COMMON));
;;;342      assert_param(IS_LL_ADC_COMMON_CLOCK(ADC_CommonInitStruct->CommonClock));
;;;343      
;;;344    #if defined(ADC_MULTIMODE_SUPPORT)
;;;345      assert_param(IS_LL_ADC_MULTI_MODE(ADC_CommonInitStruct->Multimode));
;;;346      if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
;;;347      {
;;;348        assert_param(IS_LL_ADC_MULTI_DMA_TRANSFER(ADC_CommonInitStruct->MultiDMATransfer));
;;;349        assert_param(IS_LL_ADC_MULTI_TWOSMP_DELAY(ADC_CommonInitStruct->MultiTwoSamplingDelay));
;;;350      }
;;;351    #endif /* ADC_MULTIMODE_SUPPORT */
;;;352    
;;;353      /* Note: Hardware constraint (refer to description of functions             */
;;;354      /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
;;;355      /*       On this STM32 serie, setting of these features is conditioned to   */
;;;356      /*       ADC state:                                                         */
;;;357      /*       All ADC instances of the ADC common group must be disabled.        */
;;;358      if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
000002  f8dfc054          LDR      r12,|L2.88|
000006  684a              LDR      r2,[r1,#4]
000008  2301              MOVS     r3,#1                 ;338
00000a  f8dc4008          LDR      r4,[r12,#8]
00000e  f8dc5108          LDR      r5,[r12,#0x108]
000012  f8dcc208          LDR      r12,[r12,#0x208]
000016  432c              ORRS     r4,r4,r5
000018  ea440c0c          ORR      r12,r4,r12
00001c  f01c0f01          TST      r12,#1
;;;359      {
;;;360        /* Configuration of ADC hierarchical scope:                               */
;;;361        /*  - common to several ADC                                               */
;;;362        /*    (all ADC instances belonging to the same ADC common instance)       */
;;;363        /*    - Set ADC clock (conversion clock)                                  */
;;;364        /*  - multimode (if several ADC instances available on the                */
;;;365        /*    selected device)                                                    */
;;;366        /*    - Set ADC multimode configuration                                   */
;;;367        /*    - Set ADC multimode DMA transfer                                    */
;;;368        /*    - Set ADC multimode: delay between 2 sampling phases                */
;;;369    #if defined(ADC_MULTIMODE_SUPPORT)
;;;370        if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
;;;371        {
;;;372          MODIFY_REG(ADCxy_COMMON->CCR,
;;;373                       ADC_CCR_ADCPRE
;;;374                     | ADC_CCR_MULTI
;;;375                     | ADC_CCR_DMA
;;;376                     | ADC_CCR_DDS
;;;377                     | ADC_CCR_DELAY
;;;378                    ,
;;;379                       ADC_CommonInitStruct->CommonClock
;;;380                     | ADC_CommonInitStruct->Multimode
;;;381                     | ADC_CommonInitStruct->MultiDMATransfer
;;;382                     | ADC_CommonInitStruct->MultiTwoSamplingDelay
;;;383                    );
;;;384        }
;;;385        else
;;;386        {
;;;387          MODIFY_REG(ADCxy_COMMON->CCR,
;;;388                       ADC_CCR_ADCPRE
;;;389                     | ADC_CCR_MULTI
;;;390                     | ADC_CCR_DMA
;;;391                     | ADC_CCR_DDS
;;;392                     | ADC_CCR_DELAY
;;;393                    ,
;;;394                       ADC_CommonInitStruct->CommonClock
;;;395                     | LL_ADC_MULTI_INDEPENDENT
;;;396                    );
;;;397        }
;;;398    #else
;;;399        LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
;;;400    #endif
;;;401      }
;;;402      else
;;;403      {
;;;404        /* Initialization error: One or several ADC instances belonging to        */
;;;405        /* the same ADC common instance are not disabled.                         */
;;;406        status = ERROR;
000020  bf18              IT       NE
000022  2300              MOVNE    r3,#0
000024  d002              BEQ      |L2.44|
                  |L2.38|
;;;407      }
;;;408      
;;;409      return status;
;;;410    }
000026  bc30              POP      {r4,r5}
000028  4618              MOV      r0,r3                 ;409
00002a  4770              BX       lr
                  |L2.44|
00002c  f8dfc02c          LDR      r12,|L2.92|
000030  b152              CBZ      r2,|L2.72|
000032  680c              LDR      r4,[r1,#0]            ;372
000034  4322              ORRS     r2,r2,r4              ;372
000036  e9d14102          LDRD     r4,r1,[r1,#8]         ;372
00003a  4321              ORRS     r1,r1,r4              ;372
00003c  4311              ORRS     r1,r1,r2              ;372
00003e  6842              LDR      r2,[r0,#4]            ;372
000040  ea02020c          AND      r2,r2,r12             ;372
000044  4311              ORRS     r1,r1,r2              ;372
000046  e004              B        |L2.82|
                  |L2.72|
000048  6842              LDR      r2,[r0,#4]            ;387
00004a  6809              LDR      r1,[r1,#0]            ;387
00004c  ea02020c          AND      r2,r2,r12             ;387
000050  4311              ORRS     r1,r1,r2              ;387
                  |L2.82|
000052  6041              STR      r1,[r0,#4]            ;372
000054  e7e7              B        |L2.38|
;;;411    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      0x40012000
                  |L2.92|
                          DCD      0xfffc10e0

                          AREA ||i.LL_ADC_CommonStructInit||, CODE, READONLY, ALIGN=1

                  LL_ADC_CommonStructInit PROC
;;;417      */
;;;418    void LL_ADC_CommonStructInit(LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
000000  2100              MOVS     r1,#0
;;;419    {
;;;420      /* Set ADC_CommonInitStruct fields to default values */
;;;421      /* Set fields of ADC common */
;;;422      /* (all ADC instances belonging to the same ADC common instance) */
;;;423      ADC_CommonInitStruct->CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
;;;424      
;;;425    #if defined(ADC_MULTIMODE_SUPPORT)
;;;426      /* Set fields of ADC multimode */
;;;427      ADC_CommonInitStruct->Multimode             = LL_ADC_MULTI_INDEPENDENT;
000002  6001              STR      r1,[r0,#0]
;;;428        ADC_CommonInitStruct->MultiDMATransfer      = LL_ADC_MULTI_REG_DMA_EACH_ADC;
000004  6041              STR      r1,[r0,#4]
;;;429      ADC_CommonInitStruct->MultiTwoSamplingDelay = LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;430    #endif /* ADC_MULTIMODE_SUPPORT */
;;;431    }
00000a  4770              BX       lr
;;;432    
                          ENDP


                          AREA ||i.LL_ADC_DeInit||, CODE, READONLY, ALIGN=2

                  LL_ADC_DeInit PROC
;;;442      */
;;;443    ErrorStatus LL_ADC_DeInit(ADC_TypeDef *ADCx)
000000  6882              LDR      r2,[r0,#8]
;;;444    {
;;;445      ErrorStatus status = SUCCESS;
000002  2101              MOVS     r1,#1
;;;446      
;;;447      /* Check the parameters */
;;;448      assert_param(IS_ADC_ALL_INSTANCE(ADCx));
;;;449      
;;;450      /* Disable ADC instance if not already disabled.                            */
;;;451      if(LL_ADC_IsEnabled(ADCx) == 1U)
000004  f0120f01          TST      r2,#1
000008  d00b              BEQ      |L4.34|
00000a  6882              LDR      r2,[r0,#8]            ;444
00000c  f0226270          BIC      r2,r2,#0xf000000      ;444
000010  6082              STR      r2,[r0,#8]            ;444
000012  6882              LDR      r2,[r0,#8]            ;444
000014  f4222270          BIC      r2,r2,#0xf0000        ;444
000018  6082              STR      r2,[r0,#8]            ;444
00001a  6882              LDR      r2,[r0,#8]            ;444
00001c  f0220201          BIC      r2,r2,#1              ;444
000020  6082              STR      r2,[r0,#8]            ;444
                  |L4.34|
;;;452      {
;;;453        /* Set ADC group regular trigger source to SW start to ensure to not      */
;;;454        /* have an external trigger event occurring during the conversion stop    */
;;;455        /* ADC disable process.                                                   */
;;;456        LL_ADC_REG_SetTriggerSource(ADCx, LL_ADC_REG_TRIG_SOFTWARE);
;;;457        
;;;458        /* Set ADC group injected trigger source to SW start to ensure to not     */
;;;459        /* have an external trigger event occurring during the conversion stop    */
;;;460        /* ADC disable process.                                                   */
;;;461        LL_ADC_INJ_SetTriggerSource(ADCx, LL_ADC_INJ_TRIG_SOFTWARE);
;;;462        
;;;463        /* Disable the ADC instance */
;;;464        LL_ADC_Disable(ADCx);
;;;465      }
;;;466      
;;;467      /* Check whether ADC state is compliant with expected state */
;;;468      /* (hardware requirements of bits state to reset registers below) */
;;;469      if(READ_BIT(ADCx->CR2, ADC_CR2_ADON) == 0U)
000022  6882              LDR      r2,[r0,#8]
000024  f0120f01          TST      r2,#1
000028  d13f              BNE      |L4.170|
;;;470      {
;;;471        /* ========== Reset ADC registers ========== */
;;;472        /* Reset register SR */
;;;473        CLEAR_BIT(ADCx->SR,
00002a  6802              LDR      r2,[r0,#0]
00002c  f022023f          BIC      r2,r2,#0x3f
000030  6002              STR      r2,[r0,#0]
;;;474                  (  LL_ADC_FLAG_STRT
;;;475                   | LL_ADC_FLAG_JSTRT
;;;476                   | LL_ADC_FLAG_EOCS
;;;477                   | LL_ADC_FLAG_OVR
;;;478                   | LL_ADC_FLAG_JEOS
;;;479                   | LL_ADC_FLAG_AWD1 )
;;;480                 );
;;;481        
;;;482        /* Reset register CR1 */
;;;483        CLEAR_BIT(ADCx->CR1,
000032  6842              LDR      r2,[r0,#4]
000034  4b1e              LDR      r3,|L4.176|
000036  401a              ANDS     r2,r2,r3
000038  6042              STR      r2,[r0,#4]
;;;484                  (  ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN
;;;485                   | ADC_CR1_JAWDEN
;;;486                   | ADC_CR1_DISCNUM | ADC_CR1_JDISCEN | ADC_CR1_DISCEN
;;;487                   | ADC_CR1_JAUTO   | ADC_CR1_AWDSGL  | ADC_CR1_SCAN
;;;488                   | ADC_CR1_JEOCIE  | ADC_CR1_AWDIE   | ADC_CR1_EOCIE
;;;489                   | ADC_CR1_AWDCH                                     )
;;;490                 );
;;;491        
;;;492        /* Reset register CR2 */
;;;493        CLEAR_BIT(ADCx->CR2,
00003a  6882              LDR      r2,[r0,#8]
00003c  4b1d              LDR      r3,|L4.180|
00003e  401a              ANDS     r2,r2,r3
000040  6082              STR      r2,[r0,#8]
;;;494                  (  ADC_CR2_SWSTART  | ADC_CR2_EXTEN  | ADC_CR2_EXTSEL
;;;495                   | ADC_CR2_JSWSTART | ADC_CR2_JEXTEN | ADC_CR2_JEXTSEL
;;;496                   | ADC_CR2_ALIGN    | ADC_CR2_EOCS
;;;497                   | ADC_CR2_DDS      | ADC_CR2_DMA
;;;498                   | ADC_CR2_CONT     | ADC_CR2_ADON                    )
;;;499                 );
;;;500        
;;;501        /* Reset register SMPR1 */
;;;502        CLEAR_BIT(ADCx->SMPR1,
000042  68c2              LDR      r2,[r0,#0xc]
000044  f0024278          AND      r2,r2,#0xf8000000
000048  60c2              STR      r2,[r0,#0xc]
;;;503                  (  ADC_SMPR1_SMP18 | ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16
;;;504                   | ADC_SMPR1_SMP15 | ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13
;;;505                   | ADC_SMPR1_SMP12 | ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10)
;;;506                 );
;;;507        
;;;508        /* Reset register SMPR2 */
;;;509        CLEAR_BIT(ADCx->SMPR2,
00004a  6902              LDR      r2,[r0,#0x10]
00004c  f0024240          AND      r2,r2,#0xc0000000
000050  6102              STR      r2,[r0,#0x10]
;;;510                  (  ADC_SMPR2_SMP9
;;;511                   | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | ADC_SMPR2_SMP6
;;;512                   | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | ADC_SMPR2_SMP3
;;;513                   | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | ADC_SMPR2_SMP0)
;;;514                 );
;;;515        
;;;516        /* Reset register JOFR1 */
;;;517        CLEAR_BIT(ADCx->JOFR1, ADC_JOFR1_JOFFSET1);
000052  6942              LDR      r2,[r0,#0x14]
000054  f36f020b          BFC      r2,#0,#12
000058  6142              STR      r2,[r0,#0x14]
;;;518        /* Reset register JOFR2 */
;;;519        CLEAR_BIT(ADCx->JOFR2, ADC_JOFR2_JOFFSET2);
00005a  6982              LDR      r2,[r0,#0x18]
00005c  f36f020b          BFC      r2,#0,#12
000060  6182              STR      r2,[r0,#0x18]
;;;520        /* Reset register JOFR3 */
;;;521        CLEAR_BIT(ADCx->JOFR3, ADC_JOFR3_JOFFSET3);
000062  69c2              LDR      r2,[r0,#0x1c]
000064  f36f020b          BFC      r2,#0,#12
000068  61c2              STR      r2,[r0,#0x1c]
;;;522        /* Reset register JOFR4 */
;;;523        CLEAR_BIT(ADCx->JOFR4, ADC_JOFR4_JOFFSET4);
00006a  6a02              LDR      r2,[r0,#0x20]
00006c  f36f020b          BFC      r2,#0,#12
000070  6202              STR      r2,[r0,#0x20]
;;;524        
;;;525        /* Reset register HTR */
;;;526        SET_BIT(ADCx->HTR, ADC_HTR_HT);
000072  6a42              LDR      r2,[r0,#0x24]
000074  f64073ff          MOV      r3,#0xfff
000078  431a              ORRS     r2,r2,r3
00007a  6242              STR      r2,[r0,#0x24]
;;;527        /* Reset register LTR */
;;;528        CLEAR_BIT(ADCx->LTR, ADC_LTR_LT);
00007c  6a82              LDR      r2,[r0,#0x28]
00007e  f36f020b          BFC      r2,#0,#12
000082  6282              STR      r2,[r0,#0x28]
;;;529        
;;;530        /* Reset register SQR1 */
;;;531        CLEAR_BIT(ADCx->SQR1,
000084  6ac2              LDR      r2,[r0,#0x2c]
000086  f002427f          AND      r2,r2,#0xff000000
00008a  62c2              STR      r2,[r0,#0x2c]
;;;532                  (  ADC_SQR1_L
;;;533                   | ADC_SQR1_SQ16
;;;534                   | ADC_SQR1_SQ15 | ADC_SQR1_SQ14 | ADC_SQR1_SQ13)
;;;535                 );
;;;536                 
;;;537        /* Reset register SQR2 */
;;;538        CLEAR_BIT(ADCx->SQR2,
00008c  6b02              LDR      r2,[r0,#0x30]
00008e  f0024240          AND      r2,r2,#0xc0000000
000092  6302              STR      r2,[r0,#0x30]
;;;539                  (  ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10
;;;540                   | ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7)
;;;541                 );
;;;542        
;;;543        
;;;544        /* Reset register JSQR */
;;;545        CLEAR_BIT(ADCx->JSQR,
000094  6b82              LDR      r2,[r0,#0x38]
000096  f36f0215          BFC      r2,#0,#22
00009a  6382              STR      r2,[r0,#0x38]
;;;546                  (  ADC_JSQR_JL
;;;547                   | ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3
;;;548                   | ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  )
;;;549                 );
;;;550        
;;;551        /* Reset register DR */
;;;552        /* bits in access mode read only, no direct reset applicable */
;;;553        
;;;554        /* Reset registers JDR1, JDR2, JDR3, JDR4 */
;;;555        /* bits in access mode read only, no direct reset applicable */
;;;556        
;;;557        /* Reset register CCR */
;;;558        CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE | ADC_CCR_ADCPRE);
00009c  4806              LDR      r0,|L4.184|
00009e  f8d02304          LDR      r2,[r0,#0x304]
0000a2  f4220203          BIC      r2,r2,#0x830000
0000a6  f8c02304          STR      r2,[r0,#0x304]
                  |L4.170|
;;;559      }
;;;560      
;;;561      return status;
0000aa  4608              MOV      r0,r1
;;;562    }
0000ac  4770              BX       lr
;;;563    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      0xf83f0000
                  |L4.180|
                          DCD      0x8080f0fc
                  |L4.184|
                          DCD      0x40012000

                          AREA ||i.LL_ADC_INJ_Init||, CODE, READONLY, ALIGN=1

                  LL_ADC_INJ_Init PROC
;;;823      */
;;;824    ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
000000  684b              LDR      r3,[r1,#4]
;;;825    {
;;;826      ErrorStatus status = SUCCESS;
;;;827      
;;;828      /* Check the parameters */
;;;829      assert_param(IS_ADC_ALL_INSTANCE(ADCx));
;;;830      assert_param(IS_LL_ADC_INJ_TRIG_SOURCE(ADC_INJ_InitStruct->TriggerSource));
;;;831      assert_param(IS_LL_ADC_INJ_SEQ_SCAN_LENGTH(ADC_INJ_InitStruct->SequencerLength));
;;;832      if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_INJ_SEQ_SCAN_DISABLE)
;;;833      {
;;;834        assert_param(IS_LL_ADC_INJ_SEQ_SCAN_DISCONT_MODE(ADC_INJ_InitStruct->SequencerDiscont));
;;;835      }
;;;836      assert_param(IS_LL_ADC_INJ_TRIG_AUTO(ADC_INJ_InitStruct->TrigAuto));
;;;837      
;;;838      /* Note: Hardware constraint (refer to description of this function):       */
;;;839      /*       ADC instance must be disabled.                                     */
;;;840      if(LL_ADC_IsEnabled(ADCx) == 0U)
000002  f8d0c008          LDR      r12,[r0,#8]
000006  2201              MOVS     r2,#1                 ;826
000008  f01c0f01          TST      r12,#1
;;;841      {
;;;842        /* Configuration of ADC hierarchical scope:                               */
;;;843        /*  - ADC group injected                                                  */
;;;844        /*    - Set ADC group injected trigger source                             */
;;;845        /*    - Set ADC group injected sequencer length                           */
;;;846        /*    - Set ADC group injected sequencer discontinuous mode               */
;;;847        /*    - Set ADC group injected conversion trigger: independent or         */
;;;848        /*      from ADC group regular                                            */
;;;849        /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
;;;850        /*       ADC conversion.                                                  */
;;;851        /*       Refer to function @ref LL_ADC_INJ_StartConversionExtTrig().      */
;;;852        if(ADC_INJ_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
;;;853        {
;;;854          MODIFY_REG(ADCx->CR1,
;;;855                       ADC_CR1_JDISCEN
;;;856                     | ADC_CR1_JAUTO
;;;857                    ,
;;;858                       ADC_INJ_InitStruct->SequencerDiscont
;;;859                     | ADC_INJ_InitStruct->TrigAuto
;;;860                    );
;;;861        }
;;;862        else
;;;863        {
;;;864          MODIFY_REG(ADCx->CR1,
;;;865                       ADC_CR1_JDISCEN
;;;866                     | ADC_CR1_JAUTO
;;;867                    ,
;;;868                       LL_ADC_REG_SEQ_DISCONT_DISABLE
;;;869                     | ADC_INJ_InitStruct->TrigAuto
;;;870                    );
;;;871        }
;;;872        
;;;873        MODIFY_REG(ADCx->CR2,
;;;874                     ADC_CR2_JEXTSEL
;;;875                   | ADC_CR2_JEXTEN
;;;876                  ,
;;;877                    (ADC_INJ_InitStruct->TriggerSource & ADC_CR2_JEXTSEL)
;;;878                  );
;;;879        
;;;880        /* Note: Hardware constraint (refer to description of this function):     */
;;;881        /* Note: If ADC instance feature scan mode is disabled                    */
;;;882        /*       (refer to  ADC instance initialization structure                 */
;;;883        /*       parameter @ref SequencersScanMode                                */
;;;884        /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
;;;885        /*       this parameter is discarded.                                     */
;;;886        LL_ADC_INJ_SetSequencerLength(ADCx, ADC_INJ_InitStruct->SequencerLength);
;;;887      }
;;;888      else
;;;889      {
;;;890        /* Initialization error: ADC instance is not disabled. */
;;;891        status = ERROR;
00000c  bf18              IT       NE
00000e  2200              MOVNE    r2,#0
000010  d001              BEQ      |L5.22|
                  |L5.18|
;;;892      }
;;;893      return status;
000012  4610              MOV      r0,r2
;;;894    }
000014  4770              BX       lr
                  |L5.22|
000016  b15b              CBZ      r3,|L5.48|
000018  e9d13c02          LDRD     r3,r12,[r1,#8]        ;852
00001c  ea43030c          ORR      r3,r3,r12             ;854
000020  f8d0c004          LDR      r12,[r0,#4]           ;854
000024  f42c5ca0          BIC      r12,r12,#0x1400       ;854
000028  ea43030c          ORR      r3,r3,r12             ;854
00002c  6043              STR      r3,[r0,#4]            ;854
00002e  e007              B        |L5.64|
                  |L5.48|
000030  6843              LDR      r3,[r0,#4]            ;864
000032  f8d1c00c          LDR      r12,[r1,#0xc]         ;864
000036  f42353a0          BIC      r3,r3,#0x1400         ;864
00003a  ea43030c          ORR      r3,r3,r12             ;864
00003e  6043              STR      r3,[r0,#4]            ;864
                  |L5.64|
000040  6883              LDR      r3,[r0,#8]            ;873
000042  f8d1c000          LDR      r12,[r1,#0]           ;873
000046  f423137c          BIC      r3,r3,#0x3f0000       ;873
00004a  f40c2c70          AND      r12,r12,#0xf0000      ;873
00004e  ea43030c          ORR      r3,r3,r12             ;873
000052  6083              STR      r3,[r0,#8]            ;873
000054  6849              LDR      r1,[r1,#4]            ;886
000056  6b83              LDR      r3,[r0,#0x38]         ;886
000058  f4231340          BIC      r3,r3,#0x300000       ;886
00005c  4319              ORRS     r1,r1,r3              ;886
00005e  6381              STR      r1,[r0,#0x38]         ;886
000060  e7d7              B        |L5.18|
;;;895    
                          ENDP


                          AREA ||i.LL_ADC_INJ_StructInit||, CODE, READONLY, ALIGN=1

                  LL_ADC_INJ_StructInit PROC
;;;901      */
;;;902    void LL_ADC_INJ_StructInit(LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct)
000000  2100              MOVS     r1,#0
;;;903    {
;;;904      /* Set ADC_INJ_InitStruct fields to default values */
;;;905      /* Set fields of ADC group injected */
;;;906      ADC_INJ_InitStruct->TriggerSource    = LL_ADC_INJ_TRIG_SOFTWARE;
;;;907      ADC_INJ_InitStruct->SequencerLength  = LL_ADC_INJ_SEQ_SCAN_DISABLE;
000002  6001              STR      r1,[r0,#0]
;;;908      ADC_INJ_InitStruct->SequencerDiscont = LL_ADC_INJ_SEQ_DISCONT_DISABLE;
000004  6041              STR      r1,[r0,#4]
;;;909      ADC_INJ_InitStruct->TrigAuto         = LL_ADC_INJ_TRIG_INDEPENDENT;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;910    }
00000a  4770              BX       lr
;;;911    
                          ENDP


                          AREA ||i.LL_ADC_Init||, CODE, READONLY, ALIGN=1

                  LL_ADC_Init PROC
;;;596      */
;;;597    ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
000000  6883              LDR      r3,[r0,#8]
;;;598    {
;;;599      ErrorStatus status = SUCCESS;
000002  2201              MOVS     r2,#1
;;;600      
;;;601      /* Check the parameters */
;;;602      assert_param(IS_ADC_ALL_INSTANCE(ADCx));
;;;603      
;;;604      assert_param(IS_LL_ADC_RESOLUTION(ADC_InitStruct->Resolution));
;;;605      assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
;;;606      assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
;;;607      
;;;608      /* Note: Hardware constraint (refer to description of this function):       */
;;;609      /*       ADC instance must be disabled.                                     */
;;;610      if(LL_ADC_IsEnabled(ADCx) == 0U)
000004  f0130f01          TST      r3,#1
;;;611      {
;;;612        /* Configuration of ADC hierarchical scope:                               */
;;;613        /*  - ADC instance                                                        */
;;;614        /*    - Set ADC data resolution                                           */
;;;615        /*    - Set ADC conversion data alignment                                 */
;;;616        MODIFY_REG(ADCx->CR1,
;;;617                     ADC_CR1_RES
;;;618                   | ADC_CR1_SCAN
;;;619                  ,
;;;620                     ADC_InitStruct->Resolution
;;;621                   | ADC_InitStruct->SequencersScanMode
;;;622                  );
;;;623        
;;;624        MODIFY_REG(ADCx->CR2,
;;;625                     ADC_CR2_ALIGN
;;;626                  ,
;;;627                     ADC_InitStruct->DataAlignment
;;;628                  );
;;;629    
;;;630      }
;;;631      else
;;;632      {
;;;633        /* Initialization error: ADC instance is not disabled. */
;;;634        status = ERROR;
000008  bf18              IT       NE
00000a  2200              MOVNE    r2,#0
00000c  d001              BEQ      |L7.18|
                  |L7.14|
;;;635      }
;;;636      return status;
00000e  4610              MOV      r0,r2
;;;637    }
000010  4770              BX       lr
                  |L7.18|
000012  f8d1c008          LDR      r12,[r1,#8]           ;616
000016  680b              LDR      r3,[r1,#0]            ;616
000018  ea43030c          ORR      r3,r3,r12             ;616
00001c  f8d0c004          LDR      r12,[r0,#4]           ;616
000020  f42c7c80          BIC      r12,r12,#0x100        ;616
000024  f02c7c40          BIC      r12,r12,#0x3000000    ;616
000028  ea43030c          ORR      r3,r3,r12             ;616
00002c  6043              STR      r3,[r0,#4]            ;616
00002e  6883              LDR      r3,[r0,#8]            ;624
000030  6849              LDR      r1,[r1,#4]            ;624
000032  f4236300          BIC      r3,r3,#0x800          ;624
000036  4319              ORRS     r1,r1,r3              ;624
000038  6081              STR      r1,[r0,#8]            ;624
00003a  e7e8              B        |L7.14|
;;;638    
                          ENDP


                          AREA ||i.LL_ADC_REG_Init||, CODE, READONLY, ALIGN=2

                  LL_ADC_REG_Init PROC
;;;691      */
;;;692    ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
000000  b410              PUSH     {r4}
;;;693    {
;;;694      ErrorStatus status = SUCCESS;
;;;695      
;;;696      /* Check the parameters */
;;;697      assert_param(IS_ADC_ALL_INSTANCE(ADCx));
;;;698      assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADC_REG_InitStruct->TriggerSource));
;;;699      assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
;;;700      if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
;;;701      {
;;;702        assert_param(IS_LL_ADC_REG_SEQ_SCAN_DISCONT_MODE(ADC_REG_InitStruct->SequencerDiscont));
;;;703      }
;;;704      assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
;;;705      assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
;;;706      
;;;707      /* Note: Hardware constraint (refer to description of this function):       */
;;;708      /*       ADC instance must be disabled.                                     */
;;;709      if(LL_ADC_IsEnabled(ADCx) == 0U)
000002  684b              LDR      r3,[r1,#4]
000004  f8d0c008          LDR      r12,[r0,#8]
000008  2201              MOVS     r2,#1                 ;694
00000a  f01c0f01          TST      r12,#1
;;;710      {
;;;711        /* Configuration of ADC hierarchical scope:                               */
;;;712        /*  - ADC group regular                                                   */
;;;713        /*    - Set ADC group regular trigger source                              */
;;;714        /*    - Set ADC group regular sequencer length                            */
;;;715        /*    - Set ADC group regular sequencer discontinuous mode                */
;;;716        /*    - Set ADC group regular continuous mode                             */
;;;717        /*    - Set ADC group regular conversion data transfer: no transfer or    */
;;;718        /*      transfer by DMA, and DMA requests mode                            */
;;;719        /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
;;;720        /*       ADC conversion.                                                  */
;;;721        /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
;;;722        if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
;;;723        {
;;;724          MODIFY_REG(ADCx->CR1,
;;;725                       ADC_CR1_DISCEN
;;;726                     | ADC_CR1_DISCNUM
;;;727                    ,
;;;728                       ADC_REG_InitStruct->SequencerLength
;;;729                     | ADC_REG_InitStruct->SequencerDiscont
;;;730                    );
;;;731        }
;;;732        else
;;;733        {
;;;734          MODIFY_REG(ADCx->CR1,
;;;735                       ADC_CR1_DISCEN
;;;736                     | ADC_CR1_DISCNUM
;;;737                    ,
;;;738                       ADC_REG_InitStruct->SequencerLength
;;;739                     | LL_ADC_REG_SEQ_DISCONT_DISABLE
;;;740                    );
;;;741        }
;;;742        
;;;743        MODIFY_REG(ADCx->CR2,
;;;744                     ADC_CR2_EXTSEL
;;;745                   | ADC_CR2_EXTEN
;;;746                   | ADC_CR2_CONT
;;;747                   | ADC_CR2_DMA
;;;748                   | ADC_CR2_DDS
;;;749                  ,
;;;750                    (ADC_REG_InitStruct->TriggerSource & ADC_CR2_EXTSEL)
;;;751                   | ADC_REG_InitStruct->ContinuousMode
;;;752                   | ADC_REG_InitStruct->DMATransfer
;;;753                  );
;;;754    
;;;755        /* Set ADC group regular sequencer length and scan direction */
;;;756        /* Note: Hardware constraint (refer to description of this function):     */
;;;757        /* Note: If ADC instance feature scan mode is disabled                    */
;;;758        /*       (refer to  ADC instance initialization structure                 */
;;;759        /*       parameter @ref SequencersScanMode                                */
;;;760        /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
;;;761        /*       this parameter is discarded.                                     */
;;;762        LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
;;;763      }
;;;764      else
;;;765      {
;;;766        /* Initialization error: ADC instance is not disabled. */
;;;767        status = ERROR;
00000e  bf18              IT       NE
000010  2200              MOVNE    r2,#0
000012  d002              BEQ      |L8.26|
                  |L8.20|
;;;768      }
;;;769      return status;
;;;770    }
000014  bc10              POP      {r4}
000016  4610              MOV      r0,r2                 ;769
000018  4770              BX       lr
                  |L8.26|
00001a  2b00              CMP      r3,#0                 ;722
00001c  bf04              ITT      EQ                    ;734
00001e  6843              LDREQ    r3,[r0,#4]            ;734
000020  f4234368          BICEQ    r3,r3,#0xe800         ;734
000024  d009              BEQ      |L8.58|
000026  f8d1c008          LDR      r12,[r1,#8]           ;724
00002a  ea43030c          ORR      r3,r3,r12             ;724
00002e  f8d0c004          LDR      r12,[r0,#4]           ;724
000032  f42c4c68          BIC      r12,r12,#0xe800       ;724
000036  ea43030c          ORR      r3,r3,r12             ;724
                  |L8.58|
00003a  6043              STR      r3,[r0,#4]            ;734
00003c  e9d13c03          LDRD     r3,r12,[r1,#0xc]      ;734
000040  ea43030c          ORR      r3,r3,r12             ;743
000044  f8d0c008          LDR      r12,[r0,#8]           ;743
000048  4c08              LDR      r4,|L8.108|
00004a  ea0c0c04          AND      r12,r12,r4            ;743
00004e  680c              LDR      r4,[r1,#0]            ;743
000050  f0046470          AND      r4,r4,#0xf000000      ;743
000054  ea4c0c04          ORR      r12,r12,r4            ;743
000058  ea43030c          ORR      r3,r3,r12             ;743
00005c  6083              STR      r3,[r0,#8]            ;743
00005e  6849              LDR      r1,[r1,#4]            ;762
000060  6ac3              LDR      r3,[r0,#0x2c]         ;762
000062  f4230370          BIC      r3,r3,#0xf00000       ;762
000066  4319              ORRS     r1,r1,r3              ;762
000068  62c1              STR      r1,[r0,#0x2c]         ;762
00006a  e7d3              B        |L8.20|
;;;771    
                          ENDP

                  |L8.108|
                          DCD      0xc0fffcfd

                          AREA ||i.LL_ADC_REG_StructInit||, CODE, READONLY, ALIGN=1

                  LL_ADC_REG_StructInit PROC
;;;777      */
;;;778    void LL_ADC_REG_StructInit(LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
000000  2100              MOVS     r1,#0
;;;779    {
;;;780      /* Set ADC_REG_InitStruct fields to default values */
;;;781      /* Set fields of ADC group regular */
;;;782      /* Note: On this STM32 serie, ADC trigger edge is set when starting         */
;;;783      /*       ADC conversion.                                                    */
;;;784      /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().        */
;;;785      ADC_REG_InitStruct->TriggerSource    = LL_ADC_REG_TRIG_SOFTWARE;
;;;786      ADC_REG_InitStruct->SequencerLength  = LL_ADC_REG_SEQ_SCAN_DISABLE;
000002  6001              STR      r1,[r0,#0]
;;;787      ADC_REG_InitStruct->SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
000004  6041              STR      r1,[r0,#4]
;;;788      ADC_REG_InitStruct->ContinuousMode   = LL_ADC_REG_CONV_SINGLE;
000006  6081              STR      r1,[r0,#8]
;;;789      ADC_REG_InitStruct->DMATransfer      = LL_ADC_REG_DMA_TRANSFER_NONE;
000008  60c1              STR      r1,[r0,#0xc]
00000a  6101              STR      r1,[r0,#0x10]
;;;790    }
00000c  4770              BX       lr
;;;791    
                          ENDP


                          AREA ||i.LL_ADC_StructInit||, CODE, READONLY, ALIGN=1

                  LL_ADC_StructInit PROC
;;;644      */
;;;645    void LL_ADC_StructInit(LL_ADC_InitTypeDef *ADC_InitStruct)
000000  2100              MOVS     r1,#0
;;;646    {
;;;647      /* Set ADC_InitStruct fields to default values */
;;;648      /* Set fields of ADC instance */
;;;649      ADC_InitStruct->Resolution    = LL_ADC_RESOLUTION_12B;
;;;650      ADC_InitStruct->DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
000002  6001              STR      r1,[r0,#0]
;;;651      
;;;652      /* Enable scan mode to have a generic behavior with ADC of other            */
;;;653      /* STM32 families, without this setting available:                          */
;;;654      /* ADC group regular sequencer and ADC group injected sequencer depend      */
;;;655      /* only of their own configuration.                                         */
;;;656      ADC_InitStruct->SequencersScanMode      = LL_ADC_SEQ_SCAN_ENABLE;
000004  6041              STR      r1,[r0,#4]
000006  f44f7180          MOV      r1,#0x100
00000a  6081              STR      r1,[r0,#8]
;;;657      
;;;658    }
00000c  4770              BX       lr
;;;659    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_adc_c_d324f57e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___18_stm32f4xx_ll_adc_c_d324f57e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_adc_c_d324f57e____REVSH|
#line 402
|__asm___18_stm32f4xx_ll_adc_c_d324f57e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_adc_c_d324f57e____RRX|
#line 587
|__asm___18_stm32f4xx_ll_adc_c_d324f57e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
