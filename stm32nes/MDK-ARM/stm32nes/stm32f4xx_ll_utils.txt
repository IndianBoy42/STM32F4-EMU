; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_ll_utils.o --depend=stm32nes\stm32f4xx_ll_utils.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_ll_utils.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_utils.c]
                          THUMB

                          AREA ||i.LL_Init1msTick||, CODE, READONLY, ALIGN=1

                  LL_Init1msTick PROC
;;;274      */
;;;275    void LL_Init1msTick(uint32_t HCLKFrequency)
000000  f44f717a          MOV      r1,#0x3e8
;;;276    {
;;;277      /* Use frequency provided in argument */
;;;278      LL_InitTick(HCLKFrequency, 1000U);
000004  fbb0f0f1          UDIV     r0,r0,r1
000008  1e41              SUBS     r1,r0,#1
00000a  f04f20e0          MOV      r0,#0xe000e000
00000e  6141              STR      r1,[r0,#0x14]
000010  2100              MOVS     r1,#0
000012  6181              STR      r1,[r0,#0x18]
000014  2105              MOVS     r1,#5
000016  6101              STR      r1,[r0,#0x10]
;;;279    }
000018  4770              BX       lr
;;;280    
                          ENDP


                          AREA ||i.LL_PLL_ConfigSystemClock_HSE||, CODE, READONLY, ALIGN=2

                  LL_PLL_ConfigSystemClock_HSE PROC
;;;419      */
;;;420    ErrorStatus LL_PLL_ConfigSystemClock_HSE(uint32_t HSEFrequency, uint32_t HSEBypass,
000000  f8dfc0a4          LDR      r12,|L2.168|
;;;421                                             LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
;;;422    {
000004  b430              PUSH     {r4,r5}
000006  f8dc4000          LDR      r4,[r12,#0]
00000a  f0147f00          TST      r4,#0x2000000
00000e  f8dc4000          LDR      r4,[r12,#0]
000012  bf0f              ITEEE    EQ
000014  f0146f00          TSTEQ    r4,#0x8000000
;;;423      ErrorStatus status = SUCCESS;
;;;424      uint32_t pllfreq = 0U;
;;;425    
;;;426      /* Check the parameters */
;;;427      assert_param(IS_LL_UTILS_HSE_FREQUENCY(HSEFrequency));
;;;428      assert_param(IS_LL_UTILS_HSE_BYPASS(HSEBypass));
;;;429    
;;;430      /* Check if one of the PLL is enabled */
;;;431      if(UTILS_PLL_IsBusy() == SUCCESS)
;;;432      {
;;;433        /* Calculate the new PLL output frequency */
;;;434        pllfreq = UTILS_GetPLLOutputFrequency(HSEFrequency, UTILS_PLLInitStruct);
;;;435    
;;;436        /* Enable HSE if not enabled */
;;;437        if(LL_RCC_HSE_IsReady() != 1U)
;;;438        {
;;;439          /* Check if need to enable HSE bypass feature or not */
;;;440          if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
;;;441          {
;;;442            LL_RCC_HSE_EnableBypass();
;;;443          }
;;;444          else
;;;445          {
;;;446            LL_RCC_HSE_DisableBypass();
;;;447          }
;;;448    
;;;449          /* Enable HSE */
;;;450          LL_RCC_HSE_Enable();
;;;451          while (LL_RCC_HSE_IsReady() != 1U)
;;;452          {
;;;453            /* Wait for HSE ready */
;;;454          }
;;;455        }
;;;456    
;;;457        /* Configure PLL */
;;;458        LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
;;;459                                    UTILS_PLLInitStruct->PLLP);
;;;460    
;;;461        /* Enable PLL and switch system clock to PLL */
;;;462        status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
;;;463      }
;;;464      else
;;;465      {
;;;466        /* Current PLL configuration cannot be modified */
;;;467        status = ERROR;
000018  2000              MOVNE    r0,#0
;;;468      }
;;;469    
;;;470      return status;
;;;471    }
00001a  bc30              POPNE    {r4,r5}
00001c  4770              BXNE     lr
00001e  7814              LDRB     r4,[r2,#0]
000020  f004043f          AND      r4,r4,#0x3f
000024  fbb0f0f4          UDIV     r0,r0,r4
000028  8894              LDRH     r4,[r2,#4]
00002a  f3c40408          UBFX     r4,r4,#0,#9
00002e  4360              MULS     r0,r4,r0
000030  6894              LDR      r4,[r2,#8]
000032  0c24              LSRS     r4,r4,#16
000034  0064              LSLS     r4,r4,#1
000036  1ca4              ADDS     r4,r4,#2
000038  fbb0f0f4          UDIV     r0,r0,r4
00003c  f8dc4000          LDR      r4,[r12,#0]           ;437
000040  f4143f00          TST      r4,#0x20000           ;437
000044  d115              BNE      |L2.114|
000046  e7ff              B        |L2.72|
                  |L2.72|
000048  2901              CMP      r1,#1                 ;440
00004a  f8dc1000          LDR      r1,[r12,#0]           ;440
00004e  bf14              ITE      NE                    ;440
000050  f4212180          BICNE    r1,r1,#0x40000        ;440
000054  f4412180          ORREQ    r1,r1,#0x40000        ;440
000058  f8cc1000          STR      r1,[r12,#0]           ;440
00005c  f8dc1000          LDR      r1,[r12,#0]           ;440
000060  f4413180          ORR      r1,r1,#0x10000        ;440
000064  f8cc1000          STR      r1,[r12,#0]           ;440
                  |L2.104|
000068  f8dc1000          LDR      r1,[r12,#0]           ;440
00006c  f4113f00          TST      r1,#0x20000           ;440
000070  d0fa              BEQ      |L2.104|
                  |L2.114|
000072  e9d2c101          LDRD     r12,r1,[r2,#4]        ;458
000076  6814              LDR      r4,[r2,#0]            ;458
000078  f4440280          ORR      r2,r4,#0x400000       ;458
00007c  ea421c8c          ORR      r12,r2,r12,LSL #6     ;458
000080  4a0a              LDR      r2,|L2.172|
000082  6814              LDR      r4,[r2,#0]            ;458
000084  4d0a              LDR      r5,|L2.176|
000086  402c              ANDS     r4,r4,r5              ;458
000088  ea4c0c04          ORR      r12,r12,r4            ;458
00008c  f8c2c000          STR      r12,[r2,#0]           ;458
000090  f8d2c000          LDR      r12,[r2,#0]           ;458
000094  f42c3c40          BIC      r12,r12,#0x30000      ;458
000098  ea4c0101          ORR      r1,r12,r1             ;458
00009c  6011              STR      r1,[r2,#0]            ;458
00009e  bc30              POP      {r4,r5}               ;462
0000a0  4619              MOV      r1,r3                 ;462
0000a2  f7ffbffe          B.W      UTILS_EnablePLLAndSwitchSystem
;;;472    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      0x40023800
                  |L2.172|
                          DCD      0x40023804
                  |L2.176|
                          DCD      0xffbf8000

                          AREA ||i.LL_PLL_ConfigSystemClock_HSI||, CODE, READONLY, ALIGN=2

                  LL_PLL_ConfigSystemClock_HSI PROC
;;;362      */
;;;363    ErrorStatus LL_PLL_ConfigSystemClock_HSI(LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct,
000000  4a20              LDR      r2,|L3.132|
000002  6813              LDR      r3,[r2,#0]
000004  f0137f00          TST      r3,#0x2000000
000008  6813              LDR      r3,[r2,#0]
00000a  bf0e              ITEE     EQ
00000c  f0136f00          TSTEQ    r3,#0x8000000
;;;364                                             LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
;;;365    {
;;;366      ErrorStatus status = SUCCESS;
;;;367      uint32_t pllfreq = 0U;
;;;368    
;;;369      /* Check if one of the PLL is enabled */
;;;370      if(UTILS_PLL_IsBusy() == SUCCESS)
;;;371      {
;;;372        /* Calculate the new PLL output frequency */
;;;373        pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
;;;374    
;;;375        /* Enable HSI if not enabled */
;;;376        if(LL_RCC_HSI_IsReady() != 1U)
;;;377        {
;;;378          LL_RCC_HSI_Enable();
;;;379          while (LL_RCC_HSI_IsReady() != 1U)
;;;380          {
;;;381            /* Wait for HSI ready */
;;;382          }
;;;383        }
;;;384    
;;;385        /* Configure PLL */
;;;386        LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
;;;387                                    UTILS_PLLInitStruct->PLLP);
;;;388    
;;;389        /* Enable PLL and switch system clock to PLL */
;;;390        status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
;;;391      }
;;;392      else
;;;393      {
;;;394        /* Current PLL configuration cannot be modified */
;;;395        status = ERROR;
000010  2000              MOVNE    r0,#0
;;;396      }
;;;397    
;;;398      return status;
;;;399    }
000012  4770              BXNE     lr
000014  4b1c              LDR      r3,|L3.136|
000016  f890c000          LDRB     r12,[r0,#0]           ;373
00001a  f00c0c3f          AND      r12,r12,#0x3f         ;373
00001e  fbb3f3fc          UDIV     r3,r3,r12             ;373
000022  f8b0c004          LDRH     r12,[r0,#4]           ;373
000026  f3cc0c08          UBFX     r12,r12,#0,#9         ;373
00002a  fb0cf303          MUL      r3,r12,r3             ;373
00002e  f8d0c008          LDR      r12,[r0,#8]           ;373
000032  ea4f4c1c          LSR      r12,r12,#16           ;373
000036  ea4f0c4c          LSL      r12,r12,#1            ;373
00003a  f10c0c02          ADD      r12,r12,#2            ;373
00003e  fbb3fcfc          UDIV     r12,r3,r12            ;373
000042  6813              LDR      r3,[r2,#0]            ;376
000044  f0130f02          TST      r3,#2                 ;376
000048  d107              BNE      |L3.90|
00004a  6813              LDR      r3,[r2,#0]            ;376
00004c  f0430301          ORR      r3,r3,#1              ;376
000050  6013              STR      r3,[r2,#0]            ;376
                  |L3.82|
000052  6813              LDR      r3,[r2,#0]            ;376
000054  f0130f02          TST      r3,#2                 ;376
000058  d0fb              BEQ      |L3.82|
                  |L3.90|
00005a  b430              PUSH     {r4,r5}               ;365
00005c  e9d02400          LDRD     r2,r4,[r0,#0]         ;386
000060  6883              LDR      r3,[r0,#8]            ;386
000062  480a              LDR      r0,|L3.140|
000064  ea421284          ORR      r2,r2,r4,LSL #6       ;386
000068  6804              LDR      r4,[r0,#0]            ;386
00006a  4d09              LDR      r5,|L3.144|
00006c  402c              ANDS     r4,r4,r5              ;386
00006e  4322              ORRS     r2,r2,r4              ;386
000070  6002              STR      r2,[r0,#0]            ;386
000072  6802              LDR      r2,[r0,#0]            ;386
000074  f4223240          BIC      r2,r2,#0x30000        ;386
000078  431a              ORRS     r2,r2,r3              ;386
00007a  6002              STR      r2,[r0,#0]            ;386
00007c  bc30              POP      {r4,r5}               ;390
00007e  4660              MOV      r0,r12                ;390
000080  f7ffbffe          B.W      UTILS_EnablePLLAndSwitchSystem
;;;400    
                          ENDP

                  |L3.132|
                          DCD      0x40023800
                  |L3.136|
                          DCD      0x00f42400
                  |L3.140|
                          DCD      0x40023804
                  |L3.144|
                          DCD      0xffbf8000

                          AREA ||i.LL_SetSystemCoreClock||, CODE, READONLY, ALIGN=2

                  LL_SetSystemCoreClock PROC
;;;340      */
;;;341    void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
000000  4901              LDR      r1,|L4.8|
;;;342    {
;;;343      /* HCLK clock frequency */
;;;344      SystemCoreClock = HCLKFrequency;
000002  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;345    }
000004  4770              BX       lr
;;;346    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      SystemCoreClock

                          AREA ||i.LL_mDelay||, CODE, READONLY, ALIGN=1

                  LL_mDelay PROC
;;;290      */
;;;291    void LL_mDelay(uint32_t Delay)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;292    {
000004  b081              SUB      sp,sp,#4
;;;293      __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
000006  690a              LDR      r2,[r1,#0x10]
;;;294      /* Add this code to indicate that local variable is not used */
;;;295      ((void)tmp);
;;;296    
;;;297      /* Add a period to guaranty minimum wait */
;;;298      if(Delay < LL_MAX_DELAY)
000008  9200              STR      r2,[sp,#0]
00000a  f1b03fff          CMP      r0,#0xffffffff
00000e  bf18              IT       NE
000010  1c40              ADDNE    r0,r0,#1
                  |L5.18|
;;;299      {
;;;300        Delay++;
;;;301      }
;;;302    
;;;303      while (Delay)
;;;304      {
;;;305        if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
000012  690a              LDR      r2,[r1,#0x10]
000014  f4123f80          TST      r2,#0x10000
000018  bf18              IT       NE
00001a  1e40              SUBNE    r0,r0,#1
00001c  2800              CMP      r0,#0
00001e  d1f8              BNE      |L5.18|
;;;306        {
;;;307          Delay--;
;;;308        }
;;;309      }
;;;310    }
000020  b001              ADD      sp,sp,#4
000022  4770              BX       lr
;;;311    
                          ENDP


                          AREA ||i.UTILS_EnablePLLAndSwitchSystem||, CODE, READONLY, ALIGN=2

                  UTILS_EnablePLLAndSwitchSystem PROC
;;;685      */
;;;686    static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;687    {
;;;688      ErrorStatus status = SUCCESS;
;;;689      uint32_t hclk_frequency = 0U;
;;;690    
;;;691      assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
;;;692      assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
;;;693      assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));
;;;694    
;;;695      /* Calculate HCLK frequency */
;;;696      hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
000004  780b              LDRB     r3,[r1,#0]
000006  f8dfc1e4          LDR      r12,|L6.492|
00000a  f3c31303          UBFX     r3,r3,#4,#4
;;;697    
;;;698      /* Increasing the number of wait states because of higher CPU frequency */
;;;699      if(SystemCoreClock < hclk_frequency)
00000e  4e78              LDR      r6,|L6.496|
000010  4602              MOV      r2,r0                 ;687
000012  f81c3003          LDRB     r3,[r12,r3]           ;696
000016  f8df91e0          LDR      r9,|L6.504|
00001a  40da              LSRS     r2,r2,r3              ;696
00001c  ea4f0469          ASR      r4,r9,#1              ;696
000020  6837              LDR      r7,[r6,#0]  ; SystemCoreClock
000022  2001              MOVS     r0,#1                 ;688
000024  f8df81cc          LDR      r8,|L6.500|
000028  f8dfe1d0          LDR      lr,|L6.508|
00002c  f8dfc1d0          LDR      r12,|L6.512|
000030  1065              ASRS     r5,r4,#1              ;688
000032  4297              CMP      r7,r2
000034  d24d              BCS      |L6.210|
000036  2300              MOVS     r3,#0                 ;687
000038  2a00              CMP      r2,#0                 ;687
00003a  d048              BEQ      |L6.206|
00003c  f8dfa1c4          LDR      r10,|L6.516|
000040  f8dab000          LDR      r11,[r10,#0]          ;687
000044  f41b4f80          TST      r11,#0x4000           ;687
000048  d017              BEQ      |L6.122|
00004a  4542              CMP      r2,r8                 ;687
00004c  bf88              IT       HI                    ;687
00004e  2305              MOVHI    r3,#5                 ;687
000050  454a              CMP      r2,r9                 ;687
000052  d902              BLS      |L6.90|
000054  2b00              CMP      r3,#0                 ;687
000056  bf08              IT       EQ                    ;687
000058  2304              MOVEQ    r3,#4                 ;687
                  |L6.90|
00005a  4562              CMP      r2,r12                ;687
00005c  d902              BLS      |L6.100|
00005e  2b00              CMP      r3,#0                 ;687
000060  bf08              IT       EQ                    ;687
000062  2303              MOVEQ    r3,#3                 ;687
                  |L6.100|
000064  42a2              CMP      r2,r4                 ;687
000066  d903              BLS      |L6.112|
000068  2b00              CMP      r3,#0                 ;687
00006a  bf08              IT       EQ                    ;687
00006c  2302              MOVEQ    r3,#2                 ;687
00006e  d004              BEQ      |L6.122|
                  |L6.112|
000070  42aa              CMP      r2,r5                 ;687
000072  d902              BLS      |L6.122|
000074  2b00              CMP      r3,#0                 ;687
000076  bf08              IT       EQ                    ;687
000078  2301              MOVEQ    r3,#1                 ;687
                  |L6.122|
00007a  f8daa000          LDR      r10,[r10,#0]          ;687
00007e  f41a4f80          TST      r10,#0x4000           ;687
000082  d114              BNE      |L6.174|
000084  4572              CMP      r2,lr                 ;687
000086  d902              BLS      |L6.142|
000088  2b00              CMP      r3,#0                 ;687
00008a  bf08              IT       EQ                    ;687
00008c  2304              MOVEQ    r3,#4                 ;687
                  |L6.142|
00008e  4562              CMP      r2,r12                ;687
000090  d902              BLS      |L6.152|
000092  2b00              CMP      r3,#0                 ;687
000094  bf08              IT       EQ                    ;687
000096  2303              MOVEQ    r3,#3                 ;687
                  |L6.152|
000098  42a2              CMP      r2,r4                 ;687
00009a  d903              BLS      |L6.164|
00009c  2b00              CMP      r3,#0                 ;687
00009e  bf08              IT       EQ                    ;687
0000a0  2302              MOVEQ    r3,#2                 ;687
0000a2  d004              BEQ      |L6.174|
                  |L6.164|
0000a4  42aa              CMP      r2,r5                 ;687
0000a6  d902              BLS      |L6.174|
0000a8  2b00              CMP      r3,#0                 ;687
0000aa  bf08              IT       EQ                    ;687
0000ac  2301              MOVEQ    r3,#1                 ;687
                  |L6.174|
0000ae  f8dfa158          LDR      r10,|L6.520|
0000b2  f8dab000          LDR      r11,[r10,#0]          ;687
0000b6  f02b0b0f          BIC      r11,r11,#0xf          ;687
0000ba  ea4b0b03          ORR      r11,r11,r3            ;687
0000be  f8cab000          STR      r11,[r10,#0]          ;687
0000c2  f8daa000          LDR      r10,[r10,#0]          ;687
0000c6  f00a0a0f          AND      r10,r10,#0xf          ;687
0000ca  459a              CMP      r10,r3                ;687
0000cc  d001              BEQ      |L6.210|
                  |L6.206|
0000ce  2000              MOVS     r0,#0                 ;687
0000d0  e037              B        |L6.322|
                  |L6.210|
0000d2  4b4e              LDR      r3,|L6.524|
0000d4  f8d3a000          LDR      r10,[r3,#0]           ;687
0000d8  f04a7a80          ORR      r10,r10,#0x1000000    ;687
0000dc  f8c3a000          STR      r10,[r3,#0]           ;687
                  |L6.224|
0000e0  f8d3a000          LDR      r10,[r3,#0]           ;687
0000e4  f01a7f00          TST      r10,#0x2000000        ;687
0000e8  d0fa              BEQ      |L6.224|
0000ea  4b49              LDR      r3,|L6.528|
0000ec  f8d1a000          LDR      r10,[r1,#0]           ;687
0000f0  f8d3b000          LDR      r11,[r3,#0]           ;687
0000f4  f02b0bf0          BIC      r11,r11,#0xf0         ;687
0000f8  ea4b0a0a          ORR      r10,r11,r10           ;687
0000fc  f8c3a000          STR      r10,[r3,#0]           ;687
000100  f8d3a000          LDR      r10,[r3,#0]           ;687
000104  f02a0a03          BIC      r10,r10,#3            ;687
000108  f04a0a02          ORR      r10,r10,#2            ;687
00010c  f8c3a000          STR      r10,[r3,#0]           ;687
                  |L6.272|
000110  f8d3a000          LDR      r10,[r3,#0]           ;687
000114  f00a0a0c          AND      r10,r10,#0xc          ;687
;;;700      {
;;;701        /* Set FLASH latency to highest latency */
;;;702        status = UTILS_SetFlashLatency(hclk_frequency);
;;;703      }
;;;704    
;;;705      /* Update system clock configuration */
;;;706      if(status == SUCCESS)
;;;707      {
;;;708        /* Enable PLL */
;;;709        LL_RCC_PLL_Enable();
;;;710        while (LL_RCC_PLL_IsReady() != 1U)
;;;711        {
;;;712          /* Wait for PLL ready */
;;;713        }
;;;714    
;;;715        /* Sysclk activation on the main PLL */
;;;716        LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
;;;717        LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
;;;718        while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
000118  f1ba0f08          CMP      r10,#8
00011c  d1f8              BNE      |L6.272|
00011e  f8d1a004          LDR      r10,[r1,#4]
000122  f8d3b000          LDR      r11,[r3,#0]
000126  f42b5be0          BIC      r11,r11,#0x1c00
00012a  ea4b0a0a          ORR      r10,r11,r10
00012e  f8c3a000          STR      r10,[r3,#0]
;;;719        {
;;;720          /* Wait for system clock switch to PLL */
;;;721        }
;;;722    
;;;723        /* Set APB1 & APB2 prescaler*/
;;;724        LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
;;;725        LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
000132  6889              LDR      r1,[r1,#8]
000134  f8d3a000          LDR      r10,[r3,#0]
000138  f42a4a60          BIC      r10,r10,#0xe000
00013c  ea4a0101          ORR      r1,r10,r1
000140  6019              STR      r1,[r3,#0]
                  |L6.322|
;;;726      }
;;;727        
;;;728      /* Decreasing the number of wait states because of lower CPU frequency */
;;;729      if(SystemCoreClock > hclk_frequency)
000142  4297              CMP      r7,r2
000144  d94b              BLS      |L6.478|
000146  2001              MOVS     r0,#1
000148  2100              MOVS     r1,#0
00014a  b30a              CBZ      r2,|L6.400|
00014c  4b2d              LDR      r3,|L6.516|
00014e  681f              LDR      r7,[r3,#0]
000150  f4174f80          TST      r7,#0x4000
000154  d017              BEQ      |L6.390|
000156  4542              CMP      r2,r8
000158  bf88              IT       HI
00015a  2105              MOVHI    r1,#5
00015c  454a              CMP      r2,r9
00015e  d902              BLS      |L6.358|
000160  2900              CMP      r1,#0
000162  bf08              IT       EQ
000164  2104              MOVEQ    r1,#4
                  |L6.358|
000166  4562              CMP      r2,r12
000168  d902              BLS      |L6.368|
00016a  2900              CMP      r1,#0
00016c  bf08              IT       EQ
00016e  2103              MOVEQ    r1,#3
                  |L6.368|
000170  42a2              CMP      r2,r4
000172  d903              BLS      |L6.380|
000174  2900              CMP      r1,#0
000176  bf08              IT       EQ
000178  2102              MOVEQ    r1,#2
00017a  d004              BEQ      |L6.390|
                  |L6.380|
00017c  42aa              CMP      r2,r5
00017e  d902              BLS      |L6.390|
000180  2900              CMP      r1,#0
000182  bf08              IT       EQ
000184  2101              MOVEQ    r1,#1
                  |L6.390|
000186  681b              LDR      r3,[r3,#0]
000188  f4134f80          TST      r3,#0x4000
00018c  d003              BEQ      |L6.406|
00018e  e017              B        |L6.448|
                  |L6.400|
000190  2000              MOVS     r0,#0
;;;730      {
;;;731        /* Set FLASH latency to lowest latency */
;;;732        status = UTILS_SetFlashLatency(hclk_frequency);
;;;733      }
;;;734    
;;;735      /* Update SystemCoreClock variable */
;;;736      if(status == SUCCESS)
;;;737      {
;;;738        LL_SetSystemCoreClock(hclk_frequency);
;;;739      }
;;;740    
;;;741      return status;
;;;742    }
000192  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.406|
000196  4572              CMP      r2,lr
000198  d902              BLS      |L6.416|
00019a  2900              CMP      r1,#0
00019c  bf08              IT       EQ
00019e  2104              MOVEQ    r1,#4
                  |L6.416|
0001a0  4562              CMP      r2,r12
0001a2  d902              BLS      |L6.426|
0001a4  2900              CMP      r1,#0
0001a6  bf08              IT       EQ
0001a8  2103              MOVEQ    r1,#3
                  |L6.426|
0001aa  42a2              CMP      r2,r4
0001ac  d903              BLS      |L6.438|
0001ae  2900              CMP      r1,#0
0001b0  bf08              IT       EQ
0001b2  2102              MOVEQ    r1,#2
0001b4  d004              BEQ      |L6.448|
                  |L6.438|
0001b6  42aa              CMP      r2,r5
0001b8  d902              BLS      |L6.448|
0001ba  2900              CMP      r1,#0
0001bc  bf08              IT       EQ
0001be  2101              MOVEQ    r1,#1
                  |L6.448|
0001c0  4b11              LDR      r3,|L6.520|
0001c2  f8d3c000          LDR      r12,[r3,#0]
0001c6  f02c0c0f          BIC      r12,r12,#0xf
0001ca  ea4c0c01          ORR      r12,r12,r1
0001ce  f8c3c000          STR      r12,[r3,#0]
0001d2  681b              LDR      r3,[r3,#0]
0001d4  f003030f          AND      r3,r3,#0xf
0001d8  428b              CMP      r3,r1
0001da  d1d9              BNE      |L6.400|
0001dc  e003              B        |L6.486|
                  |L6.478|
0001de  2800              CMP      r0,#0                 ;736
0001e0  bf08              IT       EQ
0001e2  e8bd8ff0          POPEQ    {r4-r11,pc}
                  |L6.486|
0001e6  6032              STR      r2,[r6,#0]  ; SystemCoreClock
0001e8  e8bd8ff0          POP      {r4-r11,pc}
;;;743    
                          ENDP

                  |L6.492|
                          DCD      AHBPrescTable
                  |L6.496|
                          DCD      SystemCoreClock
                  |L6.500|
                          DCD      0x08f0d180
                  |L6.504|
                          DCD      0x07270e00
                  |L6.508|
                          DCD      0x00b71b00
                  |L6.512|
                          DCD      0x055d4a80
                  |L6.516|
                          DCD      0x40007000
                  |L6.520|
                          DCD      0x40023c00
                  |L6.524|
                          DCD      0x40023800
                  |L6.528|
                          DCD      0x40023808

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_utils.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_utils_c_fa0b8999____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_stm32f4xx_ll_utils_c_fa0b8999____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_utils_c_fa0b8999____REVSH|
#line 402
|__asm___20_stm32f4xx_ll_utils_c_fa0b8999____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_utils_c_fa0b8999____RRX|
#line 587
|__asm___20_stm32f4xx_ll_utils_c_fa0b8999____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
