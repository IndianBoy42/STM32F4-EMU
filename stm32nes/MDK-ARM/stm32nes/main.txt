; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\main.o --depend=stm32nes\main.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\main.crf ../Src/main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;360      */
;;;361    void Error_Handler(void)
000000  4770              BX       lr
;;;362    {
;;;363      /* USER CODE BEGIN Error_Handler_Debug */
;;;364      /* User can add his own implementation to report the HAL error return state */
;;;365    
;;;366      /* USER CODE END Error_Handler_Debug */
;;;367    }
;;;368    
                          ENDP


                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;350    }
;;;351    uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L2.8|
;;;352    {
;;;353      return __ticks;
000002  6840              LDR      r0,[r0,#4]  ; __ticks
;;;354    }
000004  4770              BX       lr
;;;355    /* USER CODE END 4 */
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;345    volatile uint8_t  __tickf = 1;
;;;346    void SysTick_Handler(void) {
000000  4806              LDR      r0,|L3.28|
;;;347    	__ticks++;
000002  6841              LDR      r1,[r0,#4]  ; __ticks
000004  1c49              ADDS     r1,r1,#1
000006  6041              STR      r1,[r0,#4]  ; __ticks
;;;348    	__tickf = 0;
000008  2100              MOVS     r1,#0
00000a  7001              STRB     r1,[r0,#0]
;;;349    	if (__delay) __delay--;
00000c  6881              LDR      r1,[r0,#8]  ; __delay
00000e  2900              CMP      r1,#0                 ;346
;;;350    }
000010  bf08              IT       EQ
000012  4770              BXEQ     lr
000014  6881              LDR      r1,[r0,#8]            ;349  ; __delay
000016  1e49              SUBS     r1,r1,#1              ;349
000018  6081              STR      r1,[r0,#8]            ;349  ; __delay
00001a  4770              BX       lr
;;;351    uint32_t HAL_GetTick(void)
                          ENDP

                  |L3.28|
                          DCD      ||.data||

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;302      */
;;;303    void SystemClock_Config(void)
000000  482b              LDR      r0,|L4.176|
;;;304    {
000002  b510              PUSH     {r4,lr}
000004  6801              LDR      r1,[r0,#0]
000006  f021010f          BIC      r1,r1,#0xf
00000a  f0410105          ORR      r1,r1,#5
00000e  6001              STR      r1,[r0,#0]
000010  6800              LDR      r0,[r0,#0]
000012  4828              LDR      r0,|L4.180|
000014  6801              LDR      r1,[r0,#0]
000016  f4414180          ORR      r1,r1,#0x4000
00001a  6001              STR      r1,[r0,#0]
00001c  4826              LDR      r0,|L4.184|
00001e  6801              LDR      r1,[r0,#0]
000020  f4413180          ORR      r1,r1,#0x10000
000024  6001              STR      r1,[r0,#0]
                  |L4.38|
000026  6801              LDR      r1,[r0,#0]
000028  f4113f00          TST      r1,#0x20000
00002c  d0fb              BEQ      |L4.38|
00002e  4924              LDR      r1,|L4.192|
000030  4a22              LDR      r2,|L4.188|
000032  680b              LDR      r3,[r1,#0]
000034  f8dfc08c          LDR      r12,|L4.196|
000038  ea03030c          AND      r3,r3,r12
00003c  431a              ORRS     r2,r2,r3
00003e  600a              STR      r2,[r1,#0]
000040  680a              LDR      r2,[r1,#0]
000042  f4223240          BIC      r2,r2,#0x30000
000046  600a              STR      r2,[r1,#0]
000048  6801              LDR      r1,[r0,#0]
00004a  f0417180          ORR      r1,r1,#0x1000000
00004e  6001              STR      r1,[r0,#0]
                  |L4.80|
000050  6801              LDR      r1,[r0,#0]
000052  f0117f00          TST      r1,#0x2000000
000056  d0fb              BEQ      |L4.80|
000058  481b              LDR      r0,|L4.200|
00005a  6801              LDR      r1,[r0,#0]
00005c  f02101f0          BIC      r1,r1,#0xf0
000060  6001              STR      r1,[r0,#0]
000062  6801              LDR      r1,[r0,#0]
000064  f42151e0          BIC      r1,r1,#0x1c00
000068  f44151a0          ORR      r1,r1,#0x1400
00006c  6001              STR      r1,[r0,#0]
00006e  6801              LDR      r1,[r0,#0]
000070  f4214160          BIC      r1,r1,#0xe000
000074  f4414100          ORR      r1,r1,#0x8000
000078  6001              STR      r1,[r0,#0]
00007a  6801              LDR      r1,[r0,#0]
00007c  f0210103          BIC      r1,r1,#3
000080  f0410102          ORR      r1,r1,#2
000084  6001              STR      r1,[r0,#0]
                  |L4.134|
000086  6801              LDR      r1,[r0,#0]
000088  f001010c          AND      r1,r1,#0xc
;;;305      LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
;;;306    
;;;307      if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
;;;308      {
;;;309      Error_Handler();  
;;;310      }
;;;311      LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
;;;312      LL_RCC_HSE_Enable();
;;;313    
;;;314       /* Wait till HSE is ready */
;;;315      while(LL_RCC_HSE_IsReady() != 1)
;;;316      {
;;;317        
;;;318      }
;;;319      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
;;;320      LL_RCC_PLL_Enable();
;;;321    
;;;322       /* Wait till PLL is ready */
;;;323      while(LL_RCC_PLL_IsReady() != 1)
;;;324      {
;;;325        
;;;326      }
;;;327      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
;;;328      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
;;;329      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
;;;330      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
;;;331    
;;;332       /* Wait till System clock is ready */
;;;333      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
00008c  2908              CMP      r1,#8
00008e  d1fa              BNE      |L4.134|
;;;334      {
;;;335      
;;;336      }
;;;337      LL_Init1msTick(168000000);
000090  4c0e              LDR      r4,|L4.204|
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       LL_Init1msTick
000098  f04f21e0          MOV      r1,#0xe000e000
00009c  6908              LDR      r0,[r1,#0x10]
00009e  f0400004          ORR      r0,r0,#4
0000a2  6108              STR      r0,[r1,#0x10]
;;;338      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
;;;339      LL_SetSystemCoreClock(168000000);
0000a4  4620              MOV      r0,r4
0000a6  e8bd4010          POP      {r4,lr}
0000aa  f7ffbffe          B.W      LL_SetSystemCoreClock
;;;340    }
;;;341    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      0x40023c00
                  |L4.180|
                          DCD      0x40007000
                  |L4.184|
                          DCD      0x40023800
                  |L4.188|
                          DCD      0x00405408
                  |L4.192|
                          DCD      0x40023804
                  |L4.196|
                          DCD      0xffbf8000
                  |L4.200|
                          DCD      0x40023808
                  |L4.204|
                          DCD      0x0a037a00

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;94       */
;;;95     int main(void)
000000  ed2d8b02          VPUSH    {d8}
;;;96     {
000004  b082              SUB      sp,sp,#8
;;;97       /* USER CODE BEGIN 1 */
;;;98     
;;;99       /* USER CODE END 1 */
;;;100    
;;;101      /* MCU Configuration--------------------------------------------------------*/
;;;102    
;;;103      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;104      HAL_Init();
000006  f7fffffe          BL       HAL_Init
;;;105    
;;;106      /* USER CODE BEGIN Init */
;;;107    
;;;108      /* USER CODE END Init */
;;;109    
;;;110      /* Configure the system clock */
;;;111      SystemClock_Config();
00000a  f7fffffe          BL       SystemClock_Config
00000e  f04f20e0          MOV      r0,#0xe000e000
000012  6901              LDR      r1,[r0,#0x10]
000014  f0410102          ORR      r1,r1,#2
000018  6101              STR      r1,[r0,#0x10]
;;;112    
;;;113      /* USER CODE BEGIN SysInit */
;;;114    	ticks_init();
;;;115      /* USER CODE END SysInit */
;;;116    
;;;117      /* Initialize all configured peripherals */
;;;118      MX_GPIO_Init();
00001a  f7fffffe          BL       MX_GPIO_Init
;;;119      MX_DMA_Init();
00001e  f7fffffe          BL       MX_DMA_Init
;;;120      MX_SPI1_Init();
000022  f7fffffe          BL       MX_SPI1_Init
;;;121      MX_USART1_UART_Init();
000026  f7fffffe          BL       MX_USART1_UART_Init
;;;122      MX_ADC1_Init();
00002a  f7fffffe          BL       MX_ADC1_Init
;;;123      MX_SPI2_Init();
00002e  f7fffffe          BL       MX_SPI2_Init
;;;124      MX_USART2_UART_Init();
000032  f7fffffe          BL       MX_USART2_UART_Init
;;;125      MX_TIM13_Init();
000036  f7fffffe          BL       MX_TIM13_Init
;;;126      MX_DAC_Init();
00003a  f7fffffe          BL       MX_DAC_Init
;;;127      MX_TIM14_Init();
00003e  f7fffffe          BL       MX_TIM14_Init
;;;128      MX_TIM12_Init();
000042  f7fffffe          BL       MX_TIM12_Init
;;;129      MX_TIM11_Init();
000046  f7fffffe          BL       MX_TIM11_Init
;;;130      MX_TIM10_Init();
00004a  f7fffffe          BL       MX_TIM10_Init
;;;131      MX_TIM9_Init();
00004e  f7fffffe          BL       MX_TIM9_Init
;;;132      MX_TIM6_Init();
000052  f7fffffe          BL       MX_TIM6_Init
;;;133      MX_TIM7_Init();
000056  f7fffffe          BL       MX_TIM7_Init
;;;134      MX_SDIO_SD_Init();
00005a  f7fffffe          BL       MX_SDIO_SD_Init
;;;135      /* USER CODE BEGIN 2 */
;;;136      tft_init(PIN_ON_LEFT, BLACK, WHITE, GREEN, RED);
00005e  f44f4078          MOV      r0,#0xf800
000062  9000              STR      r0,[sp,#0]
000064  f44f63fc          MOV      r3,#0x7e0
000068  f64f72ff          MOV      r2,#0xffff
00006c  2100              MOVS     r1,#0
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       tft_init
                  |L5.116|
;;;137      while(IMU_init() == 0);
000074  f7fffffe          BL       IMU_init
000078  2800              CMP      r0,#0
00007a  d0fb              BEQ      |L5.116|
;;;138      // IMU_enableGyro(50);
;;;139      IMU_enableRotation(50);
00007c  2032              MOVS     r0,#0x32
00007e  f7fffffe          BL       IMU_enableRotation
;;;140      // IMU_enableAccel(50);
;;;141      joystick_init();
000082  f7fffffe          BL       joystick_init
;;;142      TIM6->PSC = 83;
000086  f8dfb24c          LDR      r11,|L5.724|
00008a  2053              MOVS     r0,#0x53
00008c  f8cb0028          STR      r0,[r11,#0x28]
;;;143      TIM6->ARR = 33333;
000090  f2482035          MOV      r0,#0x8235
000094  f8cb002c          STR      r0,[r11,#0x2c]
;;;144      TIM6->CR1 = TIM_CR1_CEN;
000098  2001              MOVS     r0,#1
00009a  f8cb0000          STR      r0,[r11,#0]
;;;145    
;;;146      TIM13->PSC = 8399;
00009e  4a8e              LDR      r2,|L5.728|
0000a0  f24201cf          MOV      r1,#0x20cf
0000a4  6011              STR      r1,[r2,#0]
;;;147      TIM13->ARR = 99;
0000a6  2163              MOVS     r1,#0x63
0000a8  1d12              ADDS     r2,r2,#4
0000aa  6011              STR      r1,[r2,#0]
;;;148      TIM13->CCR1 = 10;
0000ac  4f8b              LDR      r7,|L5.732|
0000ae  210a              MOVS     r1,#0xa
0000b0  6039              STR      r1,[r7,#0]
;;;149      TIM13->CR1 = TIM_CR1_CEN;
0000b2  498b              LDR      r1,|L5.736|
0000b4  6008              STR      r0,[r1,#0]
;;;150      /* USER CODE END 2 */
;;;151    
;;;152      /* Infinite loop */
;;;153      /* USER CODE BEGIN WHILE */
;;;154      while (1)
;;;155      {
;;;156    #if 0
;;;157        tft_clear();
;;;158        
;;;159        // tft_printc(0, 0, "Hello WorldHello WorldHello WorldHello WorldHello World");
;;;160        // tft_printi(0, 1, get_ticks());
;;;161        // tft_printi(0, 2, joystick_conv(joys[0].x));
;;;162        // tft_printi(0, 3, joystick_conv(joys[0].y));
;;;163        // tft_printi(0, 4, joystick_conv(joys[1].x));
;;;164        // tft_printi(0, 5, joystick_conv(joys[1].y));
;;;165        // tft_printb(0, 6, BUTTONS, 16);
;;;166        tft_printc(0, 0, "NES");
;;;167        cpu_debug_print(1);
;;;168        
;;;169        tft_update_dma();
;;;170    
;;;171        static uint16_t btn_state = 0;
;;;172        static uint32_t btn_clicked = 0;
;;;173        #define btn_pressed(X) (BUTTONS & X)
;;;174        #define btn_clicked(X) (BUTTONS & X) && !(btn_state & X)
;;;175        if (btn_clicked(BTN_R1)) {
;;;176          cpu_exec(1);
;;;177          btn_clicked = get_ticks();
;;;178        }
;;;179        if (btn_clicked(BTN_D1)) {
;;;180          nes_init();
;;;181        }
;;;182        if (btn_pressed(BTN_L1)) {
;;;183          cpu_exec(113);
;;;184        }
;;;185        btn_state = BUTTONS;
;;;186    
;;;187    		if (tick_tock()) {
;;;188    			static uint32_t last_ticks = 0;
;;;189    			if (get_ticks() - last_ticks >= 100) {
;;;190    				gpio_toggle(LED1);
;;;191    				last_ticks = get_ticks();
;;;192    			}
;;;193    
;;;194          if (((BUTTONS & BTN_R1)) && (get_ticks() - btn_clicked) > 1000) {
;;;195            cpu_exec(10);
;;;196          } else if (((BUTTONS & BTN_R1)) && (get_ticks() - btn_clicked) > 200) {
;;;197            cpu_exec(1);
;;;198          }
;;;199    		}
;;;200    #else
;;;201        static int GAME_SELECT = 0;
;;;202        #define NUM_OF_GAMES 3
;;;203        
;;;204        static uint16_t btn_state = 0;
;;;205        #define btn_pressed(X) (BUTTONS & (X))
;;;206        #define btn_clicked(X) (BUTTONS & (X)) && !(btn_state & (X))
;;;207        tft_clear();
;;;208        tft_printc(4, 0, "ELEC3300(24) - Anshuman & Aaron");
;;;209        tft_printc(6, 12, "SELECT");
;;;210        tft_prints(13, 12, "%s Super Mario Bros]", (GAME_SELECT == 0) ? ("[>") : ("-"));
;;;211        tft_prints(13, 13, "%s Battle City]"     , (GAME_SELECT == 1) ? ("[>") : ("-"));
;;;212        tft_prints(13, 14, "%s Mappy]"           , (GAME_SELECT == 2) ? ("[>") : ("-"));
;;;213        
;;;214        tft_printc(0, 5, " {/\\} \n{<}  {>}\n {\\/} ");
;;;215        // tft_printc(0, 5, " /\\ \n/  \\\n\\  /\n \\/ ");
;;;216        tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;217        tft_prints(0,  14, "{SEL}");
;;;218        tft_prints(36, 14, "{STRT}");
;;;219    
;;;220    //     tft_printc(5, 1, " __    __  ________   ______   \n\
;;;221    // /  \\  /  |/        | /      \\ \n\
;;;222    // [$$]  \\ [$$] |[$$$$$$$$]/ /[$$$$$$]  |\n\
;;;223    // [$$$]  \\[$$] |[$$] |__    [$$] \\__[$$]/ \n\
;;;224    // [$$$$]  [$$] |[$$]    |   [$$]      \\ \n\
;;;225    // [$$] [$$] [$$] |[$$$$$]/     [$$$$$$]  |\n\
;;;226    // [$$] |[$$$$] |[$$] |_____ /  \\__[$$] |\n\
;;;227    // [$$] | [$$$] |[$$]       |[$$]    [$$]/ \n\
;;;228    // [$$]/   [$$]/ [$$$$$$$$]/  [$$$$$$]/  ");
;;;229    IMU_dataAvailable();
;;;230        tft_prints(6,10, "%sIMU Control]",(getIMUControl())?"[":"");
;;;231        // tft_printi(6,11,(int16_t)getAccelY()*10);
;;;232        if (btn_clicked(BTN_M1)) toggleIMUControl();
;;;233        // tft_printi(0, 1, get_ticks()%1000);
;;;234        // tft_printi(5,1,(int16_t)(getQuatI()*1000));
;;;235        // tft_printi(5,2,(int16_t)(getQuatJ()*1000));
;;;236        // tft_printi(5,3,(int16_t)(getQuatK()*1000));
;;;237        // tft_printi(5,4,(int16_t)(getQuatReal()*1000));
;;;238        tft_printi(10,1,(int16_t)(getRoll()*10));
0000b6  eeb28a04          VMOV.F32 s16,#10.00000000
;;;239        tft_printi(10,2,(int16_t)(getPitch()*10));
;;;240        tft_printi(10,3,(int16_t)(getYaw()*10));
;;;241        // tft_printi(5,2,(int16_t)(getAccelX()*1000));
;;;242    
;;;243        // tft_printi(5,1,getAccelLeftRight());
;;;244        // static uint8_t asdf = 0;
;;;245        // tft_printi(5,4,asdf+= getAccelFlick());
;;;246    
;;;247        tft_update();
;;;248        
;;;249        static uint32_t last_blink = 0;
;;;250        if ((get_ticks() - last_blink) > 100) {
;;;251          gpio_toggle(LED2);
;;;252          last_blink = get_ticks();
;;;253        }
;;;254    
;;;255        static uint32_t last_bright = 0;
;;;256        if ((get_ticks() - last_bright) > 100) {
;;;257          if (btn_pressed(BTN_X1)) TIM13->CCR1+= 5;
;;;258          TIM13->CCR1%= 100;
0000ba  f8dfa228          LDR      r10,|L5.740|
;;;259          last_bright = get_ticks();
;;;260        }
;;;261    
;;;262    
;;;263        if (btn_clicked(BTN_X2|BTN_D1|BTN_D2)) {
0000be  f6400888          MOV      r8,#0x888
;;;264          GAME_SELECT++;
;;;265          GAME_SELECT %= 3;
;;;266        }
;;;267        if (btn_clicked(BTN_X3|BTN_U1|BTN_U2)) {
0000c2  f2441902          MOV      r9,#0x4102
0000c6  4e88              LDR      r6,|L5.744|
0000c8  4c88              LDR      r4,|L5.748|
0000ca  4d89              LDR      r5,|L5.752|
                  |L5.204|
0000cc  f7fffffe          BL       tft_clear
0000d0  a288              ADR      r2,|L5.756|
0000d2  2100              MOVS     r1,#0                 ;208
0000d4  2004              MOVS     r0,#4                 ;208
0000d6  f7fffffe          BL       tft_printc
0000da  a28e              ADR      r2,|L5.788|
0000dc  210c              MOVS     r1,#0xc               ;209
0000de  2006              MOVS     r0,#6                 ;209
0000e0  f7fffffe          BL       tft_printc
0000e4  68e0              LDR      r0,[r4,#0xc]          ;210  ; GAME_SELECT
0000e6  2800              CMP      r0,#0                 ;210
0000e8  bf0c              ITE      EQ                    ;210
0000ea  a38c              ADREQ    r3,|L5.796|
0000ec  a38c              ADRNE    r3,|L5.800|
0000ee  a28d              ADR      r2,|L5.804|
0000f0  210c              MOVS     r1,#0xc               ;210
0000f2  200d              MOVS     r0,#0xd               ;210
0000f4  f7fffffe          BL       tft_prints
0000f8  68e0              LDR      r0,[r4,#0xc]          ;211  ; GAME_SELECT
0000fa  2801              CMP      r0,#1                 ;211
0000fc  bf0c              ITE      EQ                    ;211
0000fe  a387              ADREQ    r3,|L5.796|
000100  a387              ADRNE    r3,|L5.800|
000102  a28e              ADR      r2,|L5.828|
000104  210d              MOVS     r1,#0xd               ;211
000106  4608              MOV      r0,r1                 ;211
000108  f7fffffe          BL       tft_prints
00010c  68e0              LDR      r0,[r4,#0xc]          ;212  ; GAME_SELECT
00010e  2802              CMP      r0,#2                 ;212
000110  bf0c              ITE      EQ                    ;212
000112  a382              ADREQ    r3,|L5.796|
000114  a382              ADRNE    r3,|L5.800|
000116  a28d              ADR      r2,|L5.844|
000118  210e              MOVS     r1,#0xe               ;212
00011a  200d              MOVS     r0,#0xd               ;212
00011c  f7fffffe          BL       tft_prints
000120  a28d              ADR      r2,|L5.856|
000122  2105              MOVS     r1,#5                 ;214
000124  2000              MOVS     r0,#0                 ;214
000126  f7fffffe          BL       tft_printc
00012a  a291              ADR      r2,|L5.880|
00012c  2105              MOVS     r1,#5                 ;216
00012e  2024              MOVS     r0,#0x24              ;216
000130  f7fffffe          BL       tft_printc
000134  a293              ADR      r2,|L5.900|
000136  210e              MOVS     r1,#0xe               ;217
000138  2000              MOVS     r0,#0                 ;217
00013a  f7fffffe          BL       tft_prints
00013e  a293              ADR      r2,|L5.908|
000140  210e              MOVS     r1,#0xe               ;218
000142  2024              MOVS     r0,#0x24              ;218
000144  f7fffffe          BL       tft_prints
000148  f7fffffe          BL       IMU_dataAvailable
00014c  f7fffffe          BL       getIMUControl
000150  2800              CMP      r0,#0                 ;230
000152  bf14              ITE      NE                    ;230
000154  a38f              ADRNE    r3,|L5.916|
000156  a378              ADREQ    r3,|L5.824|
000158  a28f              ADR      r2,|L5.920|
00015a  210a              MOVS     r1,#0xa               ;230
00015c  2006              MOVS     r0,#6                 ;230
00015e  f7fffffe          BL       tft_prints
000162  6928              LDR      r0,[r5,#0x10]         ;232
000164  f0100f20          TST      r0,#0x20              ;232
000168  bf02              ITTT     EQ                    ;232
00016a  78a0              LDRBEQ   r0,[r4,#2]            ;232  ; btn_state
00016c  f0100f20          TSTEQ    r0,#0x20              ;232
000170  f7fffffe          BLEQ     toggleIMUControl
000174  f7fffffe          BL       getRoll
000178  ee200a08          VMUL.F32 s0,s0,s16             ;238
00017c  2101              MOVS     r1,#1                 ;238
00017e  eebd0ac0          VCVT.S32.F32 s0,s0                 ;238
000182  ee100a10          VMOV     r0,s0                 ;238
000186  b202              SXTH     r2,r0                 ;238
000188  200a              MOVS     r0,#0xa               ;238
00018a  f7fffffe          BL       tft_printi
00018e  f7fffffe          BL       getPitch
000192  ee200a08          VMUL.F32 s0,s0,s16             ;239
000196  2102              MOVS     r1,#2                 ;239
000198  eebd0ac0          VCVT.S32.F32 s0,s0                 ;239
00019c  ee100a10          VMOV     r0,s0                 ;239
0001a0  b202              SXTH     r2,r0                 ;239
0001a2  200a              MOVS     r0,#0xa               ;239
0001a4  f7fffffe          BL       tft_printi
0001a8  f7fffffe          BL       getYaw
0001ac  ee200a08          VMUL.F32 s0,s0,s16             ;240
0001b0  2103              MOVS     r1,#3                 ;240
0001b2  eebd0ac0          VCVT.S32.F32 s0,s0                 ;240
0001b6  ee100a10          VMOV     r0,s0                 ;240
0001ba  b202              SXTH     r2,r0                 ;240
0001bc  200a              MOVS     r0,#0xa               ;240
0001be  f7fffffe          BL       tft_printi
0001c2  f7fffffe          BL       tft_update
0001c6  6860              LDR      r0,[r4,#4]            ;250  ; __ticks
0001c8  6921              LDR      r1,[r4,#0x10]         ;250  ; last_blink
0001ca  1a40              SUBS     r0,r0,r1              ;250
0001cc  2864              CMP      r0,#0x64              ;250
0001ce  d905              BLS      |L5.476|
0001d0  6970              LDR      r0,[r6,#0x14]         ;250
0001d2  f4804080          EOR      r0,r0,#0x4000         ;250
0001d6  6170              STR      r0,[r6,#0x14]         ;250
0001d8  6860              LDR      r0,[r4,#4]            ;252  ; __ticks
0001da  6120              STR      r0,[r4,#0x10]         ;252  ; last_blink
                  |L5.476|
0001dc  6861              LDR      r1,[r4,#4]            ;256  ; __ticks
0001de  6960              LDR      r0,[r4,#0x14]         ;256  ; last_bright
0001e0  1a08              SUBS     r0,r1,r0              ;256
0001e2  2864              CMP      r0,#0x64              ;256
0001e4  d912              BLS      |L5.524|
0001e6  6928              LDR      r0,[r5,#0x10]         ;257
0001e8  f0100f40          TST      r0,#0x40              ;257
0001ec  d102              BNE      |L5.500|
0001ee  6838              LDR      r0,[r7,#0]            ;257
0001f0  1d40              ADDS     r0,r0,#5              ;257
0001f2  6038              STR      r0,[r7,#0]            ;257
                  |L5.500|
0001f4  6838              LDR      r0,[r7,#0]            ;258
0001f6  fbaa2100          UMULL    r2,r1,r10,r0          ;258
0001fa  094a              LSRS     r2,r1,#5              ;258
0001fc  f06f0118          MVN      r1,#0x18              ;258
000200  4351              MULS     r1,r2,r1              ;258
000202  eb000081          ADD      r0,r0,r1,LSL #2       ;258
000206  6038              STR      r0,[r7,#0]            ;258
000208  6860              LDR      r0,[r4,#4]            ;259  ; __ticks
00020a  6160              STR      r0,[r4,#0x14]         ;259  ; last_bright
                  |L5.524|
00020c  6928              LDR      r0,[r5,#0x10]         ;263
00020e  ea380000          BICS     r0,r8,r0              ;263
000212  d010              BEQ      |L5.566|
000214  8860              LDRH     r0,[r4,#2]            ;263  ; btn_state
000216  f0200077          BIC      r0,r0,#0x77           ;263
00021a  f4304077          BICS     r0,r0,#0xf700         ;263
00021e  d10a              BNE      |L5.566|
000220  68e0              LDR      r0,[r4,#0xc]          ;265  ; GAME_SELECT
000222  4961              LDR      r1,|L5.936|
000224  1c40              ADDS     r0,r0,#1              ;265
000226  fb812100          SMULL    r2,r1,r1,r0           ;265
00022a  eba171e1          SUB      r1,r1,r1,ASR #31      ;265
00022e  eba10181          SUB      r1,r1,r1,LSL #2       ;265
000232  4408              ADD      r0,r0,r1              ;265
000234  60e0              STR      r0,[r4,#0xc]          ;265  ; GAME_SELECT
                  |L5.566|
000236  6928              LDR      r0,[r5,#0x10]
000238  ea390000          BICS     r0,r9,r0
00023c  d00b              BEQ      |L5.598|
00023e  8860              LDRH     r0,[r4,#2]  ; btn_state
000240  f02000fd          BIC      r0,r0,#0xfd
000244  f430403e          BICS     r0,r0,#0xbe00
000248  d105              BNE      |L5.598|
;;;268          GAME_SELECT--;
00024a  68e0              LDR      r0,[r4,#0xc]  ; GAME_SELECT
00024c  1e40              SUBS     r0,r0,#1
00024e  60e0              STR      r0,[r4,#0xc]  ; GAME_SELECT
000250  bf44              ITT      MI
000252  1cc0              ADDMI    r0,r0,#3
;;;269          if (GAME_SELECT<0) GAME_SELECT += 3;
000254  60e0              STRMI    r0,[r4,#0xc]  ; GAME_SELECT
                  |L5.598|
;;;270        }
;;;271        if (btn_clicked(BTN_X4)) {
000256  6928              LDR      r0,[r5,#0x10]
000258  f4107f00          TST      r0,#0x200
00025c  bf04              ITT      EQ
00025e  8860              LDRHEQ   r0,[r4,#2]  ; btn_state
000260  f4107f00          TSTEQ    r0,#0x200
000264  d003              BEQ      |L5.622|
;;;272          nes_init(rom_select(GAME_SELECT));
;;;273    
;;;274          while (1) {
;;;275            if (TIM6->SR & TIM_SR_UIF) {
;;;276              IMU_dataAvailable();
;;;277              TIM6->SR = 0;
;;;278              nes_frame(0);
;;;279              gpio_toggle(LED1);
;;;280              nes_frame(1);
;;;281              gpio_toggle(LED1);
;;;282              if (btn_clicked(BTN_X3)) cpu_reset();
;;;283              gpio_set(LED2);
;;;284            } else {
;;;285              gpio_reset(LED2);
;;;286            }
;;;287          }
;;;288        }
;;;289        btn_state = BUTTONS;
000266  6928              LDR      r0,[r5,#0x10]
000268  43c0              MVNS     r0,r0
00026a  8060              STRH     r0,[r4,#2]
00026c  e72e              B        |L5.204|
                  |L5.622|
00026e  68e0              LDR      r0,[r4,#0xc]          ;272  ; GAME_SELECT
000270  f7fffffe          BL       rom_select
000274  f7fffffe          BL       nes_init
000278  f8df9130          LDR      r9,|L5.940|
00027c  2700              MOVS     r7,#0                 ;272
00027e  f04f4880          MOV      r8,#0x40000000        ;285
000282  bf00              NOP                            ;275
                  |L5.644|
000284  f8db0010          LDR      r0,[r11,#0x10]        ;275
000288  f0100f01          TST      r0,#1                 ;275
00028c  bf08              IT       EQ                    ;285
00028e  f8c98000          STREQ    r8,[r9,#0]            ;285
000292  d0f7              BEQ      |L5.644|
000294  f7fffffe          BL       IMU_dataAvailable
000298  f8cb7010          STR      r7,[r11,#0x10]        ;277
00029c  2000              MOVS     r0,#0                 ;278
00029e  f7fffffe          BL       nes_frame
0002a2  6970              LDR      r0,[r6,#0x14]         ;278
0002a4  f4805000          EOR      r0,r0,#0x2000         ;278
0002a8  6170              STR      r0,[r6,#0x14]         ;278
0002aa  2001              MOVS     r0,#1                 ;280
0002ac  f7fffffe          BL       nes_frame
0002b0  6970              LDR      r0,[r6,#0x14]         ;280
0002b2  f4805000          EOR      r0,r0,#0x2000         ;280
0002b6  6170              STR      r0,[r6,#0x14]         ;280
0002b8  6928              LDR      r0,[r5,#0x10]         ;282
0002ba  f4107f80          TST      r0,#0x100             ;282
0002be  bf02              ITTT     EQ                    ;282
0002c0  8860              LDRHEQ   r0,[r4,#2]            ;282  ; btn_state
0002c2  f4107f80          TSTEQ    r0,#0x100             ;282
0002c6  f7fffffe          BLEQ     cpu_reset
0002ca  f44f4080          MOV      r0,#0x4000            ;283
0002ce  61b0              STR      r0,[r6,#0x18]         ;283
0002d0  e7d8              B        |L5.644|
;;;290    
;;;291    #endif
;;;292        /* USER CODE END WHILE */
;;;293    
;;;294        /* USER CODE BEGIN 3 */
;;;295      }
;;;296      /* USER CODE END 3 */
;;;297    }
;;;298    
                          ENDP

0002d2  0000              DCW      0x0000
                  |L5.724|
                          DCD      0x40001000
                  |L5.728|
                          DCD      0x40001c28
                  |L5.732|
                          DCD      0x40001c34
                  |L5.736|
                          DCD      0x40001c00
                  |L5.740|
                          DCD      0x51eb851f
                  |L5.744|
                          DCD      0x40020c00
                  |L5.748|
                          DCD      ||.data||
                  |L5.752|
                          DCD      0x40021000
                  |L5.756|
0002f4  454c4543          DCB      "ELEC3300(24) - Anshuman & Aaron",0
0002f8  33333030
0002fc  28323429
000300  202d2041
000304  6e736875
000308  6d616e20
00030c  26204161
000310  726f6e00
                  |L5.788|
000314  53454c45          DCB      "SELECT",0
000318  435400  
00031b  00                DCB      0
                  |L5.796|
00031c  5b3e00            DCB      "[>",0
00031f  00                DCB      0
                  |L5.800|
000320  2d00              DCB      "-",0
000322  00                DCB      0
000323  00                DCB      0
                  |L5.804|
000324  25732053          DCB      "%s Super Mario Bros]"
000328  75706572
00032c  204d6172
000330  696f2042
000334  726f735d
                  |L5.824|
000338  00                DCB      0
000339  00                DCB      0
00033a  00                DCB      0
00033b  00                DCB      0
                  |L5.828|
00033c  25732042          DCB      "%s Battle City]",0
000340  6174746c
000344  65204369
000348  74795d00
                  |L5.844|
00034c  2573204d          DCB      "%s Mappy]",0
000350  61707079
000354  5d00    
000356  00                DCB      0
000357  00                DCB      0
                  |L5.856|
000358  207b2f5c          DCB      " {/\\} \n{<}  {>}\n {\\/} ",0
00035c  7d200a7b
000360  3c7d2020
000364  7b3e7d0a
000368  207b5c2f
00036c  7d2000  
00036f  00                DCB      0
                  |L5.880|
000370  207b417d          DCB      " {A} \n{B} {A}\n {B} ",0
000374  200a7b42
000378  7d207b41
00037c  7d0a207b
000380  427d2000
                  |L5.900|
000384  7b53454c          DCB      "{SEL}",0
000388  7d00    
00038a  00                DCB      0
00038b  00                DCB      0
                  |L5.908|
00038c  7b535452          DCB      "{STRT}",0
000390  547d00  
000393  00                DCB      0
                  |L5.916|
000394  5b00              DCB      "[",0
000396  00                DCB      0
000397  00                DCB      0
                  |L5.920|
000398  2573494d          DCB      "%sIMU Control]",0
00039c  5520436f
0003a0  6e74726f
0003a4  6c5d00  
0003a7  00                DCB      0
                  |L5.936|
                          DCD      0x55555556
                  |L5.940|
                          DCD      0x40020c18

                          AREA ||.data||, DATA, ALIGN=2

                  __tickf
000000  0100              DCB      0x01,0x00
                  btn_state
000002  0000              DCW      0x0000
                  __ticks
                          DCD      0x00000000
                  __delay
                          DCD      0x00000000
                  GAME_SELECT
                          DCD      0x00000000
                  last_blink
                          DCD      0x00000000
                  last_bright
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 402
|__asm___6_main_c_main____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 587
|__asm___6_main_c_main____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
