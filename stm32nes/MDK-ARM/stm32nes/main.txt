; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\main.o --depend=stm32nes\main.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\main.crf ../Src/main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;325      */
;;;326    void Error_Handler(void)
000000  4770              BX       lr
;;;327    {
;;;328      /* USER CODE BEGIN Error_Handler_Debug */
;;;329      /* User can add his own implementation to report the HAL error return state */
;;;330    
;;;331      /* USER CODE END Error_Handler_Debug */
;;;332    }
;;;333    
                          ENDP


                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;315    }
;;;316    uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L2.8|
;;;317    {
;;;318      return __ticks;
000002  6840              LDR      r0,[r0,#4]  ; __ticks
;;;319    }
000004  4770              BX       lr
;;;320    /* USER CODE END 4 */
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;310    volatile uint8_t  __tickf = 1;
;;;311    void SysTick_Handler(void) {
000000  4806              LDR      r0,|L3.28|
;;;312    	__ticks++;
000002  6841              LDR      r1,[r0,#4]  ; __ticks
000004  1c49              ADDS     r1,r1,#1
000006  6041              STR      r1,[r0,#4]  ; __ticks
;;;313    	__tickf = 0;
000008  2100              MOVS     r1,#0
00000a  7001              STRB     r1,[r0,#0]
;;;314    	if (__delay) __delay--;
00000c  6881              LDR      r1,[r0,#8]  ; __delay
00000e  2900              CMP      r1,#0                 ;311
;;;315    }
000010  bf08              IT       EQ
000012  4770              BXEQ     lr
000014  6881              LDR      r1,[r0,#8]            ;314  ; __delay
000016  1e49              SUBS     r1,r1,#1              ;314
000018  6081              STR      r1,[r0,#8]            ;314  ; __delay
00001a  4770              BX       lr
;;;316    uint32_t HAL_GetTick(void)
                          ENDP

                  |L3.28|
                          DCD      ||.data||

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;267      */
;;;268    void SystemClock_Config(void)
000000  482b              LDR      r0,|L4.176|
;;;269    {
000002  b510              PUSH     {r4,lr}
000004  6801              LDR      r1,[r0,#0]
000006  f021010f          BIC      r1,r1,#0xf
00000a  f0410105          ORR      r1,r1,#5
00000e  6001              STR      r1,[r0,#0]
000010  6800              LDR      r0,[r0,#0]
000012  4828              LDR      r0,|L4.180|
000014  6801              LDR      r1,[r0,#0]
000016  f4414180          ORR      r1,r1,#0x4000
00001a  6001              STR      r1,[r0,#0]
00001c  4826              LDR      r0,|L4.184|
00001e  6801              LDR      r1,[r0,#0]
000020  f4413180          ORR      r1,r1,#0x10000
000024  6001              STR      r1,[r0,#0]
                  |L4.38|
000026  6801              LDR      r1,[r0,#0]
000028  f4113f00          TST      r1,#0x20000
00002c  d0fb              BEQ      |L4.38|
00002e  4924              LDR      r1,|L4.192|
000030  4a22              LDR      r2,|L4.188|
000032  680b              LDR      r3,[r1,#0]
000034  f8dfc08c          LDR      r12,|L4.196|
000038  ea03030c          AND      r3,r3,r12
00003c  431a              ORRS     r2,r2,r3
00003e  600a              STR      r2,[r1,#0]
000040  680a              LDR      r2,[r1,#0]
000042  f4223240          BIC      r2,r2,#0x30000
000046  600a              STR      r2,[r1,#0]
000048  6801              LDR      r1,[r0,#0]
00004a  f0417180          ORR      r1,r1,#0x1000000
00004e  6001              STR      r1,[r0,#0]
                  |L4.80|
000050  6801              LDR      r1,[r0,#0]
000052  f0117f00          TST      r1,#0x2000000
000056  d0fb              BEQ      |L4.80|
000058  481b              LDR      r0,|L4.200|
00005a  6801              LDR      r1,[r0,#0]
00005c  f02101f0          BIC      r1,r1,#0xf0
000060  6001              STR      r1,[r0,#0]
000062  6801              LDR      r1,[r0,#0]
000064  f42151e0          BIC      r1,r1,#0x1c00
000068  f44151a0          ORR      r1,r1,#0x1400
00006c  6001              STR      r1,[r0,#0]
00006e  6801              LDR      r1,[r0,#0]
000070  f4214160          BIC      r1,r1,#0xe000
000074  f4414100          ORR      r1,r1,#0x8000
000078  6001              STR      r1,[r0,#0]
00007a  6801              LDR      r1,[r0,#0]
00007c  f0210103          BIC      r1,r1,#3
000080  f0410102          ORR      r1,r1,#2
000084  6001              STR      r1,[r0,#0]
                  |L4.134|
000086  6801              LDR      r1,[r0,#0]
000088  f001010c          AND      r1,r1,#0xc
;;;270      LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
;;;271    
;;;272      if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
;;;273      {
;;;274      Error_Handler();  
;;;275      }
;;;276      LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
;;;277      LL_RCC_HSE_Enable();
;;;278    
;;;279       /* Wait till HSE is ready */
;;;280      while(LL_RCC_HSE_IsReady() != 1)
;;;281      {
;;;282        
;;;283      }
;;;284      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
;;;285      LL_RCC_PLL_Enable();
;;;286    
;;;287       /* Wait till PLL is ready */
;;;288      while(LL_RCC_PLL_IsReady() != 1)
;;;289      {
;;;290        
;;;291      }
;;;292      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
;;;293      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
;;;294      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
;;;295      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
;;;296    
;;;297       /* Wait till System clock is ready */
;;;298      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
00008c  2908              CMP      r1,#8
00008e  d1fa              BNE      |L4.134|
;;;299      {
;;;300      
;;;301      }
;;;302      LL_Init1msTick(168000000);
000090  4c0e              LDR      r4,|L4.204|
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       LL_Init1msTick
000098  f04f21e0          MOV      r1,#0xe000e000
00009c  6908              LDR      r0,[r1,#0x10]
00009e  f0400004          ORR      r0,r0,#4
0000a2  6108              STR      r0,[r1,#0x10]
;;;303      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
;;;304      LL_SetSystemCoreClock(168000000);
0000a4  4620              MOV      r0,r4
0000a6  e8bd4010          POP      {r4,lr}
0000aa  f7ffbffe          B.W      LL_SetSystemCoreClock
;;;305    }
;;;306    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      0x40023c00
                  |L4.180|
                          DCD      0x40007000
                  |L4.184|
                          DCD      0x40023800
                  |L4.188|
                          DCD      0x00405408
                  |L4.192|
                          DCD      0x40023804
                  |L4.196|
                          DCD      0xffbf8000
                  |L4.200|
                          DCD      0x40023808
                  |L4.204|
                          DCD      0x0a037a00

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;93       */
;;;94     int main(void)
000000  b082              SUB      sp,sp,#8
;;;95     {
;;;96       /* USER CODE BEGIN 1 */
;;;97     
;;;98       /* USER CODE END 1 */
;;;99     
;;;100      /* MCU Configuration--------------------------------------------------------*/
;;;101    
;;;102      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;103      HAL_Init();
000002  f7fffffe          BL       HAL_Init
;;;104    
;;;105      /* USER CODE BEGIN Init */
;;;106    
;;;107      /* USER CODE END Init */
;;;108    
;;;109      /* Configure the system clock */
;;;110      SystemClock_Config();
000006  f7fffffe          BL       SystemClock_Config
00000a  f04f20e0          MOV      r0,#0xe000e000
00000e  6901              LDR      r1,[r0,#0x10]
000010  f0410102          ORR      r1,r1,#2
000014  6101              STR      r1,[r0,#0x10]
;;;111    
;;;112      /* USER CODE BEGIN SysInit */
;;;113    	ticks_init();
;;;114      /* USER CODE END SysInit */
;;;115    
;;;116      /* Initialize all configured peripherals */
;;;117      MX_GPIO_Init();
000016  f7fffffe          BL       MX_GPIO_Init
;;;118      MX_DMA_Init();
00001a  f7fffffe          BL       MX_DMA_Init
;;;119      MX_SPI1_Init();
00001e  f7fffffe          BL       MX_SPI1_Init
;;;120      MX_USART1_UART_Init();
000022  f7fffffe          BL       MX_USART1_UART_Init
;;;121      MX_ADC1_Init();
000026  f7fffffe          BL       MX_ADC1_Init
;;;122      MX_SPI2_Init();
00002a  f7fffffe          BL       MX_SPI2_Init
;;;123      MX_USART2_UART_Init();
00002e  f7fffffe          BL       MX_USART2_UART_Init
;;;124      MX_TIM13_Init();
000032  f7fffffe          BL       MX_TIM13_Init
;;;125      MX_DAC_Init();
000036  f7fffffe          BL       MX_DAC_Init
;;;126      MX_TIM14_Init();
00003a  f7fffffe          BL       MX_TIM14_Init
;;;127      MX_TIM12_Init();
00003e  f7fffffe          BL       MX_TIM12_Init
;;;128      MX_TIM11_Init();
000042  f7fffffe          BL       MX_TIM11_Init
;;;129      MX_TIM10_Init();
000046  f7fffffe          BL       MX_TIM10_Init
;;;130      MX_TIM9_Init();
00004a  f7fffffe          BL       MX_TIM9_Init
;;;131      MX_TIM6_Init();
00004e  f7fffffe          BL       MX_TIM6_Init
;;;132      MX_TIM7_Init();
000052  f7fffffe          BL       MX_TIM7_Init
;;;133      MX_SDIO_SD_Init();
000056  f7fffffe          BL       MX_SDIO_SD_Init
;;;134      /* USER CODE BEGIN 2 */
;;;135      tft_init(PIN_ON_LEFT, BLACK, WHITE, GREEN, RED);
00005a  f44f4078          MOV      r0,#0xf800
00005e  9000              STR      r0,[sp,#0]
000060  f44f63fc          MOV      r3,#0x7e0
000064  f64f72ff          MOV      r2,#0xffff
000068  2100              MOVS     r1,#0
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       tft_init
;;;136      joystick_init();
000070  f7fffffe          BL       joystick_init
;;;137      TIM6->PSC = 83;
000074  4f60              LDR      r7,|L5.504|
000076  2053              MOVS     r0,#0x53
000078  62b8              STR      r0,[r7,#0x28]
;;;138      TIM6->ARR = 33333;
00007a  f2482035          MOV      r0,#0x8235
00007e  62f8              STR      r0,[r7,#0x2c]
;;;139      TIM6->CR1 = TIM_CR1_CEN;
000080  2001              MOVS     r0,#1
000082  6038              STR      r0,[r7,#0]
;;;140      /* USER CODE END 2 */
;;;141    
;;;142      /* Infinite loop */
;;;143      /* USER CODE BEGIN WHILE */
;;;144      while (1)
;;;145      {
;;;146    #if 0
;;;147        tft_clear();
;;;148        
;;;149        // tft_printc(0, 0, "Hello WorldHello WorldHello WorldHello WorldHello World");
;;;150        // tft_printi(0, 1, get_ticks());
;;;151        // tft_printi(0, 2, joystick_conv(joys[0].x));
;;;152        // tft_printi(0, 3, joystick_conv(joys[0].y));
;;;153        // tft_printi(0, 4, joystick_conv(joys[1].x));
;;;154        // tft_printi(0, 5, joystick_conv(joys[1].y));
;;;155        // tft_printb(0, 6, BUTTONS, 16);
;;;156        tft_printc(0, 0, "NES");
;;;157        cpu_debug_print(1);
;;;158        
;;;159        tft_update_dma();
;;;160    
;;;161        static uint16_t btn_state = 0;
;;;162        static uint32_t btn_clicked = 0;
;;;163        #define btn_pressed(X) (BUTTONS & X)
;;;164        #define btn_clicked(X) (BUTTONS & X) && !(btn_state & X)
;;;165        if (btn_clicked(BTN_R1)) {
;;;166          cpu_exec(1);
;;;167          btn_clicked = get_ticks();
;;;168        }
;;;169        if (btn_clicked(BTN_D1)) {
;;;170          nes_init();
;;;171        }
;;;172        if (btn_pressed(BTN_L1)) {
;;;173          cpu_exec(113);
;;;174        }
;;;175        btn_state = BUTTONS;
;;;176    
;;;177    		if (tick_tock()) {
;;;178    			static uint32_t last_ticks = 0;
;;;179    			if (get_ticks() - last_ticks >= 100) {
;;;180    				gpio_toggle(LED1);
;;;181    				last_ticks = get_ticks();
;;;182    			}
;;;183    
;;;184          if (((BUTTONS & BTN_R1)) && (get_ticks() - btn_clicked) > 1000) {
;;;185            cpu_exec(10);
;;;186          } else if (((BUTTONS & BTN_R1)) && (get_ticks() - btn_clicked) > 200) {
;;;187            cpu_exec(1);
;;;188          }
;;;189    		}
;;;190    #else
;;;191        static int GAME_SELECT = 0;
;;;192        #define NUM_OF_GAMES 3
;;;193        
;;;194        tft_clear();
;;;195        tft_printc(4, 0, "ELEC3300(24) - Anshuman & Aaron");
;;;196        tft_printc(6, 12, "SELECT");
;;;197        tft_prints(13, 12, "%s Super Mario Bros]", (GAME_SELECT == 0) ? ("[>") : ("-"));
;;;198        tft_prints(13, 13, "%s Battle City]"     , (GAME_SELECT == 1) ? ("[>") : ("-"));
;;;199        tft_prints(13, 14, "%s Mappy]"           , (GAME_SELECT == 2) ? ("[>") : ("-"));
;;;200        
;;;201        tft_printc(0, 5, " {/\\} \n{<}  {>}\n {\\/} ");
;;;202        // tft_printc(0, 5, " /\\ \n/  \\\n\\  /\n \\/ ");
;;;203        tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;204        tft_prints(0,  14, "{SEL}");
;;;205        tft_prints(36, 14, "{STRT}");
;;;206    
;;;207        tft_printc(5, 1, " __    __  ________   ______   \n\
;;;208    /  \\  /  |/        | /      \\ \n\
;;;209    [$$]  \\ [$$] |[$$$$$$$$]/ /[$$$$$$]  |\n\
;;;210    [$$$]  \\[$$] |[$$] |__    [$$] \\__[$$]/ \n\
;;;211    [$$$$]  [$$] |[$$]    |   [$$]      \\ \n\
;;;212    [$$] [$$] [$$] |[$$$$$]/     [$$$$$$]  |\n\
;;;213    [$$] |[$$$$] |[$$] |_____ /  \\__[$$] |\n\
;;;214    [$$] | [$$$] |[$$]       |[$$]    [$$]/ \n\
;;;215    [$$]/   [$$]/ [$$$$$$$$]/  [$$$$$$]/  ");
;;;216    
;;;217        tft_update();
;;;218    
;;;219        static uint32_t last_blink = 0;
;;;220        if ((get_ticks() - last_blink) > 100) {
;;;221          gpio_toggle(LED2);
;;;222          last_blink = get_ticks();
;;;223        }
;;;224    
;;;225        static uint16_t btn_state = 0;
;;;226        #define btn_pressed(X) (BUTTONS & (X))
;;;227        #define btn_clicked(X) (BUTTONS & (X)) && !(btn_state & (X))
;;;228    
;;;229        if (btn_clicked(BTN_X2|BTN_D1|BTN_D2|BTN_X1)) {
;;;230          GAME_SELECT++;
;;;231          GAME_SELECT %= 3;
000084  f8dfa174          LDR      r10,|L5.508|
000088  4d5d              LDR      r5,|L5.512|
00008a  4c5e              LDR      r4,|L5.516|
00008c  4e5e              LDR      r6,|L5.520|
00008e  f64008c8          MOV      r8,#0x8c8             ;229
;;;232        }
;;;233        if (btn_clicked(BTN_X3|BTN_U1|BTN_U2)) {
000092  f2441902          MOV      r9,#0x4102
000096  bf00              NOP                            ;194
                  |L5.152|
000098  f7fffffe          BL       tft_clear
00009c  a25b              ADR      r2,|L5.524|
00009e  2100              MOVS     r1,#0                 ;195
0000a0  2004              MOVS     r0,#4                 ;195
0000a2  f7fffffe          BL       tft_printc
0000a6  a261              ADR      r2,|L5.556|
0000a8  210c              MOVS     r1,#0xc               ;196
0000aa  2006              MOVS     r0,#6                 ;196
0000ac  f7fffffe          BL       tft_printc
0000b0  68e0              LDR      r0,[r4,#0xc]          ;197  ; GAME_SELECT
0000b2  2800              CMP      r0,#0                 ;197
0000b4  bf0c              ITE      EQ                    ;197
0000b6  a35f              ADREQ    r3,|L5.564|
0000b8  a35f              ADRNE    r3,|L5.568|
0000ba  a260              ADR      r2,|L5.572|
0000bc  210c              MOVS     r1,#0xc               ;197
0000be  200d              MOVS     r0,#0xd               ;197
0000c0  f7fffffe          BL       tft_prints
0000c4  68e0              LDR      r0,[r4,#0xc]          ;198  ; GAME_SELECT
0000c6  2801              CMP      r0,#1                 ;198
0000c8  bf0c              ITE      EQ                    ;198
0000ca  a35a              ADREQ    r3,|L5.564|
0000cc  a35a              ADRNE    r3,|L5.568|
0000ce  a261              ADR      r2,|L5.596|
0000d0  210d              MOVS     r1,#0xd               ;198
0000d2  4608              MOV      r0,r1                 ;198
0000d4  f7fffffe          BL       tft_prints
0000d8  68e0              LDR      r0,[r4,#0xc]          ;199  ; GAME_SELECT
0000da  2802              CMP      r0,#2                 ;199
0000dc  bf0c              ITE      EQ                    ;199
0000de  a355              ADREQ    r3,|L5.564|
0000e0  a355              ADRNE    r3,|L5.568|
0000e2  a260              ADR      r2,|L5.612|
0000e4  210e              MOVS     r1,#0xe               ;199
0000e6  200d              MOVS     r0,#0xd               ;199
0000e8  f7fffffe          BL       tft_prints
0000ec  a260              ADR      r2,|L5.624|
0000ee  2105              MOVS     r1,#5                 ;201
0000f0  2000              MOVS     r0,#0                 ;201
0000f2  f7fffffe          BL       tft_printc
0000f6  a264              ADR      r2,|L5.648|
0000f8  2105              MOVS     r1,#5                 ;203
0000fa  2024              MOVS     r0,#0x24              ;203
0000fc  f7fffffe          BL       tft_printc
000100  a266              ADR      r2,|L5.668|
000102  210e              MOVS     r1,#0xe               ;204
000104  2000              MOVS     r0,#0                 ;204
000106  f7fffffe          BL       tft_prints
00010a  a266              ADR      r2,|L5.676|
00010c  210e              MOVS     r1,#0xe               ;205
00010e  2024              MOVS     r0,#0x24              ;205
000110  f7fffffe          BL       tft_prints
000114  4a65              LDR      r2,|L5.684|
000116  2101              MOVS     r1,#1                 ;207
000118  2005              MOVS     r0,#5                 ;207
00011a  f7fffffe          BL       tft_printc
00011e  f7fffffe          BL       tft_update
000122  6860              LDR      r0,[r4,#4]            ;220  ; __ticks
000124  6921              LDR      r1,[r4,#0x10]         ;220  ; last_blink
000126  1a40              SUBS     r0,r0,r1              ;220
000128  2864              CMP      r0,#0x64              ;220
00012a  d905              BLS      |L5.312|
00012c  6968              LDR      r0,[r5,#0x14]         ;220
00012e  f4804080          EOR      r0,r0,#0x4000         ;220
000132  6168              STR      r0,[r5,#0x14]         ;220
000134  6860              LDR      r0,[r4,#4]            ;222  ; __ticks
000136  6120              STR      r0,[r4,#0x10]         ;222  ; last_blink
                  |L5.312|
000138  6930              LDR      r0,[r6,#0x10]         ;229
00013a  ea380000          BICS     r0,r8,r0              ;229
00013e  d00f              BEQ      |L5.352|
000140  8860              LDRH     r0,[r4,#2]            ;229  ; btn_state
000142  f0200037          BIC      r0,r0,#0x37           ;229
000146  f4304077          BICS     r0,r0,#0xf700         ;229
00014a  d109              BNE      |L5.352|
00014c  68e0              LDR      r0,[r4,#0xc]          ;230  ; GAME_SELECT
00014e  1c40              ADDS     r0,r0,#1              ;230
000150  fb8a2100          SMULL    r2,r1,r10,r0          ;231
000154  eba171e1          SUB      r1,r1,r1,ASR #31      ;231
000158  eba10181          SUB      r1,r1,r1,LSL #2       ;231
00015c  4408              ADD      r0,r0,r1              ;231
00015e  60e0              STR      r0,[r4,#0xc]          ;231  ; GAME_SELECT
                  |L5.352|
000160  6930              LDR      r0,[r6,#0x10]
000162  ea390000          BICS     r0,r9,r0
000166  d00b              BEQ      |L5.384|
000168  8860              LDRH     r0,[r4,#2]  ; btn_state
00016a  f02000fd          BIC      r0,r0,#0xfd
00016e  f430403e          BICS     r0,r0,#0xbe00
000172  d105              BNE      |L5.384|
;;;234          GAME_SELECT--;
000174  68e0              LDR      r0,[r4,#0xc]  ; GAME_SELECT
000176  1e40              SUBS     r0,r0,#1
000178  60e0              STR      r0,[r4,#0xc]  ; GAME_SELECT
00017a  bf44              ITT      MI
00017c  1cc0              ADDMI    r0,r0,#3
;;;235          if (GAME_SELECT<0) GAME_SELECT += 3;
00017e  60e0              STRMI    r0,[r4,#0xc]  ; GAME_SELECT
                  |L5.384|
;;;236        }
;;;237        if (btn_clicked(BTN_X4)) {
000180  6930              LDR      r0,[r6,#0x10]
000182  f4107f00          TST      r0,#0x200
000186  bf04              ITT      EQ
000188  8860              LDRHEQ   r0,[r4,#2]  ; btn_state
00018a  f4107f00          TSTEQ    r0,#0x200
00018e  d003              BEQ      |L5.408|
;;;238          nes_init(rom_select(GAME_SELECT));
;;;239    
;;;240          while (1) {
;;;241            if (TIM6->SR & TIM_SR_UIF) {
;;;242              TIM6->SR = 0;
;;;243              nes_frame(0);
;;;244              gpio_toggle(LED1);
;;;245              nes_frame(1);
;;;246              gpio_toggle(LED1);
;;;247              if (btn_clicked(BTN_X3)) cpu_reset();
;;;248              gpio_set(LED2);
;;;249            } else {
;;;250              gpio_reset(LED2);
;;;251            }
;;;252          }
;;;253        }
;;;254        btn_state = BUTTONS;
000190  6930              LDR      r0,[r6,#0x10]
000192  43c0              MVNS     r0,r0
000194  8060              STRH     r0,[r4,#2]
000196  e77f              B        |L5.152|
                  |L5.408|
000198  68e0              LDR      r0,[r4,#0xc]          ;238  ; GAME_SELECT
00019a  f7fffffe          BL       rom_select
00019e  f7fffffe          BL       nes_init
0001a2  f8dfa10c          LDR      r10,|L5.688|
0001a6  f04f0800          MOV      r8,#0                 ;238
0001aa  f04f4980          MOV      r9,#0x40000000        ;250
                  |L5.430|
0001ae  6938              LDR      r0,[r7,#0x10]         ;241
0001b0  f0100f01          TST      r0,#1                 ;241
0001b4  bf08              IT       EQ                    ;250
0001b6  f8ca9000          STREQ    r9,[r10,#0]           ;250
0001ba  d0f8              BEQ      |L5.430|
0001bc  f8c78010          STR      r8,[r7,#0x10]         ;242
0001c0  2000              MOVS     r0,#0                 ;243
0001c2  f7fffffe          BL       nes_frame
0001c6  6968              LDR      r0,[r5,#0x14]         ;243
0001c8  f4805000          EOR      r0,r0,#0x2000         ;243
0001cc  6168              STR      r0,[r5,#0x14]         ;243
0001ce  2001              MOVS     r0,#1                 ;245
0001d0  f7fffffe          BL       nes_frame
0001d4  6968              LDR      r0,[r5,#0x14]         ;245
0001d6  f4805000          EOR      r0,r0,#0x2000         ;245
0001da  6168              STR      r0,[r5,#0x14]         ;245
0001dc  6930              LDR      r0,[r6,#0x10]         ;247
0001de  f4107f80          TST      r0,#0x100             ;247
0001e2  bf04              ITT      EQ                    ;247
0001e4  8860              LDRHEQ   r0,[r4,#2]            ;247  ; btn_state
0001e6  f4107f80          TSTEQ    r0,#0x100             ;247
0001ea  d101              BNE      |L5.496|
0001ec  f7fffffe          BL       cpu_reset
                  |L5.496|
0001f0  f44f4080          MOV      r0,#0x4000            ;248
0001f4  61a8              STR      r0,[r5,#0x18]         ;248
0001f6  e7da              B        |L5.430|
;;;255    
;;;256    #endif
;;;257        /* USER CODE END WHILE */
;;;258    
;;;259        /* USER CODE BEGIN 3 */
;;;260      }
;;;261      /* USER CODE END 3 */
;;;262    }
;;;263    
                          ENDP

                  |L5.504|
                          DCD      0x40001000
                  |L5.508|
                          DCD      0x55555556
                  |L5.512|
                          DCD      0x40020c00
                  |L5.516|
                          DCD      ||.data||
                  |L5.520|
                          DCD      0x40021000
                  |L5.524|
00020c  454c4543          DCB      "ELEC3300(24) - Anshuman & Aaron",0
000210  33333030
000214  28323429
000218  202d2041
00021c  6e736875
000220  6d616e20
000224  26204161
000228  726f6e00
                  |L5.556|
00022c  53454c45          DCB      "SELECT",0
000230  435400  
000233  00                DCB      0
                  |L5.564|
000234  5b3e00            DCB      "[>",0
000237  00                DCB      0
                  |L5.568|
000238  2d00              DCB      "-",0
00023a  00                DCB      0
00023b  00                DCB      0
                  |L5.572|
00023c  25732053          DCB      "%s Super Mario Bros]",0
000240  75706572
000244  204d6172
000248  696f2042
00024c  726f735d
000250  00      
000251  00                DCB      0
000252  00                DCB      0
000253  00                DCB      0
                  |L5.596|
000254  25732042          DCB      "%s Battle City]",0
000258  6174746c
00025c  65204369
000260  74795d00
                  |L5.612|
000264  2573204d          DCB      "%s Mappy]",0
000268  61707079
00026c  5d00    
00026e  00                DCB      0
00026f  00                DCB      0
                  |L5.624|
000270  207b2f5c          DCB      " {/\\} \n{<}  {>}\n {\\/} ",0
000274  7d200a7b
000278  3c7d2020
00027c  7b3e7d0a
000280  207b5c2f
000284  7d2000  
000287  00                DCB      0
                  |L5.648|
000288  207b417d          DCB      " {A} \n{B} {A}\n {B} ",0
00028c  200a7b42
000290  7d207b41
000294  7d0a207b
000298  427d2000
                  |L5.668|
00029c  7b53454c          DCB      "{SEL}",0
0002a0  7d00    
0002a2  00                DCB      0
0002a3  00                DCB      0
                  |L5.676|
0002a4  7b535452          DCB      "{STRT}",0
0002a8  547d00  
0002ab  00                DCB      0
                  |L5.684|
                          DCD      ||.conststring||
                  |L5.688|
                          DCD      0x40020c18

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  205f5f20          DCB      " __    __  ________   ______   \n/  \\  /  |/        | "
000004  2020205f
000008  5f20205f
00000c  5f5f5f5f
000010  5f5f5f20
000014  20205f5f
000018  5f5f5f5f
00001c  2020200a
000020  2f20205c
000024  20202f20
000028  207c2f20
00002c  20202020
000030  2020207c
000034  20      
000035  2f202020          DCB      "/      \\ \n[$$$$]  \\ [$$$$] |[$$$$$$$$$$$$$$$$]/ /[$$"
000039  2020205c
00003d  200a5b24
000041  245d2020
000045  5c205b24
000049  245d207c
00004d  5b242424
000051  24242424
000055  245d2f20
000059  2f5b24  
00005c  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$$$]  \\[$$$$] |[$$$$] |__    [$$$$"
000060  245d2020
000064  7c0a5b24
000068  24245d20
00006c  205c5b24
000070  245d207c
000074  5b24245d
000078  207c5f5f
00007c  20202020
000080  5b2424  
000083  5d205c5f          DCB      "] \\__[$$$$]/ \n[$$$$$$$$]  [$$$$] |[$$$$]    |   [$$$$"
000087  5f5b2424
00008b  5d2f200a
00008f  5b242424
000093  245d2020
000097  5b24245d
00009b  207c5b24
00009f  245d2020
0000a3  20207c20
0000a7  20205b24
0000ab  24      
0000ac  5d202020          DCB      "]      \\ \n[$$$$] [$$$$] [$$$$] |[$$$$$$$$$$]/     [$$"
0000b0  2020205c
0000b4  200a5b24
0000b8  245d205b
0000bc  24245d20
0000c0  5b24245d
0000c4  207c5b24
0000c8  24242424
0000cc  5d2f2020
0000d0  2020205b
0000d4  24      
0000d5  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$] |[$$$$$$$$] |[$$$$] |_____ /  \\"
0000d9  245d2020
0000dd  7c0a5b24
0000e1  245d207c
0000e5  5b242424
0000e9  245d207c
0000ed  5b24245d
0000f1  207c5f5f
0000f5  5f5f5f20
0000f9  2f20205c
0000fd  5f5f5b24          DCB      "__[$$$$] |\n[$$$$] | [$$$$$$] |[$$$$]       |[$$$$]    "
000101  245d207c
000105  0a5b2424
000109  5d207c20
00010d  5b242424
000111  5d207c5b
000115  24245d20
000119  20202020
00011d  20207c5b
000121  24245d20
000125  202020  
000128  5b24245d          DCB      "[$$$$]/ \n[$$$$]/   [$$$$]/ [$$$$$$$$$$$$$$$$]/  [$$$$$$"
00012c  2f200a5b
000130  24245d2f
000134  2020205b
000138  24245d2f
00013c  205b2424
000140  24242424
000144  24245d2f
000148  20205b24
00014c  2424    
00014e  2424245d          DCB      "$$$$$$]/  ",0
000152  2f202000

                          AREA ||.data||, DATA, ALIGN=2

                  __tickf
000000  0100              DCB      0x01,0x00
                  btn_state
000002  0000              DCW      0x0000
                  __ticks
                          DCD      0x00000000
                  __delay
                          DCD      0x00000000
                  GAME_SELECT
                          DCD      0x00000000
                  last_blink
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 402
|__asm___6_main_c_main____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 587
|__asm___6_main_c_main____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
