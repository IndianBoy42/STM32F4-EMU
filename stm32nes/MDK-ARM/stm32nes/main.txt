; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\main.o --depend=stm32nes\main.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\main.crf ../Src/main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;438      */
;;;439    void Error_Handler(void)
000000  4770              BX       lr
;;;440    {
;;;441      /* USER CODE BEGIN Error_Handler_Debug */
;;;442      /* User can add his own implementation to report the HAL error return state */
;;;443    
;;;444      /* USER CODE END Error_Handler_Debug */
;;;445    }
;;;446    
                          ENDP


                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;428    }
;;;429    uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L2.8|
;;;430    {
;;;431      return __ticks;
000002  6840              LDR      r0,[r0,#4]  ; __ticks
;;;432    }
000004  4770              BX       lr
;;;433    /* USER CODE END 4 */
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||area_number.14||

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;423    volatile uint8_t  __tickf = 1;
;;;424    void SysTick_Handler(void) {
000000  4806              LDR      r0,|L3.28|
;;;425    	__ticks++;
000002  6841              LDR      r1,[r0,#4]  ; __ticks
000004  1c49              ADDS     r1,r1,#1
000006  6041              STR      r1,[r0,#4]  ; __ticks
;;;426    	__tickf = 0;
000008  2100              MOVS     r1,#0
00000a  7001              STRB     r1,[r0,#0]
;;;427    	if (__delay) __delay--;
00000c  6881              LDR      r1,[r0,#8]  ; __delay
00000e  2900              CMP      r1,#0                 ;424
;;;428    }
000010  bf08              IT       EQ
000012  4770              BXEQ     lr
000014  6881              LDR      r1,[r0,#8]            ;427  ; __delay
000016  1e49              SUBS     r1,r1,#1              ;427
000018  6081              STR      r1,[r0,#8]            ;427  ; __delay
00001a  4770              BX       lr
;;;429    uint32_t HAL_GetTick(void)
                          ENDP

                  |L3.28|
                          DCD      ||area_number.14||

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;380      */
;;;381    void SystemClock_Config(void)
000000  482b              LDR      r0,|L4.176|
;;;382    {
000002  b510              PUSH     {r4,lr}
000004  6801              LDR      r1,[r0,#0]
000006  f021010f          BIC      r1,r1,#0xf
00000a  f0410105          ORR      r1,r1,#5
00000e  6001              STR      r1,[r0,#0]
000010  6800              LDR      r0,[r0,#0]
000012  4828              LDR      r0,|L4.180|
000014  6801              LDR      r1,[r0,#0]
000016  f4414180          ORR      r1,r1,#0x4000
00001a  6001              STR      r1,[r0,#0]
00001c  4826              LDR      r0,|L4.184|
00001e  6801              LDR      r1,[r0,#0]
000020  f4413180          ORR      r1,r1,#0x10000
000024  6001              STR      r1,[r0,#0]
                  |L4.38|
000026  6801              LDR      r1,[r0,#0]
000028  f4113f00          TST      r1,#0x20000
00002c  d0fb              BEQ      |L4.38|
00002e  4924              LDR      r1,|L4.192|
000030  4a22              LDR      r2,|L4.188|
000032  680b              LDR      r3,[r1,#0]
000034  f8dfc08c          LDR      r12,|L4.196|
000038  ea03030c          AND      r3,r3,r12
00003c  431a              ORRS     r2,r2,r3
00003e  600a              STR      r2,[r1,#0]
000040  680a              LDR      r2,[r1,#0]
000042  f4223240          BIC      r2,r2,#0x30000
000046  600a              STR      r2,[r1,#0]
000048  6801              LDR      r1,[r0,#0]
00004a  f0417180          ORR      r1,r1,#0x1000000
00004e  6001              STR      r1,[r0,#0]
                  |L4.80|
000050  6801              LDR      r1,[r0,#0]
000052  f0117f00          TST      r1,#0x2000000
000056  d0fb              BEQ      |L4.80|
000058  481b              LDR      r0,|L4.200|
00005a  6801              LDR      r1,[r0,#0]
00005c  f02101f0          BIC      r1,r1,#0xf0
000060  6001              STR      r1,[r0,#0]
000062  6801              LDR      r1,[r0,#0]
000064  f42151e0          BIC      r1,r1,#0x1c00
000068  f44151a0          ORR      r1,r1,#0x1400
00006c  6001              STR      r1,[r0,#0]
00006e  6801              LDR      r1,[r0,#0]
000070  f4214160          BIC      r1,r1,#0xe000
000074  f4414100          ORR      r1,r1,#0x8000
000078  6001              STR      r1,[r0,#0]
00007a  6801              LDR      r1,[r0,#0]
00007c  f0210103          BIC      r1,r1,#3
000080  f0410102          ORR      r1,r1,#2
000084  6001              STR      r1,[r0,#0]
                  |L4.134|
000086  6801              LDR      r1,[r0,#0]
000088  f001010c          AND      r1,r1,#0xc
;;;383      LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
;;;384    
;;;385      if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
;;;386      {
;;;387      Error_Handler();  
;;;388      }
;;;389      LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
;;;390      LL_RCC_HSE_Enable();
;;;391    
;;;392       /* Wait till HSE is ready */
;;;393      while(LL_RCC_HSE_IsReady() != 1)
;;;394      {
;;;395        
;;;396      }
;;;397      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
;;;398      LL_RCC_PLL_Enable();
;;;399    
;;;400       /* Wait till PLL is ready */
;;;401      while(LL_RCC_PLL_IsReady() != 1)
;;;402      {
;;;403        
;;;404      }
;;;405      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
;;;406      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
;;;407      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
;;;408      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
;;;409    
;;;410       /* Wait till System clock is ready */
;;;411      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
00008c  2908              CMP      r1,#8
00008e  d1fa              BNE      |L4.134|
;;;412      {
;;;413      
;;;414      }
;;;415      LL_Init1msTick(168000000);
000090  4c0e              LDR      r4,|L4.204|
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       LL_Init1msTick
000098  f04f21e0          MOV      r1,#0xe000e000
00009c  6908              LDR      r0,[r1,#0x10]
00009e  f0400004          ORR      r0,r0,#4
0000a2  6108              STR      r0,[r1,#0x10]
;;;416      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
;;;417      LL_SetSystemCoreClock(168000000);
0000a4  4620              MOV      r0,r4
0000a6  e8bd4010          POP      {r4,lr}
0000aa  f7ffbffe          B.W      LL_SetSystemCoreClock
;;;418    }
;;;419    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      0x40023c00
                  |L4.180|
                          DCD      0x40007000
                  |L4.184|
                          DCD      0x40023800
                  |L4.188|
                          DCD      0x00405408
                  |L4.192|
                          DCD      0x40023804
                  |L4.196|
                          DCD      0xffbf8000
                  |L4.200|
                          DCD      0x40023808
                  |L4.204|
                          DCD      0x0a037a00

                          AREA ||i.joypad_assigned||, CODE, READONLY, ALIGN=2

                  joypad_assigned PROC
;;;103    }
;;;104    uint32_t joypad_assigned(uint8_t i) {
000000  2204              MOVS     r2,#4
;;;105      uint32_t mask = 0;
;;;106      if (joypad_assignments[idx_from_mask(BTN_R1)]    == i) mask |= BTN_R1;
000002  fab2f282          CLZ      r2,r2
000006  f1c20220          RSB      r2,r2,#0x20
00000a  f0020cff          AND      r12,r2,#0xff
00000e  4aa0              LDR      r2,|L5.656|
000010  4601              MOV      r1,r0                 ;104
000012  2000              MOVS     r0,#0                 ;105
000014  f812c00c          LDRB     r12,[r2,r12]
000018  2320              MOVS     r3,#0x20
00001a  458c              CMP      r12,r1
00001c  bf08              IT       EQ
00001e  2004              MOVEQ    r0,#4
;;;107      if (joypad_assignments[idx_from_mask(BTN_D1)]    == i) mask |= BTN_D1;
000020  f04f0c08          MOV      r12,#8
000024  fabcfc8c          CLZ      r12,r12
000028  f1cc0c20          RSB      r12,r12,#0x20
00002c  f00c0cff          AND      r12,r12,#0xff
000030  f812c00c          LDRB     r12,[r2,r12]
000034  458c              CMP      r12,r1
000036  bf08              IT       EQ
000038  f0400008          ORREQ    r0,r0,#8
;;;108      if (joypad_assignments[idx_from_mask(BTN_L1)]    == i) mask |= BTN_L1;
00003c  f04f0c10          MOV      r12,#0x10
000040  fabcfc8c          CLZ      r12,r12
000044  f1cc0c20          RSB      r12,r12,#0x20
000048  f00c0cff          AND      r12,r12,#0xff
00004c  f812c00c          LDRB     r12,[r2,r12]
000050  458c              CMP      r12,r1
000052  bf08              IT       EQ
000054  f0400010          ORREQ    r0,r0,#0x10
;;;109      if (joypad_assignments[idx_from_mask(BTN_M1)]    == i) mask |= BTN_M1;
000058  fab3f383          CLZ      r3,r3
00005c  f1c30320          RSB      r3,r3,#0x20
000060  b2db              UXTB     r3,r3
000062  5cd3              LDRB     r3,[r2,r3]
000064  428b              CMP      r3,r1
000066  bf08              IT       EQ
000068  f0400020          ORREQ    r0,r0,#0x20
;;;110      if (joypad_assignments[idx_from_mask(BTN_X1)]    == i) mask |= BTN_X1;
00006c  2340              MOVS     r3,#0x40
00006e  fab3f383          CLZ      r3,r3
000072  f1c30320          RSB      r3,r3,#0x20
000076  b2db              UXTB     r3,r3
000078  5cd3              LDRB     r3,[r2,r3]
00007a  428b              CMP      r3,r1
00007c  bf08              IT       EQ
00007e  f0400040          ORREQ    r0,r0,#0x40
;;;111      if (joypad_assignments[idx_from_mask(BTN_X2)]    == i) mask |= BTN_X2;
000082  2380              MOVS     r3,#0x80
000084  fab3f383          CLZ      r3,r3
000088  f1c30320          RSB      r3,r3,#0x20
00008c  b2db              UXTB     r3,r3
00008e  5cd3              LDRB     r3,[r2,r3]
000090  428b              CMP      r3,r1
000092  bf08              IT       EQ
000094  f0400080          ORREQ    r0,r0,#0x80
;;;112      if (joypad_assignments[idx_from_mask(BTN_X3)]    == i) mask |= BTN_X3;
000098  f44f7380          MOV      r3,#0x100
00009c  fab3f383          CLZ      r3,r3
0000a0  f1c30320          RSB      r3,r3,#0x20
0000a4  b2db              UXTB     r3,r3
0000a6  5cd3              LDRB     r3,[r2,r3]
0000a8  428b              CMP      r3,r1
0000aa  bf08              IT       EQ
0000ac  f4407080          ORREQ    r0,r0,#0x100
;;;113      if (joypad_assignments[idx_from_mask(BTN_X4)]    == i) mask |= BTN_X4;
0000b0  f44f7300          MOV      r3,#0x200
0000b4  fab3f383          CLZ      r3,r3
0000b8  f1c30320          RSB      r3,r3,#0x20
0000bc  b2db              UXTB     r3,r3
0000be  5cd3              LDRB     r3,[r2,r3]
0000c0  428b              CMP      r3,r1
0000c2  bf08              IT       EQ
0000c4  f4407000          ORREQ    r0,r0,#0x200
;;;114      if (joypad_assignments[idx_from_mask(BTN_JS2)]   == i) mask |= BTN_JS2;
0000c8  f44f6380          MOV      r3,#0x400
0000cc  fab3f383          CLZ      r3,r3
0000d0  f1c30320          RSB      r3,r3,#0x20
0000d4  b2db              UXTB     r3,r3
0000d6  5cd3              LDRB     r3,[r2,r3]
0000d8  428b              CMP      r3,r1
0000da  bf08              IT       EQ
0000dc  f4406080          ORREQ    r0,r0,#0x400
;;;115      if (joypad_assignments[idx_from_mask(BTN_D2)]    == i) mask |= BTN_D2;
0000e0  f44f6300          MOV      r3,#0x800
0000e4  fab3f383          CLZ      r3,r3
0000e8  f1c30320          RSB      r3,r3,#0x20
0000ec  b2db              UXTB     r3,r3
0000ee  5cd3              LDRB     r3,[r2,r3]
0000f0  428b              CMP      r3,r1
0000f2  bf08              IT       EQ
0000f4  f4406000          ORREQ    r0,r0,#0x800
;;;116      if (joypad_assignments[idx_from_mask(BTN_R2)]    == i) mask |= BTN_R2;
0000f8  f44f5380          MOV      r3,#0x1000
0000fc  fab3f383          CLZ      r3,r3
000100  f1c30320          RSB      r3,r3,#0x20
000104  b2db              UXTB     r3,r3
000106  5cd3              LDRB     r3,[r2,r3]
000108  428b              CMP      r3,r1
00010a  bf08              IT       EQ
00010c  f4405080          ORREQ    r0,r0,#0x1000
;;;117      if (joypad_assignments[idx_from_mask(BTN_M2)]    == i) mask |= BTN_M2;
000110  f44f5300          MOV      r3,#0x2000
000114  fab3f383          CLZ      r3,r3
000118  f1c30320          RSB      r3,r3,#0x20
00011c  b2db              UXTB     r3,r3
00011e  5cd3              LDRB     r3,[r2,r3]
000120  428b              CMP      r3,r1
000122  bf08              IT       EQ
000124  f4405000          ORREQ    r0,r0,#0x2000
;;;118      if (joypad_assignments[idx_from_mask(BTN_U2)]    == i) mask |= BTN_U2;
000128  f44f4380          MOV      r3,#0x4000
00012c  fab3f383          CLZ      r3,r3
000130  f1c30320          RSB      r3,r3,#0x20
000134  b2db              UXTB     r3,r3
000136  5cd3              LDRB     r3,[r2,r3]
000138  428b              CMP      r3,r1
00013a  bf08              IT       EQ
00013c  f4404080          ORREQ    r0,r0,#0x4000
;;;119      if (joypad_assignments[idx_from_mask(BTN_L2)]    == i) mask |= BTN_L2;
000140  f44f4300          MOV      r3,#0x8000
000144  fab3f383          CLZ      r3,r3
000148  f1c30320          RSB      r3,r3,#0x20
00014c  b2db              UXTB     r3,r3
00014e  5cd3              LDRB     r3,[r2,r3]
000150  428b              CMP      r3,r1
000152  bf08              IT       EQ
000154  f4404000          ORREQ    r0,r0,#0x8000
;;;120      if (joypad_assignments[idx_from_mask(BTN_JS1)]   == i) mask |= BTN_JS1;
000158  2301              MOVS     r3,#1
00015a  fab3f383          CLZ      r3,r3
00015e  f1c30320          RSB      r3,r3,#0x20
000162  b2db              UXTB     r3,r3
000164  5cd3              LDRB     r3,[r2,r3]
000166  428b              CMP      r3,r1
000168  bf08              IT       EQ
00016a  f0400001          ORREQ    r0,r0,#1
;;;121      if (joypad_assignments[idx_from_mask(BTN_U1)]    == i) mask |= BTN_U1;
00016e  2302              MOVS     r3,#2
000170  fab3f383          CLZ      r3,r3
000174  f1c30320          RSB      r3,r3,#0x20
000178  b2db              UXTB     r3,r3
00017a  5cd3              LDRB     r3,[r2,r3]
00017c  428b              CMP      r3,r1
00017e  bf08              IT       EQ
000180  f0400002          ORREQ    r0,r0,#2
;;;122      if (joypad_assignments[idx_from_mask(BTN_JS1_L)] == i) mask |= BTN_JS1_L;
000184  f44f3380          MOV      r3,#0x10000
000188  fab3f383          CLZ      r3,r3
00018c  f1c30320          RSB      r3,r3,#0x20
000190  b2db              UXTB     r3,r3
000192  5cd3              LDRB     r3,[r2,r3]
000194  428b              CMP      r3,r1
000196  bf08              IT       EQ
000198  f4403080          ORREQ    r0,r0,#0x10000
;;;123      if (joypad_assignments[idx_from_mask(BTN_JS1_R)] == i) mask |= BTN_JS1_R;
00019c  f44f3300          MOV      r3,#0x20000
0001a0  fab3f383          CLZ      r3,r3
0001a4  f1c30320          RSB      r3,r3,#0x20
0001a8  b2db              UXTB     r3,r3
0001aa  5cd3              LDRB     r3,[r2,r3]
0001ac  428b              CMP      r3,r1
0001ae  bf08              IT       EQ
0001b0  f4403000          ORREQ    r0,r0,#0x20000
;;;124      if (joypad_assignments[idx_from_mask(BTN_JS1_D)] == i) mask |= BTN_JS1_D;
0001b4  f44f2380          MOV      r3,#0x40000
0001b8  fab3f383          CLZ      r3,r3
0001bc  f1c30320          RSB      r3,r3,#0x20
0001c0  b2db              UXTB     r3,r3
0001c2  5cd3              LDRB     r3,[r2,r3]
0001c4  428b              CMP      r3,r1
0001c6  bf08              IT       EQ
0001c8  f4402080          ORREQ    r0,r0,#0x40000
;;;125      if (joypad_assignments[idx_from_mask(BTN_JS1_U)] == i) mask |= BTN_JS1_U;
0001cc  f44f2300          MOV      r3,#0x80000
0001d0  fab3f383          CLZ      r3,r3
0001d4  f1c30320          RSB      r3,r3,#0x20
0001d8  b2db              UXTB     r3,r3
0001da  5cd3              LDRB     r3,[r2,r3]
0001dc  428b              CMP      r3,r1
0001de  bf08              IT       EQ
0001e0  f4402000          ORREQ    r0,r0,#0x80000
;;;126      if (joypad_assignments[idx_from_mask(BTN_JS2_L)] == i) mask |= BTN_JS2_L;
0001e4  f44f1380          MOV      r3,#0x100000
0001e8  fab3f383          CLZ      r3,r3
0001ec  f1c30320          RSB      r3,r3,#0x20
0001f0  b2db              UXTB     r3,r3
0001f2  5cd3              LDRB     r3,[r2,r3]
0001f4  428b              CMP      r3,r1
0001f6  bf08              IT       EQ
0001f8  f4401080          ORREQ    r0,r0,#0x100000
;;;127      if (joypad_assignments[idx_from_mask(BTN_JS2_R)] == i) mask |= BTN_JS2_R;
0001fc  f44f1300          MOV      r3,#0x200000
000200  fab3f383          CLZ      r3,r3
000204  f1c30320          RSB      r3,r3,#0x20
000208  b2db              UXTB     r3,r3
00020a  5cd3              LDRB     r3,[r2,r3]
00020c  428b              CMP      r3,r1
00020e  bf08              IT       EQ
000210  f4401000          ORREQ    r0,r0,#0x200000
;;;128      if (joypad_assignments[idx_from_mask(BTN_JS2_D)] == i) mask |= BTN_JS2_D;
000214  f44f0380          MOV      r3,#0x400000
000218  fab3f383          CLZ      r3,r3
00021c  f1c30320          RSB      r3,r3,#0x20
000220  b2db              UXTB     r3,r3
000222  5cd3              LDRB     r3,[r2,r3]
000224  428b              CMP      r3,r1
000226  bf08              IT       EQ
000228  f4400080          ORREQ    r0,r0,#0x400000
;;;129      if (joypad_assignments[idx_from_mask(BTN_JS2_U)] == i) mask |= BTN_JS2_U;
00022c  f44f0300          MOV      r3,#0x800000
000230  fab3f383          CLZ      r3,r3
000234  f1c30320          RSB      r3,r3,#0x20
000238  b2db              UXTB     r3,r3
00023a  5cd3              LDRB     r3,[r2,r3]
00023c  428b              CMP      r3,r1
00023e  bf08              IT       EQ
000240  f4400000          ORREQ    r0,r0,#0x800000
;;;130      if (joypad_assignments[idx_from_mask(BTN_IMU_L)] == i) mask |= BTN_IMU_L;
000244  f04f7380          MOV      r3,#0x1000000
000248  fab3f383          CLZ      r3,r3
00024c  f1c30320          RSB      r3,r3,#0x20
000250  b2db              UXTB     r3,r3
000252  5cd3              LDRB     r3,[r2,r3]
000254  428b              CMP      r3,r1
000256  bf08              IT       EQ
000258  f0407080          ORREQ    r0,r0,#0x1000000
;;;131      if (joypad_assignments[idx_from_mask(BTN_IMU_R)] == i) mask |= BTN_IMU_R;
00025c  f04f7300          MOV      r3,#0x2000000
000260  fab3f383          CLZ      r3,r3
000264  f1c30320          RSB      r3,r3,#0x20
000268  b2db              UXTB     r3,r3
00026a  5cd3              LDRB     r3,[r2,r3]
00026c  428b              CMP      r3,r1
00026e  bf08              IT       EQ
000270  f0407000          ORREQ    r0,r0,#0x2000000
;;;132      if (joypad_assignments[idx_from_mask(BTN_IMU_J)] == i) mask |= BTN_IMU_J;
000274  f04f6380          MOV      r3,#0x4000000
000278  fab3f383          CLZ      r3,r3
00027c  f1c30320          RSB      r3,r3,#0x20
000280  b2db              UXTB     r3,r3
000282  5cd2              LDRB     r2,[r2,r3]
000284  428a              CMP      r2,r1
000286  bf08              IT       EQ
000288  f0406080          ORREQ    r0,r0,#0x4000000
;;;133      return mask;
;;;134    }
00028c  4770              BX       lr
;;;135    /* USER CODE END 0 */
                          ENDP

00028e  0000              DCW      0x0000
                  |L5.656|
                          DCD      ||.bss||

                          AREA ||i.joypad_icon||, CODE, READONLY, ALIGN=2

                  joypad_icon PROC
;;;95     }
;;;96     char joypad_icon(uint32_t i) {
000000  a208              ADR      r2,|L6.36|
000002  b082              SUB      sp,sp,#8
;;;97       const char icons[6] = {'^', 'V', '<', '>', 'A', 'B'};
000004  e9d21200          LDRD     r1,r2,[r2,#0]
;;;98       return icons[joypad_assignments[idx_from_mask(i)]];
000008  e9cd1200          STRD     r1,r2,[sp,#0]
00000c  fab0f080          CLZ      r0,r0
000010  f1c00020          RSB      r0,r0,#0x20
000014  4905              LDR      r1,|L6.44|
000016  b2c0              UXTB     r0,r0
000018  5c08              LDRB     r0,[r1,r0]
00001a  f81d0000          LDRB     r0,[sp,r0]
;;;99     }
00001e  b002              ADD      sp,sp,#8
000020  4770              BX       lr
;;;100    void joypad_rotate(uint32_t mask) {
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
000024  5e563c3e          DCB      "^V<>AB",0
000028  414200  
00002b  00                DCB      0
                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.joypad_rotate||, CODE, READONLY, ALIGN=2

                  joypad_rotate PROC
;;;99     }
;;;100    void joypad_rotate(uint32_t mask) {
000000  fab0f180          CLZ      r1,r0
;;;101      joypad_assignments[idx_from_mask(mask)] += 1;
000004  f1c10120          RSB      r1,r1,#0x20
000008  4a0b              LDR      r2,|L7.56|
00000a  b2c9              UXTB     r1,r1
00000c  4411              ADD      r1,r1,r2
;;;102      joypad_assignments[idx_from_mask(mask)] %= 6;
00000e  fab0f080          CLZ      r0,r0
000012  780b              LDRB     r3,[r1,#0]            ;101
000014  f1c00020          RSB      r0,r0,#0x20
000018  1c5b              ADDS     r3,r3,#1              ;101
00001a  700b              STRB     r3,[r1,#0]            ;101
00001c  b2c0              UXTB     r0,r0
00001e  1881              ADDS     r1,r0,r2
000020  4a06              LDR      r2,|L7.60|
000022  7808              LDRB     r0,[r1,#0]
000024  fba23200          UMULL    r3,r2,r2,r0
000028  0892              LSRS     r2,r2,#2
00002a  eba20282          SUB      r2,r2,r2,LSL #2
00002e  eb000042          ADD      r0,r0,r2,LSL #1
000032  7008              STRB     r0,[r1,#0]
;;;103    }
000034  4770              BX       lr
;;;104    uint32_t joypad_assigned(uint8_t i) {
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      ||.bss||
                  |L7.60|
                          DCD      0xaaaaaaab

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;140      */
;;;141    int main(void)
000000  b09e              SUB      sp,sp,#0x78
;;;142    {
;;;143      /* USER CODE BEGIN 1 */
;;;144    
;;;145      /* USER CODE END 1 */
;;;146    
;;;147      /* MCU Configuration--------------------------------------------------------*/
;;;148    
;;;149      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;150      HAL_Init();
000002  f7fffffe          BL       HAL_Init
;;;151    
;;;152      /* USER CODE BEGIN Init */
;;;153    
;;;154      /* USER CODE END Init */
;;;155    
;;;156      /* Configure the system clock */
;;;157      SystemClock_Config();
000006  f7fffffe          BL       SystemClock_Config
00000a  f04f20e0          MOV      r0,#0xe000e000
00000e  6901              LDR      r1,[r0,#0x10]
000010  f0410102          ORR      r1,r1,#2
000014  6101              STR      r1,[r0,#0x10]
;;;158    
;;;159      /* USER CODE BEGIN SysInit */
;;;160    	ticks_init();
;;;161      /* USER CODE END SysInit */
;;;162    
;;;163      /* Initialize all configured peripherals */
;;;164      MX_GPIO_Init();
000016  f7fffffe          BL       MX_GPIO_Init
;;;165      MX_DMA_Init();
00001a  f7fffffe          BL       MX_DMA_Init
;;;166      MX_SPI1_Init();
00001e  f7fffffe          BL       MX_SPI1_Init
;;;167      MX_USART1_UART_Init();
000022  f7fffffe          BL       MX_USART1_UART_Init
;;;168      MX_ADC1_Init();
000026  f7fffffe          BL       MX_ADC1_Init
;;;169      MX_SPI2_Init();
00002a  f7fffffe          BL       MX_SPI2_Init
;;;170      MX_USART2_UART_Init();
00002e  f7fffffe          BL       MX_USART2_UART_Init
;;;171      MX_TIM13_Init();
000032  f7fffffe          BL       MX_TIM13_Init
;;;172      MX_DAC_Init();
000036  f7fffffe          BL       MX_DAC_Init
;;;173      MX_TIM14_Init();
00003a  f7fffffe          BL       MX_TIM14_Init
;;;174      MX_TIM12_Init();
00003e  f7fffffe          BL       MX_TIM12_Init
;;;175      MX_TIM11_Init();
000042  f7fffffe          BL       MX_TIM11_Init
;;;176      MX_TIM10_Init();
000046  f7fffffe          BL       MX_TIM10_Init
;;;177      MX_TIM9_Init();
00004a  f7fffffe          BL       MX_TIM9_Init
;;;178      MX_TIM6_Init();
00004e  f7fffffe          BL       MX_TIM6_Init
;;;179      MX_TIM7_Init();
000052  f7fffffe          BL       MX_TIM7_Init
;;;180      MX_SDIO_SD_Init();
000056  f7fffffe          BL       MX_SDIO_SD_Init
;;;181      /* USER CODE BEGIN 2 */
;;;182      tft_init(PIN_ON_LEFT, BLACK, WHITE, GREEN, RED);
00005a  f44f4078          MOV      r0,#0xf800
00005e  9000              STR      r0,[sp,#0]
000060  f44f63fc          MOV      r3,#0x7e0
000064  f64f72ff          MOV      r2,#0xffff
000068  2100              MOVS     r1,#0
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       tft_init
                  |L8.112|
;;;183      while(IMU_init() == 0);
000070  f7fffffe          BL       IMU_init
000074  2800              CMP      r0,#0
000076  d0fb              BEQ      |L8.112|
;;;184      // IMU_enableGyro(50);
;;;185      IMU_enableRotation(50);
000078  2032              MOVS     r0,#0x32
00007a  f7fffffe          BL       IMU_enableRotation
;;;186      // IMU_enableAccel(50);
;;;187      joystick_init();
00007e  f7fffffe          BL       joystick_init
;;;188    
;;;189      //Frame timer
;;;190      TIM6->PSC = 83;
000082  48ff              LDR      r0,|L8.1152|
000084  2153              MOVS     r1,#0x53
000086  6281              STR      r1,[r0,#0x28]
;;;191      TIM6->ARR = 33333;
000088  f2482135          MOV      r1,#0x8235
00008c  62c1              STR      r1,[r0,#0x2c]
;;;192      TIM6->CR1 = TIM_CR1_CEN;
00008e  2101              MOVS     r1,#1
000090  6001              STR      r1,[r0,#0]
;;;193      //LCD backlight PWM
;;;194      TIM13->PSC = 8399;
000092  4afc              LDR      r2,|L8.1156|
000094  f24200cf          MOV      r0,#0x20cf
000098  6010              STR      r0,[r2,#0]
;;;195      TIM13->ARR = 99;
00009a  2063              MOVS     r0,#0x63
00009c  1d12              ADDS     r2,r2,#4
00009e  6010              STR      r0,[r2,#0]
;;;196      TIM13->CCR1 = 10;
0000a0  f8dfc3e4          LDR      r12,|L8.1160|
0000a4  200a              MOVS     r0,#0xa
0000a6  f8cc0000          STR      r0,[r12,#0]
;;;197      TIM13->CR1 = TIM_CR1_CEN;
0000aa  48f8              LDR      r0,|L8.1164|
0000ac  6001              STR      r1,[r0,#0]
;;;198    
;;;199      joypad_assignments[idx_from_mask(BTN_R1)]    = ASSIGN_RIGHT;
0000ae  2704              MOVS     r7,#4
0000b0  fab7f087          CLZ      r0,r7
0000b4  f1c00020          RSB      r0,r0,#0x20
0000b8  4df5              LDR      r5,|L8.1168|
0000ba  b2c0              UXTB     r0,r0
0000bc  2403              MOVS     r4,#3
0000be  542c              STRB     r4,[r5,r0]
;;;200      joypad_assignments[idx_from_mask(BTN_D1)]    = ASSIGN_DOWN;
0000c0  2608              MOVS     r6,#8
0000c2  fab6f086          CLZ      r0,r6
0000c6  f1c00020          RSB      r0,r0,#0x20
0000ca  b2c0              UXTB     r0,r0
0000cc  2320              MOVS     r3,#0x20              ;199
0000ce  5429              STRB     r1,[r5,r0]
;;;201      joypad_assignments[idx_from_mask(BTN_L1)]    = ASSIGN_LEFT;
0000d0  2010              MOVS     r0,#0x10
0000d2  fab0f080          CLZ      r0,r0
0000d6  f1c00020          RSB      r0,r0,#0x20
0000da  b2c0              UXTB     r0,r0
;;;202      joypad_assignments[idx_from_mask(BTN_M1)]    = ASSIGN_B;
0000dc  fab3f383          CLZ      r3,r3
0000e0  2202              MOVS     r2,#2                 ;201
0000e2  f1c30320          RSB      r3,r3,#0x20
0000e6  542a              STRB     r2,[r5,r0]            ;201
0000e8  b2db              UXTB     r3,r3
0000ea  2005              MOVS     r0,#5
0000ec  54e8              STRB     r0,[r5,r3]
;;;203      joypad_assignments[idx_from_mask(BTN_JS2)]   = ASSIGN_B;
0000ee  028b              LSLS     r3,r1,#10
0000f0  fab3f383          CLZ      r3,r3
0000f4  f1c30320          RSB      r3,r3,#0x20
0000f8  b2db              UXTB     r3,r3
;;;204      joypad_assignments[idx_from_mask(BTN_D2)]    = ASSIGN_B;
;;;205      joypad_assignments[idx_from_mask(BTN_R2)]    = ASSIGN_A;
;;;206      joypad_assignments[idx_from_mask(BTN_M2)]    = ASSIGN_B;
;;;207      joypad_assignments[idx_from_mask(BTN_U2)]    = ASSIGN_A;
;;;208      joypad_assignments[idx_from_mask(BTN_L2)]    = ASSIGN_B;
;;;209      joypad_assignments[idx_from_mask(BTN_JS1)]   = ASSIGN_B;
;;;210      joypad_assignments[idx_from_mask(BTN_U1)]    = ASSIGN_UP;
0000fa  fab2f882          CLZ      r8,r2
0000fe  54e8              STRB     r0,[r5,r3]            ;203
000100  02cb              LSLS     r3,r1,#11             ;204
000102  fab3f383          CLZ      r3,r3                 ;204
000106  f1c30320          RSB      r3,r3,#0x20           ;204
00010a  b2db              UXTB     r3,r3                 ;204
00010c  f1c80820          RSB      r8,r8,#0x20
000110  54e8              STRB     r0,[r5,r3]            ;204
000112  030b              LSLS     r3,r1,#12             ;205
000114  fab3f383          CLZ      r3,r3                 ;205
000118  f1c30320          RSB      r3,r3,#0x20           ;205
00011c  b2db              UXTB     r3,r3                 ;205
00011e  f00808ff          AND      r8,r8,#0xff
000122  54ef              STRB     r7,[r5,r3]            ;205
000124  034b              LSLS     r3,r1,#13             ;206
000126  fab3f383          CLZ      r3,r3                 ;206
00012a  f1c30320          RSB      r3,r3,#0x20           ;206
00012e  b2db              UXTB     r3,r3                 ;206
000130  54e8              STRB     r0,[r5,r3]            ;206
000132  038b              LSLS     r3,r1,#14             ;207
000134  fab3f383          CLZ      r3,r3                 ;207
000138  f1c30320          RSB      r3,r3,#0x20           ;207
00013c  b2db              UXTB     r3,r3                 ;207
00013e  54ef              STRB     r7,[r5,r3]            ;207
000140  03cb              LSLS     r3,r1,#15             ;208
000142  fab3f383          CLZ      r3,r3                 ;208
000146  f1c30320          RSB      r3,r3,#0x20           ;208
00014a  b2db              UXTB     r3,r3                 ;208
00014c  54e8              STRB     r0,[r5,r3]            ;208
00014e  fab1f381          CLZ      r3,r1                 ;209
000152  f1c30320          RSB      r3,r3,#0x20           ;209
000156  b2db              UXTB     r3,r3                 ;209
000158  54e8              STRB     r0,[r5,r3]            ;209
00015a  2300              MOVS     r3,#0
00015c  f8053008          STRB     r3,[r5,r8]
;;;211      joypad_assignments[idx_from_mask(BTN_JS1_L)] = ASSIGN_LEFT;
000160  f44f3880          MOV      r8,#0x10000
000164  fab8f888          CLZ      r8,r8
000168  f1c80820          RSB      r8,r8,#0x20
00016c  f00808ff          AND      r8,r8,#0xff
000170  f8052008          STRB     r2,[r5,r8]
;;;212      joypad_assignments[idx_from_mask(BTN_JS1_R)] = ASSIGN_RIGHT;
000174  f44f3800          MOV      r8,#0x20000
000178  fab8f888          CLZ      r8,r8
00017c  f1c80820          RSB      r8,r8,#0x20
000180  f00808ff          AND      r8,r8,#0xff
000184  f8054008          STRB     r4,[r5,r8]
;;;213      joypad_assignments[idx_from_mask(BTN_JS1_D)] = ASSIGN_DOWN;
000188  f44f2880          MOV      r8,#0x40000
00018c  fab8f888          CLZ      r8,r8
000190  f1c80820          RSB      r8,r8,#0x20
000194  f00808ff          AND      r8,r8,#0xff
000198  f8051008          STRB     r1,[r5,r8]
;;;214      joypad_assignments[idx_from_mask(BTN_JS1_U)] = ASSIGN_UP;
00019c  04c9              LSLS     r1,r1,#19
00019e  fab1f181          CLZ      r1,r1
0001a2  f1c10120          RSB      r1,r1,#0x20
0001a6  b2c9              UXTB     r1,r1
0001a8  546b              STRB     r3,[r5,r1]
;;;215      joypad_assignments[idx_from_mask(BTN_JS2_L)] = ASSIGN_B;
0001aa  04d1              LSLS     r1,r2,#19
0001ac  fab1f181          CLZ      r1,r1
0001b0  f1c10120          RSB      r1,r1,#0x20
0001b4  b2c9              UXTB     r1,r1
0001b6  5468              STRB     r0,[r5,r1]
;;;216      joypad_assignments[idx_from_mask(BTN_JS2_R)] = ASSIGN_B;
0001b8  0511              LSLS     r1,r2,#20
0001ba  fab1f181          CLZ      r1,r1
0001be  f1c10120          RSB      r1,r1,#0x20
0001c2  b2c9              UXTB     r1,r1
0001c4  5468              STRB     r0,[r5,r1]
;;;217      joypad_assignments[idx_from_mask(BTN_JS2_D)] = ASSIGN_A;
0001c6  0550              LSLS     r0,r2,#21
0001c8  fab0f080          CLZ      r0,r0
0001cc  f1c00020          RSB      r0,r0,#0x20
0001d0  b2c0              UXTB     r0,r0
;;;218      joypad_assignments[idx_from_mask(BTN_JS2_U)] = ASSIGN_A;
;;;219      joypad_assignments[idx_from_mask(BTN_X1)]    = ASSIGN_SEL;
0001d2  2140              MOVS     r1,#0x40
0001d4  542f              STRB     r7,[r5,r0]            ;217
0001d6  0590              LSLS     r0,r2,#22             ;218
0001d8  fab0f080          CLZ      r0,r0                 ;218
0001dc  f1c00020          RSB      r0,r0,#0x20           ;218
0001e0  b2c0              UXTB     r0,r0                 ;218
0001e2  fab1f181          CLZ      r1,r1
0001e6  f1c10120          RSB      r1,r1,#0x20
0001ea  542f              STRB     r7,[r5,r0]            ;218
0001ec  b2c9              UXTB     r1,r1
0001ee  2007              MOVS     r0,#7
0001f0  5468              STRB     r0,[r5,r1]
;;;220      joypad_assignments[idx_from_mask(BTN_X2)]    = ASSIGN_NONE;
0001f2  2080              MOVS     r0,#0x80
0001f4  fab0f080          CLZ      r0,r0
0001f8  f1c00020          RSB      r0,r0,#0x20
0001fc  b2c0              UXTB     r0,r0
;;;221      joypad_assignments[idx_from_mask(BTN_X3)]    = ASSIGN_NONE;
;;;222      joypad_assignments[idx_from_mask(BTN_X4)]    = ASSIGN_START;
0001fe  0211              LSLS     r1,r2,#8
000200  542e              STRB     r6,[r5,r0]            ;220
000202  01d0              LSLS     r0,r2,#7              ;221
000204  fab0f080          CLZ      r0,r0                 ;221
000208  f1c00020          RSB      r0,r0,#0x20           ;221
00020c  b2c0              UXTB     r0,r0                 ;221
00020e  fab1f181          CLZ      r1,r1
000212  f1c10120          RSB      r1,r1,#0x20
000216  542e              STRB     r6,[r5,r0]            ;221
000218  b2c9              UXTB     r1,r1
00021a  2006              MOVS     r0,#6
00021c  5468              STRB     r0,[r5,r1]
;;;223      joypad_assignments[idx_from_mask(BTN_IMU_L)] = ASSIGN_LEFT;
00021e  05d0              LSLS     r0,r2,#23
000220  fab0f080          CLZ      r0,r0
000224  f1c00020          RSB      r0,r0,#0x20
000228  b2c0              UXTB     r0,r0
00022a  542a              STRB     r2,[r5,r0]
;;;224      joypad_assignments[idx_from_mask(BTN_IMU_R)] = ASSIGN_RIGHT;
00022c  0610              LSLS     r0,r2,#24
00022e  fab0f080          CLZ      r0,r0
000232  f1c00020          RSB      r0,r0,#0x20
000236  b2c0              UXTB     r0,r0
000238  542c              STRB     r4,[r5,r0]
;;;225      joypad_assignments[idx_from_mask(BTN_IMU_J)] = ASSIGN_A;
00023a  0650              LSLS     r0,r2,#25
00023c  fab0f080          CLZ      r0,r0
000240  f1c00020          RSB      r0,r0,#0x20
000244  b2c0              UXTB     r0,r0
000246  4c93              LDR      r4,|L8.1172|
000248  542f              STRB     r7,[r5,r0]
;;;226      delay(100);
00024a  2064              MOVS     r0,#0x64
00024c  60a0              STR      r0,[r4,#8]  ; __delay
                  |L8.590|
00024e  68a0              LDR      r0,[r4,#8]  ; __delay
000250  2800              CMP      r0,#0
000252  d1fc              BNE      |L8.590|
000254  ae18              ADD      r6,sp,#0x60
000256  af12              ADD      r7,sp,#0x48
000258  f10d0818          ADD      r8,sp,#0x18
00025c  f10d0b20          ADD      r11,sp,#0x20
                  |L8.608|
;;;227      /* USER CODE END 2 */
;;;228    
;;;229      /* Infinite loop */
;;;230      /* USER CODE BEGIN WHILE */
;;;231      while (1)
;;;232      {
;;;233        static int GAME_SELECT = 0;
;;;234        #define NUM_OF_GAMES 3
;;;235    
;;;236    
;;;237        static uint32_t last_joypad_state = 0;
;;;238        joypad_update();
000260  f7fffffe          BL       joypad_update
;;;239        #define btn_pressed(X) (joypad_state & (X))
;;;240        #define btn_clicked(X) (joypad_state & (X)) && !(last_joypad_state & (X))
;;;241        tft_clear();
000264  f7fffffe          BL       tft_clear
;;;242        tft_printc(4, 0, "ELEC3300(24) - Anshuman & Aaron");
000268  a28b              ADR      r2,|L8.1176|
00026a  2100              MOVS     r1,#0
00026c  2004              MOVS     r0,#4
00026e  f7fffffe          BL       tft_printc
;;;243        tft_printc(6, 12, "SELECT");
000272  a291              ADR      r2,|L8.1208|
000274  210c              MOVS     r1,#0xc
000276  2006              MOVS     r0,#6
000278  f7fffffe          BL       tft_printc
;;;244        tft_prints(13, 12, "%s Super Mario Bros]", (GAME_SELECT == 0) ? ("[>") : ("-"));
00027c  68e0              LDR      r0,[r4,#0xc]  ; GAME_SELECT
00027e  2800              CMP      r0,#0
000280  bf0c              ITE      EQ
000282  a38f              ADREQ    r3,|L8.1216|
000284  a38f              ADRNE    r3,|L8.1220|
000286  a290              ADR      r2,|L8.1224|
000288  210c              MOVS     r1,#0xc
00028a  200d              MOVS     r0,#0xd
00028c  f7fffffe          BL       tft_prints
;;;245        tft_prints(13, 13, "%s Battle City]"     , (GAME_SELECT == 1) ? ("[>") : ("-"));
000290  68e0              LDR      r0,[r4,#0xc]  ; GAME_SELECT
000292  2801              CMP      r0,#1
000294  bf0c              ITE      EQ
000296  a38a              ADREQ    r3,|L8.1216|
000298  a38a              ADRNE    r3,|L8.1220|
00029a  a291              ADR      r2,|L8.1248|
00029c  210d              MOVS     r1,#0xd
00029e  4608              MOV      r0,r1
0002a0  f7fffffe          BL       tft_prints
;;;246        tft_prints(13, 14, "%s Mappy]"           , (GAME_SELECT == 2) ? ("[>") : ("-"));
0002a4  68e0              LDR      r0,[r4,#0xc]  ; GAME_SELECT
0002a6  2802              CMP      r0,#2
0002a8  bf0c              ITE      EQ
0002aa  a385              ADREQ    r3,|L8.1216|
0002ac  a385              ADRNE    r3,|L8.1220|
0002ae  a290              ADR      r2,|L8.1264|
0002b0  210e              MOVS     r1,#0xe
0002b2  200d              MOVS     r0,#0xd
0002b4  f7fffffe          BL       tft_prints
0002b8  4890              LDR      r0,|L8.1276|
;;;247       
;;;248      #if 0 
;;;249        // tft_printc(0, 5, " {/\\} \n{<} {>}\n {\\/} ");
;;;250        tft_printc(0, 5, " {^} \n{<}  {>}\n {V} ");
;;;251        tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;252      #else
;;;253        tft_prints(0, 7, " {%c} \n{%c}{%c}{%c}\n {%c} ",
0002ba  2208              MOVS     r2,#8
0002bc  fab2f282          CLZ      r2,r2
0002c0  e9d01000          LDRD     r1,r0,[r0,#0]
0002c4  f1c20220          RSB      r2,r2,#0x20
0002c8  e9cd1002          STRD     r1,r0,[sp,#8]
0002cc  b2d2              UXTB     r2,r2
0002ce  5cab              LDRB     r3,[r5,r2]
0002d0  aa02              ADD      r2,sp,#8
0002d2  f812a003          LDRB     r10,[r2,r3]
0002d6  2204              MOVS     r2,#4
0002d8  fab2f282          CLZ      r2,r2
0002dc  f1c20220          RSB      r2,r2,#0x20
0002e0  e9cd1018          STRD     r1,r0,[sp,#0x60]
0002e4  b2d2              UXTB     r2,r2
0002e6  2302              MOVS     r3,#2
0002e8  5caa              LDRB     r2,[r5,r2]
0002ea  f8169002          LDRB     r9,[r6,r2]
0002ee  2220              MOVS     r2,#0x20
0002f0  fab2f282          CLZ      r2,r2
0002f4  f1c20220          RSB      r2,r2,#0x20
0002f8  e9cd1012          STRD     r1,r0,[sp,#0x48]
0002fc  b2d2              UXTB     r2,r2
0002fe  5caa              LDRB     r2,[r5,r2]
000300  f817c002          LDRB     r12,[r7,r2]
000304  2210              MOVS     r2,#0x10
000306  fab2f282          CLZ      r2,r2
00030a  f1c20220          RSB      r2,r2,#0x20
00030e  e9cd1006          STRD     r1,r0,[sp,#0x18]
000312  b2d2              UXTB     r2,r2
000314  5caa              LDRB     r2,[r5,r2]
000316  f8182002          LDRB     r2,[r8,r2]
00031a  e9cd100c          STRD     r1,r0,[sp,#0x30]
00031e  fab3f083          CLZ      r0,r3
000322  f1c00020          RSB      r0,r0,#0x20
000326  b2c0              UXTB     r0,r0
000328  5c29              LDRB     r1,[r5,r0]
00032a  a80c              ADD      r0,sp,#0x30
00032c  5c43              LDRB     r3,[r0,r1]
00032e  e9cd2c00          STRD     r2,r12,[sp,#0]
000332  e9cd9a02          STRD     r9,r10,[sp,#8]
000336  a272              ADR      r2,|L8.1280|
000338  2107              MOVS     r1,#7
00033a  2000              MOVS     r0,#0
00033c  f7fffffe          BL       tft_prints
000340  486e              LDR      r0,|L8.1276|
;;;254          joypad_icon(BTN_U1), joypad_icon(BTN_L1), joypad_icon(BTN_M1), joypad_icon(BTN_R1), joypad_icon(BTN_D1));
;;;255        tft_prints(36, 7, " {%c} \n{%c}{%c}{%c}\n {%c} ",
000342  f44f6200          MOV      r2,#0x800
000346  fab2f282          CLZ      r2,r2
00034a  e9d01000          LDRD     r1,r0,[r0,#0]
00034e  f1c20220          RSB      r2,r2,#0x20
000352  e9cd1001          STRD     r1,r0,[sp,#4]
000356  b2d2              UXTB     r2,r2
000358  5cab              LDRB     r3,[r5,r2]
00035a  aa01              ADD      r2,sp,#4
00035c  f812a003          LDRB     r10,[r2,r3]
000360  f44f5280          MOV      r2,#0x1000
000364  fab2f282          CLZ      r2,r2
000368  f1c20220          RSB      r2,r2,#0x20
00036c  e9cd101a          STRD     r1,r0,[sp,#0x68]
000370  b2d2              UXTB     r2,r2
000372  5cab              LDRB     r3,[r5,r2]
000374  aa1a              ADD      r2,sp,#0x68
000376  f8129003          LDRB     r9,[r2,r3]
00037a  f44f5200          MOV      r2,#0x2000
00037e  fab2f282          CLZ      r2,r2
000382  f1c20220          RSB      r2,r2,#0x20
000386  e9cd1014          STRD     r1,r0,[sp,#0x50]
00038a  b2d2              UXTB     r2,r2
00038c  5cab              LDRB     r3,[r5,r2]
00038e  aa14              ADD      r2,sp,#0x50
000390  f812c003          LDRB     r12,[r2,r3]
000394  f44f4200          MOV      r2,#0x8000
000398  fab2f282          CLZ      r2,r2
00039c  f1c20220          RSB      r2,r2,#0x20
0003a0  e9cd1008          STRD     r1,r0,[sp,#0x20]
0003a4  b2d2              UXTB     r2,r2
0003a6  f44f4380          MOV      r3,#0x4000
0003aa  5caa              LDRB     r2,[r5,r2]
0003ac  f81b2002          LDRB     r2,[r11,r2]
0003b0  e9cd100e          STRD     r1,r0,[sp,#0x38]
0003b4  fab3f083          CLZ      r0,r3
0003b8  f1c00020          RSB      r0,r0,#0x20
0003bc  b2c0              UXTB     r0,r0
0003be  5c29              LDRB     r1,[r5,r0]
0003c0  a80e              ADD      r0,sp,#0x38
0003c2  5c43              LDRB     r3,[r0,r1]
0003c4  e9cd2c00          STRD     r2,r12,[sp,#0]
0003c8  e9cd9a02          STRD     r9,r10,[sp,#8]
0003cc  a24c              ADR      r2,|L8.1280|
0003ce  2107              MOVS     r1,#7
0003d0  2024              MOVS     r0,#0x24
0003d2  f7fffffe          BL       tft_prints
0003d6  4849              LDR      r0,|L8.1276|
;;;256          joypad_icon(BTN_U2), joypad_icon(BTN_L2), joypad_icon(BTN_M2), joypad_icon(BTN_R2), joypad_icon(BTN_D2));
;;;257        tft_prints(0, 2, " {%c} \n{%c}{%c}{%c}\n {%c} ",
0003d8  f44f2280          MOV      r2,#0x40000
0003dc  fab2f282          CLZ      r2,r2
0003e0  e9d01000          LDRD     r1,r0,[r0,#0]
0003e4  f1c20220          RSB      r2,r2,#0x20
0003e8  e9cd1003          STRD     r1,r0,[sp,#0xc]
0003ec  b2d2              UXTB     r2,r2
0003ee  5cab              LDRB     r3,[r5,r2]
0003f0  aa03              ADD      r2,sp,#0xc
0003f2  f812a003          LDRB     r10,[r2,r3]
0003f6  f44f3200          MOV      r2,#0x20000
0003fa  fab2f282          CLZ      r2,r2
0003fe  f1c20220          RSB      r2,r2,#0x20
000402  e9cd101c          STRD     r1,r0,[sp,#0x70]
000406  b2d2              UXTB     r2,r2
000408  5cab              LDRB     r3,[r5,r2]
00040a  aa1c              ADD      r2,sp,#0x70
00040c  f8129003          LDRB     r9,[r2,r3]
000410  2201              MOVS     r2,#1
000412  fab2f282          CLZ      r2,r2
000416  f1c20220          RSB      r2,r2,#0x20
00041a  e9cd1016          STRD     r1,r0,[sp,#0x58]
00041e  b2d2              UXTB     r2,r2
000420  5cab              LDRB     r3,[r5,r2]
000422  aa16              ADD      r2,sp,#0x58
000424  f812c003          LDRB     r12,[r2,r3]
000428  f44f3280          MOV      r2,#0x10000
00042c  fab2f282          CLZ      r2,r2
000430  f1c20220          RSB      r2,r2,#0x20
000434  e9cd100a          STRD     r1,r0,[sp,#0x28]
000438  b2d2              UXTB     r2,r2
00043a  5cab              LDRB     r3,[r5,r2]
00043c  aa0a              ADD      r2,sp,#0x28
00043e  5cd2              LDRB     r2,[r2,r3]
000440  e9cd1010          STRD     r1,r0,[sp,#0x40]
000444  f44f2300          MOV      r3,#0x80000
000448  fab3f083          CLZ      r0,r3
00044c  f1c00020          RSB      r0,r0,#0x20
000450  b2c0              UXTB     r0,r0
000452  5c29              LDRB     r1,[r5,r0]
000454  a810              ADD      r0,sp,#0x40
000456  5c43              LDRB     r3,[r0,r1]
000458  e9cd2c00          STRD     r2,r12,[sp,#0]
00045c  e9cd9a02          STRD     r9,r10,[sp,#8]
000460  a227              ADR      r2,|L8.1280|
000462  2102              MOVS     r1,#2
000464  2000              MOVS     r0,#0
000466  f7fffffe          BL       tft_prints
00046a  4824              LDR      r0,|L8.1276|
;;;258          joypad_icon(BTN_JS1_U), joypad_icon(BTN_JS1_L), joypad_icon(BTN_JS1), joypad_icon(BTN_JS1_R), joypad_icon(BTN_JS1_D));
;;;259        tft_prints(36, 2, " {%c} \n{%c}{%c}{%c}\n {%c} ",
00046c  f44f0280          MOV      r2,#0x400000
000470  fab2f282          CLZ      r2,r2
000474  e9d01000          LDRD     r1,r0,[r0,#0]
000478  f1c20220          RSB      r2,r2,#0x20
00047c  b2d2              UXTB     r2,r2
00047e  e04d              B        |L8.1308|
                  |L8.1152|
                          DCD      0x40001000
                  |L8.1156|
                          DCD      0x40001c28
                  |L8.1160|
                          DCD      0x40001c34
                  |L8.1164|
                          DCD      0x40001c00
                  |L8.1168|
                          DCD      ||.bss||
                  |L8.1172|
                          DCD      ||area_number.14||
                  |L8.1176|
000498  454c4543          DCB      "ELEC3300(24) - Anshuman & Aaron",0
00049c  33333030
0004a0  28323429
0004a4  202d2041
0004a8  6e736875
0004ac  6d616e20
0004b0  26204161
0004b4  726f6e00
                  |L8.1208|
0004b8  53454c45          DCB      "SELECT",0
0004bc  435400  
0004bf  00                DCB      0
                  |L8.1216|
0004c0  5b3e00            DCB      "[>",0
0004c3  00                DCB      0
                  |L8.1220|
0004c4  2d00              DCB      "-",0
0004c6  00                DCB      0
0004c7  00                DCB      0
                  |L8.1224|
0004c8  25732053          DCB      "%s Super Mario Bros]"
0004cc  75706572
0004d0  204d6172
0004d4  696f2042
0004d8  726f735d
                  |L8.1244|
0004dc  00                DCB      0
0004dd  00                DCB      0
0004de  00                DCB      0
0004df  00                DCB      0
                  |L8.1248|
0004e0  25732042          DCB      "%s Battle City]",0
0004e4  6174746c
0004e8  65204369
0004ec  74795d00
                  |L8.1264|
0004f0  2573204d          DCB      "%s Mappy]",0
0004f4  61707079
0004f8  5d00    
0004fa  00                DCB      0
0004fb  00                DCB      0
                  |L8.1276|
                          DCD      ||i.joypad_icon||+0x24
                  |L8.1280|
000500  207b2563          DCB      " {%c} \n{%c}{%c}{%c}\n {%c} ",0
000504  7d200a7b
000508  25637d7b
00050c  25637d7b
000510  25637d0a
000514  207b2563
000518  7d2000  
00051b  00                DCB      0
                  |L8.1308|
00051c  e9cd1003          STRD     r1,r0,[sp,#0xc]
000520  5caa              LDRB     r2,[r5,r2]
000522  ab03              ADD      r3,sp,#0xc
000524  f813a002          LDRB     r10,[r3,r2]
000528  f44f1200          MOV      r2,#0x200000
00052c  fab2f282          CLZ      r2,r2
000530  f1c20220          RSB      r2,r2,#0x20
000534  b2d2              UXTB     r2,r2
000536  5caa              LDRB     r2,[r5,r2]
000538  f8139002          LDRB     r9,[r3,r2]
00053c  f44f6280          MOV      r2,#0x400
000540  fab2f282          CLZ      r2,r2
000544  f1c20220          RSB      r2,r2,#0x20
000548  e9cd1006          STRD     r1,r0,[sp,#0x18]
00054c  b2d2              UXTB     r2,r2
00054e  ab06              ADD      r3,sp,#0x18
000550  5caa              LDRB     r2,[r5,r2]
000552  a906              ADD      r1,sp,#0x18
000554  f813c002          LDRB     r12,[r3,r2]
000558  f44f1280          MOV      r2,#0x100000
00055c  fab2f282          CLZ      r2,r2
000560  f1c20220          RSB      r2,r2,#0x20
000564  b2d2              UXTB     r2,r2
000566  5caa              LDRB     r2,[r5,r2]
000568  5c9a              LDRB     r2,[r3,r2]
00056a  f44f0300          MOV      r3,#0x800000
00056e  fab3f083          CLZ      r0,r3
000572  f1c00020          RSB      r0,r0,#0x20
000576  b2c0              UXTB     r0,r0
000578  5c28              LDRB     r0,[r5,r0]
00057a  5c0b              LDRB     r3,[r1,r0]
00057c  e9cd2c00          STRD     r2,r12,[sp,#0]
000580  f2af0284          ADR      r2,|L8.1280|
000584  e9cd9a02          STRD     r9,r10,[sp,#8]
000588  2102              MOVS     r1,#2
00058a  2024              MOVS     r0,#0x24
00058c  f7fffffe          BL       tft_prints
;;;260          joypad_icon(BTN_JS2_U), joypad_icon(BTN_JS2_L), joypad_icon(BTN_JS2), joypad_icon(BTN_JS2_R), joypad_icon(BTN_JS2_D));
;;;261        
;;;262        if (btn_clicked(BTN_R1))    joypad_rotate(BTN_R1);
000590  f8df93c0          LDR      r9,|L8.2388|
000594  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
000598  f0100f04          TST      r0,#4
00059c  d006              BEQ      |L8.1452|
00059e  7c20              LDRB     r0,[r4,#0x10]  ; last_joypad_state
0005a0  f0100f04          TST      r0,#4
0005a4  bf04              ITT      EQ
0005a6  2004              MOVEQ    r0,#4
0005a8  f7fffffe          BLEQ     joypad_rotate
                  |L8.1452|
;;;263        if (btn_clicked(BTN_D1))    joypad_rotate(BTN_D1);
0005ac  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0005b0  f0100f08          TST      r0,#8
0005b4  d006              BEQ      |L8.1476|
0005b6  7c20              LDRB     r0,[r4,#0x10]  ; last_joypad_state
0005b8  f0100f08          TST      r0,#8
0005bc  bf04              ITT      EQ
0005be  2008              MOVEQ    r0,#8
0005c0  f7fffffe          BLEQ     joypad_rotate
                  |L8.1476|
;;;264        if (btn_clicked(BTN_L1))    joypad_rotate(BTN_L1);
0005c4  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0005c8  f0100f10          TST      r0,#0x10
0005cc  d006              BEQ      |L8.1500|
0005ce  7c20              LDRB     r0,[r4,#0x10]  ; last_joypad_state
0005d0  f0100f10          TST      r0,#0x10
0005d4  bf04              ITT      EQ
0005d6  2010              MOVEQ    r0,#0x10
0005d8  f7fffffe          BLEQ     joypad_rotate
                  |L8.1500|
;;;265        if (btn_clicked(BTN_M1))    joypad_rotate(BTN_M1);
0005dc  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0005e0  f0100f20          TST      r0,#0x20
0005e4  d006              BEQ      |L8.1524|
0005e6  7c20              LDRB     r0,[r4,#0x10]  ; last_joypad_state
0005e8  f0100f20          TST      r0,#0x20
0005ec  bf04              ITT      EQ
0005ee  2020              MOVEQ    r0,#0x20
0005f0  f7fffffe          BLEQ     joypad_rotate
                  |L8.1524|
;;;266        if (btn_clicked(BTN_JS2))   joypad_rotate(BTN_JS2);
0005f4  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0005f8  f4106f80          TST      r0,#0x400
0005fc  d007              BEQ      |L8.1550|
0005fe  8a20              LDRH     r0,[r4,#0x10]  ; last_joypad_state
000600  f4106f80          TST      r0,#0x400
000604  bf04              ITT      EQ
000606  f44f6080          MOVEQ    r0,#0x400
00060a  f7fffffe          BLEQ     joypad_rotate
                  |L8.1550|
;;;267        if (btn_clicked(BTN_D2))    joypad_rotate(BTN_D2);
00060e  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
000612  f4106f00          TST      r0,#0x800
000616  d007              BEQ      |L8.1576|
000618  8a20              LDRH     r0,[r4,#0x10]  ; last_joypad_state
00061a  f4106f00          TST      r0,#0x800
00061e  bf04              ITT      EQ
000620  f44f6000          MOVEQ    r0,#0x800
000624  f7fffffe          BLEQ     joypad_rotate
                  |L8.1576|
;;;268        if (btn_clicked(BTN_R2))    joypad_rotate(BTN_R2);
000628  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
00062c  f4105f80          TST      r0,#0x1000
000630  d007              BEQ      |L8.1602|
000632  8a20              LDRH     r0,[r4,#0x10]  ; last_joypad_state
000634  f4105f80          TST      r0,#0x1000
000638  bf04              ITT      EQ
00063a  f44f5080          MOVEQ    r0,#0x1000
00063e  f7fffffe          BLEQ     joypad_rotate
                  |L8.1602|
;;;269        if (btn_clicked(BTN_M2))    joypad_rotate(BTN_M2);
000642  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
000646  f4105f00          TST      r0,#0x2000
00064a  d007              BEQ      |L8.1628|
00064c  8a20              LDRH     r0,[r4,#0x10]  ; last_joypad_state
00064e  f4105f00          TST      r0,#0x2000
000652  bf04              ITT      EQ
000654  f44f5000          MOVEQ    r0,#0x2000
000658  f7fffffe          BLEQ     joypad_rotate
                  |L8.1628|
;;;270        if (btn_clicked(BTN_U2))    joypad_rotate(BTN_U2);
00065c  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
000660  f4104f80          TST      r0,#0x4000
000664  d007              BEQ      |L8.1654|
000666  8a20              LDRH     r0,[r4,#0x10]  ; last_joypad_state
000668  f4104f80          TST      r0,#0x4000
00066c  bf04              ITT      EQ
00066e  f44f4080          MOVEQ    r0,#0x4000
000672  f7fffffe          BLEQ     joypad_rotate
                  |L8.1654|
;;;271        if (btn_clicked(BTN_L2))    joypad_rotate(BTN_L2);
000676  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
00067a  f4104f00          TST      r0,#0x8000
00067e  d007              BEQ      |L8.1680|
000680  8a20              LDRH     r0,[r4,#0x10]  ; last_joypad_state
000682  f4104f00          TST      r0,#0x8000
000686  bf04              ITT      EQ
000688  f44f4000          MOVEQ    r0,#0x8000
00068c  f7fffffe          BLEQ     joypad_rotate
                  |L8.1680|
;;;272        if (btn_clicked(BTN_JS1))   joypad_rotate(BTN_JS1);
000690  f8d91000          LDR      r1,[r9,#0]  ; joypad_state
000694  7c20              LDRB     r0,[r4,#0x10]  ; last_joypad_state
000696  ea210000          BIC      r0,r1,r0
00069a  f0100f01          TST      r0,#1
00069e  bf1c              ITT      NE
0006a0  2001              MOVNE    r0,#1
0006a2  f7fffffe          BLNE     joypad_rotate
;;;273        if (btn_clicked(BTN_U1))    joypad_rotate(BTN_U1);
0006a6  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0006aa  f0100f02          TST      r0,#2
0006ae  d006              BEQ      |L8.1726|
0006b0  7c20              LDRB     r0,[r4,#0x10]  ; last_joypad_state
0006b2  f0100f02          TST      r0,#2
0006b6  bf04              ITT      EQ
0006b8  2002              MOVEQ    r0,#2
0006ba  f7fffffe          BLEQ     joypad_rotate
                  |L8.1726|
;;;274        if (btn_clicked(BTN_JS1_L)) joypad_rotate(BTN_JS1_L);
0006be  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0006c2  f4103f80          TST      r0,#0x10000
0006c6  d007              BEQ      |L8.1752|
0006c8  6920              LDR      r0,[r4,#0x10]  ; last_joypad_state
0006ca  f4103f80          TST      r0,#0x10000
0006ce  bf04              ITT      EQ
0006d0  f44f3080          MOVEQ    r0,#0x10000
0006d4  f7fffffe          BLEQ     joypad_rotate
                  |L8.1752|
;;;275        if (btn_clicked(BTN_JS1_R)) joypad_rotate(BTN_JS1_R);
0006d8  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0006dc  f4103f00          TST      r0,#0x20000
0006e0  d007              BEQ      |L8.1778|
0006e2  6920              LDR      r0,[r4,#0x10]  ; last_joypad_state
0006e4  f4103f00          TST      r0,#0x20000
0006e8  bf04              ITT      EQ
0006ea  f44f3000          MOVEQ    r0,#0x20000
0006ee  f7fffffe          BLEQ     joypad_rotate
                  |L8.1778|
;;;276        if (btn_clicked(BTN_JS1_D)) joypad_rotate(BTN_JS1_D);
0006f2  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0006f6  f4102f80          TST      r0,#0x40000
0006fa  d007              BEQ      |L8.1804|
0006fc  6920              LDR      r0,[r4,#0x10]  ; last_joypad_state
0006fe  f4102f80          TST      r0,#0x40000
000702  bf04              ITT      EQ
000704  f44f2080          MOVEQ    r0,#0x40000
000708  f7fffffe          BLEQ     joypad_rotate
                  |L8.1804|
;;;277        if (btn_clicked(BTN_JS1_U)) joypad_rotate(BTN_JS1_U);
00070c  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
000710  f4102f00          TST      r0,#0x80000
000714  d007              BEQ      |L8.1830|
000716  6920              LDR      r0,[r4,#0x10]  ; last_joypad_state
000718  f4102f00          TST      r0,#0x80000
00071c  bf04              ITT      EQ
00071e  f44f2000          MOVEQ    r0,#0x80000
000722  f7fffffe          BLEQ     joypad_rotate
                  |L8.1830|
;;;278        if (btn_clicked(BTN_JS2_L)) joypad_rotate(BTN_JS2_L);
000726  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
00072a  f4101f80          TST      r0,#0x100000
00072e  d007              BEQ      |L8.1856|
000730  6920              LDR      r0,[r4,#0x10]  ; last_joypad_state
000732  f4101f80          TST      r0,#0x100000
000736  bf04              ITT      EQ
000738  f44f1080          MOVEQ    r0,#0x100000
00073c  f7fffffe          BLEQ     joypad_rotate
                  |L8.1856|
;;;279        if (btn_clicked(BTN_JS2_R)) joypad_rotate(BTN_JS2_R);
000740  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
000744  f4101f00          TST      r0,#0x200000
000748  d007              BEQ      |L8.1882|
00074a  6920              LDR      r0,[r4,#0x10]  ; last_joypad_state
00074c  f4101f00          TST      r0,#0x200000
000750  bf04              ITT      EQ
000752  f44f1000          MOVEQ    r0,#0x200000
000756  f7fffffe          BLEQ     joypad_rotate
                  |L8.1882|
;;;280        if (btn_clicked(BTN_JS2_D)) joypad_rotate(BTN_JS2_D);
00075a  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
00075e  f4100f80          TST      r0,#0x400000
000762  d007              BEQ      |L8.1908|
000764  6920              LDR      r0,[r4,#0x10]  ; last_joypad_state
000766  f4100f80          TST      r0,#0x400000
00076a  bf04              ITT      EQ
00076c  f44f0080          MOVEQ    r0,#0x400000
000770  f7fffffe          BLEQ     joypad_rotate
                  |L8.1908|
;;;281        if (btn_clicked(BTN_JS2_U)) joypad_rotate(BTN_JS2_U);
000774  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
000778  f4100f00          TST      r0,#0x800000
00077c  d007              BEQ      |L8.1934|
00077e  6920              LDR      r0,[r4,#0x10]  ; last_joypad_state
000780  f4100f00          TST      r0,#0x800000
000784  bf04              ITT      EQ
000786  f44f0000          MOVEQ    r0,#0x800000
00078a  f7fffffe          BLEQ     joypad_rotate
                  |L8.1934|
;;;282        joypad_A     = joypad_assigned(ASSIGN_A);
00078e  2004              MOVS     r0,#4
000790  f7fffffe          BL       joypad_assigned
000794  4970              LDR      r1,|L8.2392|
;;;283        joypad_B     = joypad_assigned(ASSIGN_B);
000796  6008              STR      r0,[r1,#0]  ; joypad_A
000798  2005              MOVS     r0,#5
00079a  f7fffffe          BL       joypad_assigned
00079e  496f              LDR      r1,|L8.2396|
;;;284        joypad_U     = joypad_assigned(ASSIGN_UP);
0007a0  6008              STR      r0,[r1,#0]  ; joypad_B
0007a2  2000              MOVS     r0,#0
0007a4  f7fffffe          BL       joypad_assigned
0007a8  496d              LDR      r1,|L8.2400|
;;;285        joypad_D     = joypad_assigned(ASSIGN_DOWN);
0007aa  6008              STR      r0,[r1,#0]  ; joypad_U
0007ac  2001              MOVS     r0,#1
0007ae  f7fffffe          BL       joypad_assigned
0007b2  496c              LDR      r1,|L8.2404|
;;;286        joypad_L     = joypad_assigned(ASSIGN_LEFT);
0007b4  6008              STR      r0,[r1,#0]  ; joypad_D
0007b6  2002              MOVS     r0,#2
0007b8  f7fffffe          BL       joypad_assigned
0007bc  496a              LDR      r1,|L8.2408|
;;;287        joypad_R     = joypad_assigned(ASSIGN_RIGHT);
0007be  6008              STR      r0,[r1,#0]  ; joypad_L
0007c0  2003              MOVS     r0,#3
0007c2  f7fffffe          BL       joypad_assigned
0007c6  4969              LDR      r1,|L8.2412|
;;;288        joypad_SEL   = joypad_assigned(ASSIGN_SEL);
0007c8  6008              STR      r0,[r1,#0]  ; joypad_R
0007ca  2007              MOVS     r0,#7
0007cc  f7fffffe          BL       joypad_assigned
0007d0  4967              LDR      r1,|L8.2416|
;;;289        joypad_START = joypad_assigned(ASSIGN_START);
0007d2  6008              STR      r0,[r1,#0]  ; joypad_SEL
0007d4  2006              MOVS     r0,#6
0007d6  f7fffffe          BL       joypad_assigned
0007da  4966              LDR      r1,|L8.2420|
;;;290    
;;;291        // tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;292      #endif
;;;293        tft_prints(0,  14, "{SEL}");
0007dc  a266              ADR      r2,|L8.2424|
0007de  6008              STR      r0,[r1,#0]  ; joypad_START
0007e0  210e              MOVS     r1,#0xe
0007e2  2000              MOVS     r0,#0
0007e4  f7fffffe          BL       tft_prints
;;;294        tft_prints(36, 14, "{STRT}");
0007e8  a265              ADR      r2,|L8.2432|
0007ea  210e              MOVS     r1,#0xe
0007ec  2024              MOVS     r0,#0x24
0007ee  f7fffffe          BL       tft_prints
;;;295        tft_printc(5, 1, " __    __  ________   ______   \n\
0007f2  4a65              LDR      r2,|L8.2440|
0007f4  2101              MOVS     r1,#1
0007f6  2005              MOVS     r0,#5
0007f8  f7fffffe          BL       tft_printc
;;;296    /  \\  /  |/        | /      \\ \n\
;;;297    [$$]  \\ [$$] |[$$$$$$$$]/ /[$$$$$$]  |\n\
;;;298    [$$$]  \\[$$] |[$$] |__    [$$] \\__[$$]/ \n\
;;;299    [$$$$]  [$$] |[$$]    |   [$$]      \\ \n\
;;;300    [$$] [$$] [$$] |[$$$$$]/     [$$$$$$]  |\n\
;;;301    [$$] |[$$$$] |[$$] |_____ /  \\__[$$] |\n\
;;;302    [$$] | [$$$] |[$$]       |[$$]    [$$]/ \n\
;;;303    [$$]/   [$$]/ [$$$$$$$$]/  [$$$$$$]/  ");
;;;304    
;;;305        tft_prints(0,13, "%sIMU]",(getIMUControl())?"[":"");
0007fc  f7fffffe          BL       getIMUControl
000800  2800              CMP      r0,#0
000802  bf14              ITE      NE
000804  a361              ADRNE    r3,|L8.2444|
000806  f2af332c          ADREQ    r3,|L8.1244|
00080a  a261              ADR      r2,|L8.2448|
00080c  210d              MOVS     r1,#0xd
00080e  2000              MOVS     r0,#0
000810  f7fffffe          BL       tft_prints
;;;306        // IMU_dataAvailable();
;;;307        // tft_printi(6,11,(int16_t)getAccelY()*10);
;;;308        // tft_printi(0, 1, get_ticks()%1000);
;;;309        // tft_printi(5,1,(int16_t)(getQuatI()*1000));
;;;310        // tft_printi(5,2,(int16_t)(getQuatJ()*1000));
;;;311        // tft_printi(5,3,(int16_t)(getQuatK()*1000));
;;;312        // tft_printi(5,4,(int16_t)(getQuatReal()*1000));
;;;313        // tft_printi(10,1,(int16_t)(getRoll()*10));
;;;314        // tft_printi(10,2,(int16_t)(getPitch()*10));
;;;315        // tft_printi(10,3,(int16_t)(getYaw()*10));
;;;316        // tft_printi(5,2,(int16_t)(getAccelX()*1000));
;;;317    
;;;318        // tft_printi(5,1,getAccelLeftRight());
;;;319        // static uint8_t asdf = 0;
;;;320        // tft_printi(5,4,asdf+= getAccelFlick());
;;;321    
;;;322        tft_update();
000814  f7fffffe          BL       tft_update
;;;323        
;;;324        static uint32_t last_blink = 0;
;;;325        if ((get_ticks() - last_blink) > 100) {
000818  6861              LDR      r1,[r4,#4]  ; __ticks
00081a  6960              LDR      r0,[r4,#0x14]  ; last_blink
00081c  1a08              SUBS     r0,r1,r0
00081e  2864              CMP      r0,#0x64
000820  d906              BLS      |L8.2096|
000822  485d              LDR      r0,|L8.2456|
000824  6941              LDR      r1,[r0,#0x14]         ;305
000826  f4814180          EOR      r1,r1,#0x4000         ;305
00082a  6141              STR      r1,[r0,#0x14]         ;305
;;;326          gpio_toggle(LED2);
;;;327          last_blink = get_ticks();
00082c  6860              LDR      r0,[r4,#4]  ; __ticks
00082e  6160              STR      r0,[r4,#0x14]  ; last_blink
                  |L8.2096|
;;;328        }
;;;329    
;;;330        static uint32_t last_bright = 0;
;;;331        if ((get_ticks() - last_bright) > 50) {
000830  6861              LDR      r1,[r4,#4]  ; __ticks
000832  69a0              LDR      r0,[r4,#0x18]  ; last_bright
000834  1a08              SUBS     r0,r1,r0
000836  2832              CMP      r0,#0x32
000838  d916              BLS      |L8.2152|
;;;332          if (btn_pressed(BTN_X2)) TIM13->CCR1+= 3;
00083a  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
00083e  f0100f80          TST      r0,#0x80
000842  d003              BEQ      |L8.2124|
000844  4855              LDR      r0,|L8.2460|
000846  6801              LDR      r1,[r0,#0]
000848  1cc9              ADDS     r1,r1,#3
00084a  6001              STR      r1,[r0,#0]
                  |L8.2124|
;;;333          TIM13->CCR1%= 100;
00084c  4853              LDR      r0,|L8.2460|
00084e  6801              LDR      r1,[r0,#0]
000850  4a53              LDR      r2,|L8.2464|
000852  fba23201          UMULL    r3,r2,r2,r1
000856  0952              LSRS     r2,r2,#5
000858  f06f0318          MVN      r3,#0x18
00085c  435a              MULS     r2,r3,r2
00085e  eb010182          ADD      r1,r1,r2,LSL #2
000862  6001              STR      r1,[r0,#0]
;;;334          last_bright = get_ticks();
000864  6860              LDR      r0,[r4,#4]  ; __ticks
000866  61a0              STR      r0,[r4,#0x18]  ; last_bright
                  |L8.2152|
;;;335        }
;;;336    
;;;337        if (btn_clicked(BTN_X1)) 
000868  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
00086c  f0100f40          TST      r0,#0x40
000870  d005              BEQ      |L8.2174|
000872  7c20              LDRB     r0,[r4,#0x10]  ; last_joypad_state
000874  f0100f40          TST      r0,#0x40
;;;338          toggleIMUControl();
000878  bf08              IT       EQ
00087a  f7fffffe          BLEQ     toggleIMUControl
                  |L8.2174|
;;;339    
;;;340        if (btn_clicked(BTN_X3)) {
00087e  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
000882  f4107f80          TST      r0,#0x100
000886  d00e              BEQ      |L8.2214|
000888  8a20              LDRH     r0,[r4,#0x10]  ; last_joypad_state
00088a  f4107f80          TST      r0,#0x100
00088e  d10a              BNE      |L8.2214|
;;;341          GAME_SELECT++;
;;;342          GAME_SELECT %= 3;
000890  68e0              LDR      r0,[r4,#0xc]  ; GAME_SELECT
000892  4944              LDR      r1,|L8.2468|
000894  1c40              ADDS     r0,r0,#1
000896  fb812100          SMULL    r2,r1,r1,r0
00089a  eba171e1          SUB      r1,r1,r1,ASR #31
00089e  eba10181          SUB      r1,r1,r1,LSL #2
0008a2  4408              ADD      r0,r0,r1
0008a4  60e0              STR      r0,[r4,#0xc]  ; GAME_SELECT
                  |L8.2214|
;;;343        }
;;;344        if (btn_clicked(BTN_X4)) {
0008a6  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0008aa  f4107f00          TST      r0,#0x200
0008ae  d003              BEQ      |L8.2232|
0008b0  8a20              LDRH     r0,[r4,#0x10]  ; last_joypad_state
0008b2  f4107f00          TST      r0,#0x200
0008b6  d003              BEQ      |L8.2240|
                  |L8.2232|
;;;345          nes_init(rom_select(GAME_SELECT));
;;;346    
;;;347          while (1) {
;;;348            if ((get_ticks() - last_bright) > 50) {
;;;349              if (btn_pressed(BTN_X2)) TIM13->CCR1+= 3;
;;;350              TIM13->CCR1 %= 100;
;;;351              last_bright = get_ticks();
;;;352            }
;;;353            if (TIM6->SR & TIM_SR_UIF) {
;;;354              IMU_dataAvailable();
;;;355              joypad_update();
;;;356    
;;;357              TIM6->SR = 0;
;;;358              nes_frame(0);
;;;359              // gpio_toggle(LED1);
;;;360              nes_frame(1);
;;;361              // gpio_toggle(LED1);
;;;362              if (btn_clicked(BTN_X3)) cpu_reset();
;;;363              gpio_set(LED2);
;;;364            } else {
;;;365              gpio_reset(LED2);
;;;366            }
;;;367          }
;;;368        }
;;;369        last_joypad_state = joypad_state;
0008b8  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0008bc  6120              STR      r0,[r4,#0x10]         ;231  ; last_joypad_state
0008be  e4cf              B        |L8.608|
                  |L8.2240|
0008c0  68e0              LDR      r0,[r4,#0xc]          ;345  ; GAME_SELECT
0008c2  f7fffffe          BL       rom_select
0008c6  f7fffffe          BL       nes_init
0008ca  4d34              LDR      r5,|L8.2460|
0008cc  4e36              LDR      r6,|L8.2472|
0008ce  f8df80c8          LDR      r8,|L8.2456|
0008d2  f8dfb0d8          LDR      r11,|L8.2476|
0008d6  2700              MOVS     r7,#0                 ;196
0008d8  f04f4a80          MOV      r10,#0x40000000       ;365
                  |L8.2268|
0008dc  6860              LDR      r0,[r4,#4]            ;348  ; __ticks
0008de  69a1              LDR      r1,[r4,#0x18]         ;348  ; last_bright
0008e0  1a40              SUBS     r0,r0,r1              ;348
0008e2  2832              CMP      r0,#0x32              ;348
0008e4  d914              BLS      |L8.2320|
0008e6  f8d90000          LDR      r0,[r9,#0]            ;349  ; joypad_state
0008ea  f0100f80          TST      r0,#0x80              ;349
0008ee  d002              BEQ      |L8.2294|
0008f0  6828              LDR      r0,[r5,#0]            ;349
0008f2  1cc0              ADDS     r0,r0,#3              ;349
0008f4  6028              STR      r0,[r5,#0]            ;349
                  |L8.2294|
0008f6  6828              LDR      r0,[r5,#0]            ;350
0008f8  4929              LDR      r1,|L8.2464|
0008fa  fba12100          UMULL    r2,r1,r1,r0           ;350
0008fe  0949              LSRS     r1,r1,#5              ;350
000900  f06f0218          MVN      r2,#0x18              ;350
000904  4351              MULS     r1,r2,r1              ;350
000906  eb000081          ADD      r0,r0,r1,LSL #2       ;350
00090a  6028              STR      r0,[r5,#0]            ;350
00090c  6860              LDR      r0,[r4,#4]            ;351  ; __ticks
00090e  61a0              STR      r0,[r4,#0x18]         ;351  ; last_bright
                  |L8.2320|
000910  6930              LDR      r0,[r6,#0x10]         ;353
000912  f0100f01          TST      r0,#1                 ;353
000916  bf08              IT       EQ                    ;365
000918  f8cba000          STREQ    r10,[r11,#0]          ;365
00091c  d0de              BEQ      |L8.2268|
00091e  f7fffffe          BL       IMU_dataAvailable
000922  f7fffffe          BL       joypad_update
000926  6137              STR      r7,[r6,#0x10]         ;357
000928  2000              MOVS     r0,#0                 ;358
00092a  f7fffffe          BL       nes_frame
00092e  2001              MOVS     r0,#1                 ;360
000930  f7fffffe          BL       nes_frame
000934  f8d90000          LDR      r0,[r9,#0]            ;362  ; joypad_state
000938  f4107f80          TST      r0,#0x100             ;362
00093c  d005              BEQ      |L8.2378|
00093e  8a20              LDRH     r0,[r4,#0x10]         ;362  ; last_joypad_state
000940  f4107f80          TST      r0,#0x100             ;362
000944  bf08              IT       EQ                    ;362
000946  f7fffffe          BLEQ     cpu_reset
                  |L8.2378|
00094a  f44f4080          MOV      r0,#0x4000            ;363
00094e  f8c80018          STR      r0,[r8,#0x18]         ;363
000952  e7c3              B        |L8.2268|
;;;370        /* USER CODE END WHILE */
;;;371    
;;;372        /* USER CODE BEGIN 3 */
;;;373      }
;;;374      /* USER CODE END 3 */
;;;375    }
;;;376    
                          ENDP

                  |L8.2388|
                          DCD      joypad_state
                  |L8.2392|
                          DCD      joypad_A
                  |L8.2396|
                          DCD      joypad_B
                  |L8.2400|
                          DCD      joypad_U
                  |L8.2404|
                          DCD      joypad_D
                  |L8.2408|
                          DCD      joypad_L
                  |L8.2412|
                          DCD      joypad_R
                  |L8.2416|
                          DCD      joypad_SEL
                  |L8.2420|
                          DCD      joypad_START
                  |L8.2424|
000978  7b53454c          DCB      "{SEL}",0
00097c  7d00    
00097e  00                DCB      0
00097f  00                DCB      0
                  |L8.2432|
000980  7b535452          DCB      "{STRT}",0
000984  547d00  
000987  00                DCB      0
                  |L8.2440|
                          DCD      ||.conststring||
                  |L8.2444|
00098c  5b00              DCB      "[",0
00098e  00                DCB      0
00098f  00                DCB      0
                  |L8.2448|
000990  2573494d          DCB      "%sIMU]",0
000994  555d00  
000997  00                DCB      0
                  |L8.2456|
                          DCD      0x40020c00
                  |L8.2460|
                          DCD      0x40001c34
                  |L8.2464|
                          DCD      0x51eb851f
                  |L8.2468|
                          DCD      0x55555556
                  |L8.2472|
                          DCD      0x40001000
                  |L8.2476|
                          DCD      0x40020c18

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  joypad_assignments
                          %        24

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  205f5f20          DCB      " __    __  ________   ______   \n/  \\  /  |/        | "
000004  2020205f
000008  5f20205f
00000c  5f5f5f5f
000010  5f5f5f20
000014  20205f5f
000018  5f5f5f5f
00001c  2020200a
000020  2f20205c
000024  20202f20
000028  207c2f20
00002c  20202020
000030  2020207c
000034  20      
000035  2f202020          DCB      "/      \\ \n[$$$$]  \\ [$$$$] |[$$$$$$$$$$$$$$$$]/ /[$$"
000039  2020205c
00003d  200a5b24
000041  245d2020
000045  5c205b24
000049  245d207c
00004d  5b242424
000051  24242424
000055  245d2f20
000059  2f5b24  
00005c  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$$$]  \\[$$$$] |[$$$$] |__    [$$$$"
000060  245d2020
000064  7c0a5b24
000068  24245d20
00006c  205c5b24
000070  245d207c
000074  5b24245d
000078  207c5f5f
00007c  20202020
000080  5b2424  
000083  5d205c5f          DCB      "] \\__[$$$$]/ \n[$$$$$$$$]  [$$$$] |[$$$$]    |   [$$$$"
000087  5f5b2424
00008b  5d2f200a
00008f  5b242424
000093  245d2020
000097  5b24245d
00009b  207c5b24
00009f  245d2020
0000a3  20207c20
0000a7  20205b24
0000ab  24      
0000ac  5d202020          DCB      "]      \\ \n[$$$$] [$$$$] [$$$$] |[$$$$$$$$$$]/     [$$"
0000b0  2020205c
0000b4  200a5b24
0000b8  245d205b
0000bc  24245d20
0000c0  5b24245d
0000c4  207c5b24
0000c8  24242424
0000cc  5d2f2020
0000d0  2020205b
0000d4  24      
0000d5  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$] |[$$$$$$$$] |[$$$$] |_____ /  \\"
0000d9  245d2020
0000dd  7c0a5b24
0000e1  245d207c
0000e5  5b242424
0000e9  245d207c
0000ed  5b24245d
0000f1  207c5f5f
0000f5  5f5f5f20
0000f9  2f20205c
0000fd  5f5f5b24          DCB      "__[$$$$] |\n[$$$$] | [$$$$$$] |[$$$$]       |[$$$$]    "
000101  245d207c
000105  0a5b2424
000109  5d207c20
00010d  5b242424
000111  5d207c5b
000115  24245d20
000119  20202020
00011d  20207c5b
000121  24245d20
000125  202020  
000128  5b24245d          DCB      "[$$$$]/ \n[$$$$]/   [$$$$]/ [$$$$$$$$$$$$$$$$]/  [$$$$$$"
00012c  2f200a5b
000130  24245d2f
000134  2020205b
000138  24245d2f
00013c  205b2424
000140  24242424
000144  24245d2f
000148  20205b24
00014c  2424    
00014e  2424245d          DCB      "$$$$$$]/  ",0
000152  2f202000

                          AREA ||.data||, DATA, ALIGN=2

                  assignable_buttons
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                          DCD      0x00008000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00010000
                          DCD      0x00020000
                          DCD      0x00040000
                          DCD      0x00080000
                          DCD      0x00100000
                          DCD      0x00200000
                          DCD      0x00400000
                          DCD      0x00800000

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  __tickf
000000  01000000          DCB      0x01,0x00,0x00,0x00
                  __ticks
                          DCD      0x00000000
                  __delay
                          DCD      0x00000000
                  GAME_SELECT
                          DCD      0x00000000
                  last_joypad_state
                          DCD      0x00000000
                  last_blink
                          DCD      0x00000000
                  last_bright
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_e9093bf9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____REVSH|
#line 402
|__asm___6_main_c_e9093bf9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____RRX|
#line 587
|__asm___6_main_c_e9093bf9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
