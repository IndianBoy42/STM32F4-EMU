; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_hal_pwr.o --depend=stm32nes\stm32f4xx_hal_pwr.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_hal_pwr.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;267      */
;;;268    void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  4923              LDR      r1,|L1.144|
;;;269    {
000002  b410              PUSH     {r4}
;;;270      /* Check the parameters */
;;;271      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;272      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;273      
;;;274      /* Set PLS[7:5] bits according to PVDLevel value */
;;;275      MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
000004  680a              LDR      r2,[r1,#0]
000006  6803              LDR      r3,[r0,#0]
000008  f02202e0          BIC      r2,r2,#0xe0
00000c  431a              ORRS     r2,r2,r3
00000e  600a              STR      r2,[r1,#0]
;;;276      
;;;277      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;278      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  f8dfc080          LDR      r12,|L1.148|
000014  f8dc1000          LDR      r1,[r12,#0]
000018  f4213180          BIC      r1,r1,#0x10000
00001c  f8cc1000          STR      r1,[r12,#0]
;;;279      __HAL_PWR_PVD_EXTI_DISABLE_IT();
000020  f1ac0304          SUB      r3,r12,#4
000024  6819              LDR      r1,[r3,#0]
000026  f4213180          BIC      r1,r1,#0x10000
00002a  6019              STR      r1,[r3,#0]
;;;280      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
00002c  f10c0104          ADD      r1,r12,#4
000030  680a              LDR      r2,[r1,#0]
000032  f4223280          BIC      r2,r2,#0x10000
000036  600a              STR      r2,[r1,#0]
;;;281      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
000038  1d0a              ADDS     r2,r1,#4
00003a  6814              LDR      r4,[r2,#0]
00003c  f4243480          BIC      r4,r4,#0x10000
000040  6014              STR      r4,[r2,#0]
;;;282    
;;;283      /* Configure interrupt mode */
;;;284      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
000042  6844              LDR      r4,[r0,#4]
000044  f4143f80          TST      r4,#0x10000
000048  d003              BEQ      |L1.82|
;;;285      {
;;;286        __HAL_PWR_PVD_EXTI_ENABLE_IT();
00004a  681c              LDR      r4,[r3,#0]
00004c  f4443480          ORR      r4,r4,#0x10000
000050  601c              STR      r4,[r3,#0]
                  |L1.82|
;;;287      }
;;;288      
;;;289      /* Configure event mode */
;;;290      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000052  6843              LDR      r3,[r0,#4]
000054  f4133f00          TST      r3,#0x20000
000058  d005              BEQ      |L1.102|
;;;291      {
;;;292        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00005a  f8dc3000          LDR      r3,[r12,#0]
00005e  f4433380          ORR      r3,r3,#0x10000
000062  f8cc3000          STR      r3,[r12,#0]
                  |L1.102|
;;;293      }
;;;294      
;;;295      /* Configure the edge */
;;;296      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000066  7903              LDRB     r3,[r0,#4]
000068  f0130f01          TST      r3,#1
00006c  d003              BEQ      |L1.118|
;;;297      {
;;;298        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
00006e  680b              LDR      r3,[r1,#0]
000070  f4433380          ORR      r3,r3,#0x10000
000074  600b              STR      r3,[r1,#0]
                  |L1.118|
;;;299      }
;;;300      
;;;301      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000076  7900              LDRB     r0,[r0,#4]
000078  f0100f02          TST      r0,#2
;;;302      {
;;;303        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
;;;304      }
;;;305    }
00007c  bf04              ITT      EQ
00007e  bc10              POPEQ    {r4}
000080  4770              BXEQ     lr
000082  6810              LDR      r0,[r2,#0]            ;303
000084  f4403080          ORR      r0,r0,#0x10000        ;303
000088  6010              STR      r0,[r2,#0]            ;303
00008a  bc10              POP      {r4}
00008c  4770              BX       lr
;;;306    
                          ENDP

00008e  0000              DCW      0x0000
                  |L1.144|
                          DCD      0x40007000
                  |L1.148|
                          DCD      0x40013c04

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;107      */
;;;108    void HAL_PWR_DeInit(void)
000000  4804              LDR      r0,|L2.20|
;;;109    {
;;;110      __HAL_RCC_PWR_FORCE_RESET();
000002  6801              LDR      r1,[r0,#0]
000004  f0415180          ORR      r1,r1,#0x10000000
000008  6001              STR      r1,[r0,#0]
;;;111      __HAL_RCC_PWR_RELEASE_RESET();
00000a  6801              LDR      r1,[r0,#0]
00000c  f0215180          BIC      r1,r1,#0x10000000
000010  6001              STR      r1,[r0,#0]
;;;112    }
000012  4770              BX       lr
;;;113    
                          ENDP

                  |L2.20|
                          DCD      0x40023820

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;132      */
;;;133    void HAL_PWR_DisableBkUpAccess(void)
000000  4901              LDR      r1,|L3.8|
;;;134    {
;;;135      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6208              STR      r0,[r1,#0x20]
;;;136    }
000006  4770              BX       lr
;;;137    
                          ENDP

                  |L3.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;319      */
;;;320    void HAL_PWR_DisablePVD(void)
000000  4901              LDR      r1,|L4.8|
;;;321    {
;;;322      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;323    }
000006  4770              BX       lr
;;;324    
                          ENDP

                  |L4.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;551      */
;;;552    void HAL_PWR_DisableSEVOnPend(void)
000000  4802              LDR      r0,|L5.12|
;;;553    {
;;;554      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;555      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;556    }
00000a  4770              BX       lr
;;;557    
                          ENDP

                  |L5.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;527      */
;;;528    void HAL_PWR_DisableSleepOnExit(void)
000000  4802              LDR      r0,|L6.12|
;;;529    {
;;;530      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;531      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210102          BIC      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;532    }
00000a  4770              BX       lr
;;;533    
                          ENDP

                  |L6.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;351      */
;;;352    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L7.12|
;;;353    {
;;;354      /* Check the parameter */
;;;355      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
;;;356    
;;;357      /* Disable the wake up pin */
;;;358      CLEAR_BIT(PWR->CSR, WakeUpPinx);
000002  684a              LDR      r2,[r1,#4]
000004  ea220000          BIC      r0,r2,r0
000008  6048              STR      r0,[r1,#4]
;;;359    }
00000a  4770              BX       lr
;;;360      
                          ENDP

                  |L7.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;120      */
;;;121    void HAL_PWR_EnableBkUpAccess(void)
000000  4901              LDR      r1,|L8.8|
;;;122    {
;;;123      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6208              STR      r0,[r1,#0x20]
;;;124    }
000006  4770              BX       lr
;;;125    
                          ENDP

                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;310      */
;;;311    void HAL_PWR_EnablePVD(void)
000000  4901              LDR      r1,|L9.8|
;;;312    {
;;;313      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6108              STR      r0,[r1,#0x10]
;;;314    }
000006  4770              BX       lr
;;;315    
                          ENDP

                  |L9.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;539      */
;;;540    void HAL_PWR_EnableSEVOnPend(void)
000000  4802              LDR      r0,|L10.12|
;;;541    {
;;;542      /* Set SEVONPEND bit of Cortex System Control Register */
;;;543      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;544    }
00000a  4770              BX       lr
;;;545    
                          ENDP

                  |L10.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;515      */
;;;516    void HAL_PWR_EnableSleepOnExit(void)
000000  4802              LDR      r0,|L11.12|
;;;517    {
;;;518      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;519      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;520    }
00000a  4770              BX       lr
;;;521    
                          ENDP

                  |L11.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;333      */
;;;334    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L12.12|
;;;335    {
;;;336      /* Check the parameter */
;;;337      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;338    
;;;339      /* Enable the wake up pin */
;;;340      SET_BIT(PWR->CSR, WakeUpPinx);
000002  684a              LDR      r2,[r1,#4]
000004  4310              ORRS     r0,r0,r2
000006  6048              STR      r0,[r1,#4]
;;;341    }
000008  4770              BX       lr
;;;342    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;380      */
;;;381    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4806              LDR      r0,|L13.28|
;;;382    {
;;;383      /* Check the parameters */
;;;384      assert_param(IS_PWR_REGULATOR(Regulator));
;;;385      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;386    
;;;387      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;388      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000002  6802              LDR      r2,[r0,#0]
000004  f0220204          BIC      r2,r2,#4
000008  6002              STR      r2,[r0,#0]
;;;389    
;;;390      /* Select SLEEP mode entry -------------------------------------------------*/
;;;391      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000a  2901              CMP      r1,#1
;;;392      {   
;;;393        /* Request Wait For Interrupt */
;;;394        __WFI();
00000c  bf04              ITT      EQ
00000e  bf30              WFIEQ    
;;;395      }
;;;396      else
;;;397      {
;;;398        /* Request Wait For Event */
;;;399        __SEV();
;;;400        __WFE();
;;;401        __WFE();
;;;402      }
;;;403    }
000010  4770              BXEQ     lr
000012  bf40              SEV                            ;399
000014  bf20              WFE                            ;400
000016  bf20              WFE                            ;401
000018  4770              BX       lr
;;;404    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;462      */
;;;463    void HAL_PWR_EnterSTANDBYMode(void)
000000  4805              LDR      r0,|L14.24|
;;;464    {
;;;465      /* Select Standby mode */
;;;466      SET_BIT(PWR->CR, PWR_CR_PDDS);
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;467    
;;;468      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;469      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000a  4804              LDR      r0,|L14.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410104          ORR      r1,r1,#4
000012  6001              STR      r1,[r0,#0]
;;;470      
;;;471      /* This option is used to ensure that store operations are completed */
;;;472    #if defined ( __CC_ARM)
;;;473      __force_stores();
;;;474    #endif
;;;475      /* Request Wait For Interrupt */
;;;476      __WFI();
000014  bf30              WFI      
;;;477    }
000016  4770              BX       lr
;;;478    
                          ENDP

                  |L14.24|
                          DCD      0x40007000
                  |L14.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;423      */
;;;424    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  4a0a              LDR      r2,|L15.44|
;;;425    {
;;;426      /* Check the parameters */
;;;427      assert_param(IS_PWR_REGULATOR(Regulator));
;;;428      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;429      
;;;430      /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
;;;431      MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
000002  6813              LDR      r3,[r2,#0]
000004  f0230303          BIC      r3,r3,#3
000008  4318              ORRS     r0,r0,r3
00000a  6010              STR      r0,[r2,#0]
;;;432      
;;;433      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;434      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000c  4808              LDR      r0,|L15.48|
00000e  6802              LDR      r2,[r0,#0]
000010  f0420204          ORR      r2,r2,#4
000014  6002              STR      r2,[r0,#0]
;;;435      
;;;436      /* Select Stop mode entry --------------------------------------------------*/
;;;437      if(STOPEntry == PWR_STOPENTRY_WFI)
000016  2901              CMP      r1,#1
;;;438      {   
;;;439        /* Request Wait For Interrupt */
;;;440        __WFI();
000018  bf0f              ITEEE    EQ
00001a  bf30              WFIEQ    
;;;441      }
;;;442      else
;;;443      {
;;;444        /* Request Wait For Event */
;;;445        __SEV();
00001c  bf40              SEVNE    
;;;446        __WFE();
00001e  bf20              WFENE    
;;;447        __WFE();
000020  bf20              WFENE    
;;;448      }
;;;449      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;450      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
000022  6801              LDR      r1,[r0,#0]
000024  f0210104          BIC      r1,r1,#4
000028  6001              STR      r1,[r0,#0]
;;;451    }
00002a  4770              BX       lr
;;;452    
                          ENDP

                  |L15.44|
                          DCD      0x40007000
                  |L15.48|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;500      */
;;;501    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;502    {
;;;503      /* NOTE : This function Should not be modified, when the callback is needed,
;;;504                the HAL_PWR_PVDCallback could be implemented in the user file
;;;505       */ 
;;;506    }
;;;507    
                          ENDP


                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;483      */
;;;484    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;485    {
;;;486      /* Check PWR Exti flag */
;;;487      if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
000002  4c06              LDR      r4,|L17.28|
000004  6820              LDR      r0,[r4,#0]
000006  f4103f80          TST      r0,#0x10000
;;;488      {
;;;489        /* PWR PVD interrupt user callback */
;;;490        HAL_PWR_PVDCallback();
;;;491        
;;;492        /* Clear PWR Exti pending bit */
;;;493        __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
;;;494      }
;;;495    }
00000a  bf08              IT       EQ
00000c  bd10              POPEQ    {r4,pc}
00000e  f7fffffe          BL       HAL_PWR_PVDCallback
000012  f44f3080          MOV      r0,#0x10000           ;493
000016  6020              STR      r0,[r4,#0]            ;493
000018  bd10              POP      {r4,pc}
;;;496    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      0x40013c14

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____RRX|
#line 587
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
