; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_hal_flash_ex.o --depend=stm32nes\stm32f4xx_hal_flash_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_hal_flash_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_Erase_Sector||, CODE, READONLY, ALIGN=2

                  FLASH_Erase_Sector PROC
;;;997      */
;;;998    void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
000000  2200              MOVS     r2,#0
;;;999    {
000002  b151              CBZ      r1,|L1.26|
;;;1000     uint32_t tmp_psize = 0U;
;;;1001   
;;;1002     /* Check the parameters */
;;;1003     assert_param(IS_FLASH_SECTOR(Sector));
;;;1004     assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;1005     
;;;1006     if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
;;;1007     {
;;;1008        tmp_psize = FLASH_PSIZE_BYTE;
;;;1009     }
;;;1010     else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
000004  2901              CMP      r1,#1
;;;1011     {
;;;1012       tmp_psize = FLASH_PSIZE_HALF_WORD;
000006  bf08              IT       EQ
000008  f44f7280          MOVEQ    r2,#0x100
00000c  d005              BEQ      |L1.26|
;;;1013     }
;;;1014     else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
00000e  2902              CMP      r1,#2
;;;1015     {
;;;1016       tmp_psize = FLASH_PSIZE_WORD;
000010  bf0c              ITE      EQ
000012  f44f7200          MOVEQ    r2,#0x200
;;;1017     }
;;;1018     else
;;;1019     {
;;;1020       tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000016  f44f7240          MOVNE    r2,#0x300
                  |L1.26|
;;;1021     }
;;;1022   
;;;1023     /* If the previous operation is completed, proceed to erase the sector */
;;;1024     CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
00001a  490b              LDR      r1,|L1.72|
00001c  680b              LDR      r3,[r1,#0]
00001e  f4237340          BIC      r3,r3,#0x300
000022  600b              STR      r3,[r1,#0]
;;;1025     FLASH->CR |= tmp_psize;
000024  680b              LDR      r3,[r1,#0]
000026  431a              ORRS     r2,r2,r3
000028  600a              STR      r2,[r1,#0]
;;;1026     CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
00002a  680a              LDR      r2,[r1,#0]
00002c  f02202f8          BIC      r2,r2,#0xf8
000030  600a              STR      r2,[r1,#0]
;;;1027     FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
000032  680a              LDR      r2,[r1,#0]
000034  2302              MOVS     r3,#2
000036  ea4300c0          ORR      r0,r3,r0,LSL #3
00003a  4310              ORRS     r0,r0,r2
00003c  6008              STR      r0,[r1,#0]
;;;1028     FLASH->CR |= FLASH_CR_STRT;
00003e  6808              LDR      r0,[r1,#0]
000040  f4403080          ORR      r0,r0,#0x10000
000044  6008              STR      r0,[r1,#0]
;;;1029   }
000046  4770              BX       lr
;;;1030   
                          ENDP

                  |L1.72|
                          DCD      0x40023c10

                          AREA ||i.FLASH_FlushCaches||, CODE, READONLY, ALIGN=2

                  FLASH_FlushCaches PROC
;;;1326     */
;;;1327   void FLASH_FlushCaches(void)
000000  4815              LDR      r0,|L2.88|
;;;1328   {
;;;1329     /* Flush instruction cache  */
;;;1330     if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
000002  6801              LDR      r1,[r0,#0]
000004  f4117f00          TST      r1,#0x200
000008  d00f              BEQ      |L2.42|
;;;1331     {
;;;1332       /* Disable instruction cache  */
;;;1333       __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
00000a  6801              LDR      r1,[r0,#0]
00000c  f4217100          BIC      r1,r1,#0x200
000010  6001              STR      r1,[r0,#0]
;;;1334       /* Reset instruction cache */
;;;1335       __HAL_FLASH_INSTRUCTION_CACHE_RESET();
000012  6801              LDR      r1,[r0,#0]
000014  f4416100          ORR      r1,r1,#0x800
000018  6001              STR      r1,[r0,#0]
00001a  6801              LDR      r1,[r0,#0]
00001c  f4216100          BIC      r1,r1,#0x800
000020  6001              STR      r1,[r0,#0]
;;;1336       /* Enable instruction cache */
;;;1337       __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
000022  6801              LDR      r1,[r0,#0]
000024  f4417100          ORR      r1,r1,#0x200
000028  6001              STR      r1,[r0,#0]
                  |L2.42|
;;;1338     }
;;;1339     
;;;1340     /* Flush data cache */
;;;1341     if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
00002a  6801              LDR      r1,[r0,#0]
00002c  f4116f80          TST      r1,#0x400
;;;1342     {
;;;1343       /* Disable data cache  */
;;;1344       __HAL_FLASH_DATA_CACHE_DISABLE();
;;;1345       /* Reset data cache */
;;;1346       __HAL_FLASH_DATA_CACHE_RESET();
;;;1347       /* Enable data cache */
;;;1348       __HAL_FLASH_DATA_CACHE_ENABLE();
;;;1349     }
;;;1350   }
000030  bf08              IT       EQ
000032  4770              BXEQ     lr
000034  6801              LDR      r1,[r0,#0]            ;1344
000036  f4216180          BIC      r1,r1,#0x400          ;1344
00003a  6001              STR      r1,[r0,#0]            ;1344
00003c  6801              LDR      r1,[r0,#0]            ;1346
00003e  f4415180          ORR      r1,r1,#0x1000         ;1346
000042  6001              STR      r1,[r0,#0]            ;1346
000044  6801              LDR      r1,[r0,#0]            ;1346
000046  f4215180          BIC      r1,r1,#0x1000         ;1346
00004a  6001              STR      r1,[r0,#0]            ;1346
00004c  6801              LDR      r1,[r0,#0]            ;1348
00004e  f4416180          ORR      r1,r1,#0x400          ;1348
000052  6001              STR      r1,[r0,#0]            ;1348
000054  4770              BX       lr
;;;1351   
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      0x40023c00

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;177      */
;;;178    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;179    {
;;;180      HAL_StatusTypeDef status = HAL_ERROR;
;;;181      uint32_t index = 0U;
;;;182      
;;;183      /* Process Locked */
;;;184      __HAL_LOCK(&pFlash);
000004  4f4f              LDR      r7,|L3.324|
000006  4606              MOV      r6,r0                 ;179
000008  4688              MOV      r8,r1                 ;179
00000a  7e38              LDRB     r0,[r7,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  bf04              ITT      EQ
000010  2002              MOVEQ    r0,#2
;;;185    
;;;186      /* Check the parameters */
;;;187      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;188    
;;;189      /* Wait for last operation to be completed */
;;;190      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;191    
;;;192      if(status == HAL_OK)
;;;193      {
;;;194        /*Initialization of SectorError variable*/
;;;195        *SectorError = 0xFFFFFFFFU;
;;;196        
;;;197        if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;198        {
;;;199          /*Mass erase to be done*/
;;;200          FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
;;;201    
;;;202          /* Wait for last operation to be completed */
;;;203          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;204          
;;;205          /* if the erase operation is completed, disable the MER Bit */
;;;206          FLASH->CR &= (~FLASH_MER_BIT);
;;;207        }
;;;208        else
;;;209        {
;;;210          /* Check the parameters */
;;;211          assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
;;;212    
;;;213          /* Erase by sector by sector to be done*/
;;;214          for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
;;;215          {
;;;216            FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
;;;217    
;;;218            /* Wait for last operation to be completed */
;;;219            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;220            
;;;221            /* If the erase operation is completed, disable the SER and SNB Bits */
;;;222            CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
;;;223    
;;;224            if(status != HAL_OK) 
;;;225            {
;;;226              /* In case of error, stop erase procedure and return the faulty sector*/
;;;227              *SectorError = index;
;;;228              break;
;;;229            }
;;;230          }
;;;231        }
;;;232        /* Flush the caches to be sure of the data consistency */
;;;233        FLASH_FlushCaches();    
;;;234      }
;;;235    
;;;236      /* Process Unlocked */
;;;237      __HAL_UNLOCK(&pFlash);
;;;238    
;;;239      return status;
;;;240    }
000012  e8bd87f0          POPEQ    {r4-r10,pc}
000016  2001              MOVS     r0,#1                 ;184
000018  7638              STRB     r0,[r7,#0x18]         ;184
00001a  f24c3050          MOV      r0,#0xc350            ;190
00001e  f7fffffe          BL       FLASH_WaitForLastOperation
000022  2800              CMP      r0,#0                 ;192
000024  d17d              BNE      |L3.290|
000026  1e41              SUBS     r1,r0,#1              ;195
000028  f8c81000          STR      r1,[r8,#0]            ;197
00002c  6831              LDR      r1,[r6,#0]            ;197
00002e  4c46              LDR      r4,|L3.328|
000030  2901              CMP      r1,#1                 ;197
000032  d038              BEQ      |L3.166|
000034  e9d65102          LDRD     r5,r1,[r6,#8]         ;197
000038  4429              ADD      r1,r1,r5              ;214
00003a  42a9              CMP      r1,r5                 ;214
00003c  bf88              IT       HI                    ;184
00003e  f04f0902          MOVHI    r9,#2                 ;184
000042  d94f              BLS      |L3.228|
                  |L3.68|
000044  7c30              LDRB     r0,[r6,#0x10]         ;216
000046  f01001ff          ANDS     r1,r0,#0xff           ;216
00004a  f04f0000          MOV      r0,#0                 ;216
00004e  d00a              BEQ      |L3.102|
000050  2901              CMP      r1,#1                 ;216
000052  bf08              IT       EQ                    ;216
000054  f44f7080          MOVEQ    r0,#0x100             ;216
000058  d005              BEQ      |L3.102|
00005a  2902              CMP      r1,#2                 ;216
00005c  bf0c              ITE      EQ                    ;216
00005e  f44f7000          MOVEQ    r0,#0x200             ;216
000062  f44f7040          MOVNE    r0,#0x300             ;216
                  |L3.102|
000066  6821              LDR      r1,[r4,#0]            ;216
000068  f4217140          BIC      r1,r1,#0x300          ;216
00006c  6021              STR      r1,[r4,#0]            ;216
00006e  6821              LDR      r1,[r4,#0]            ;216
000070  4308              ORRS     r0,r0,r1              ;216
000072  6020              STR      r0,[r4,#0]            ;216
000074  6820              LDR      r0,[r4,#0]            ;216
000076  f02000f8          BIC      r0,r0,#0xf8           ;216
00007a  6020              STR      r0,[r4,#0]            ;216
00007c  6821              LDR      r1,[r4,#0]            ;216
00007e  ea4900c5          ORR      r0,r9,r5,LSL #3       ;216
000082  4308              ORRS     r0,r0,r1              ;216
000084  6020              STR      r0,[r4,#0]            ;216
000086  6820              LDR      r0,[r4,#0]            ;216
000088  f4403080          ORR      r0,r0,#0x10000        ;216
00008c  6020              STR      r0,[r4,#0]            ;216
00008e  f24c3050          MOV      r0,#0xc350            ;219
000092  f7fffffe          BL       FLASH_WaitForLastOperation
000096  6821              LDR      r1,[r4,#0]            ;222
000098  f02101fa          BIC      r1,r1,#0xfa           ;222
00009c  6021              STR      r1,[r4,#0]            ;222
00009e  b1d8              CBZ      r0,|L3.216|
0000a0  f8c85000          STR      r5,[r8,#0]            ;228
0000a4  e01e              B        |L3.228|
                  |L3.166|
0000a6  7c30              LDRB     r0,[r6,#0x10]         ;200
0000a8  6821              LDR      r1,[r4,#0]            ;200
0000aa  f4217140          BIC      r1,r1,#0x300          ;200
0000ae  6021              STR      r1,[r4,#0]            ;200
0000b0  6821              LDR      r1,[r4,#0]            ;200
0000b2  f0410104          ORR      r1,r1,#4              ;200
0000b6  6021              STR      r1,[r4,#0]            ;200
0000b8  6821              LDR      r1,[r4,#0]            ;200
0000ba  f44f3280          MOV      r2,#0x10000           ;200
0000be  ea422000          ORR      r0,r2,r0,LSL #8       ;200
0000c2  4308              ORRS     r0,r0,r1              ;200
0000c4  6020              STR      r0,[r4,#0]            ;200
0000c6  f24c3050          MOV      r0,#0xc350            ;203
0000ca  f7fffffe          BL       FLASH_WaitForLastOperation
0000ce  6821              LDR      r1,[r4,#0]            ;206
0000d0  f0210104          BIC      r1,r1,#4              ;206
0000d4  6021              STR      r1,[r4,#0]            ;206
0000d6  e005              B        |L3.228|
                  |L3.216|
0000d8  e9d62102          LDRD     r2,r1,[r6,#8]         ;206
0000dc  4411              ADD      r1,r1,r2              ;228
0000de  1c6d              ADDS     r5,r5,#1              ;228
0000e0  42a9              CMP      r1,r5                 ;228
0000e2  d8af              BHI      |L3.68|
                  |L3.228|
0000e4  4919              LDR      r1,|L3.332|
0000e6  680a              LDR      r2,[r1,#0]            ;228
0000e8  f4127f00          TST      r2,#0x200             ;228
0000ec  d00f              BEQ      |L3.270|
0000ee  680a              LDR      r2,[r1,#0]            ;228
0000f0  f4227200          BIC      r2,r2,#0x200          ;228
0000f4  600a              STR      r2,[r1,#0]            ;228
0000f6  680a              LDR      r2,[r1,#0]            ;228
0000f8  f4426200          ORR      r2,r2,#0x800          ;228
0000fc  600a              STR      r2,[r1,#0]            ;228
0000fe  680a              LDR      r2,[r1,#0]            ;228
000100  f4226200          BIC      r2,r2,#0x800          ;228
000104  600a              STR      r2,[r1,#0]            ;228
000106  680a              LDR      r2,[r1,#0]            ;228
000108  f4427200          ORR      r2,r2,#0x200          ;228
00010c  600a              STR      r2,[r1,#0]            ;228
                  |L3.270|
00010e  680a              LDR      r2,[r1,#0]            ;228
000110  f4126f80          TST      r2,#0x400             ;228
000114  d011              BEQ      |L3.314|
000116  680a              LDR      r2,[r1,#0]            ;228
000118  f4226280          BIC      r2,r2,#0x400          ;228
00011c  600a              STR      r2,[r1,#0]            ;228
00011e  680a              LDR      r2,[r1,#0]            ;228
000120  e000              B        |L3.292|
                  |L3.290|
000122  e00a              B        |L3.314|
                  |L3.292|
000124  f4425280          ORR      r2,r2,#0x1000         ;228
000128  600a              STR      r2,[r1,#0]            ;228
00012a  680a              LDR      r2,[r1,#0]            ;228
00012c  f4225280          BIC      r2,r2,#0x1000         ;228
000130  600a              STR      r2,[r1,#0]            ;228
000132  680a              LDR      r2,[r1,#0]            ;228
000134  f4426280          ORR      r2,r2,#0x400          ;228
000138  600a              STR      r2,[r1,#0]            ;228
                  |L3.314|
00013a  2100              MOVS     r1,#0                 ;237
00013c  7639              STRB     r1,[r7,#0x18]         ;237
00013e  e8bd87f0          POP      {r4-r10,pc}
;;;241    
                          ENDP

000142  0000              DCW      0x0000
                  |L3.324|
                          DCD      pFlash
                  |L3.328|
                          DCD      0x40023c10
                  |L3.332|
                          DCD      0x40023c00

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;248      */
;;;249    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  4a33              LDR      r2,|L4.208|
;;;250    {
;;;251      HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;252    
;;;253      /* Process Locked */
;;;254      __HAL_LOCK(&pFlash);
000004  7e11              LDRB     r1,[r2,#0x18]  ; pFlash
000006  2901              CMP      r1,#1
000008  bf04              ITT      EQ
00000a  2002              MOVEQ    r0,#2
;;;255    
;;;256      /* Check the parameters */
;;;257      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;258    
;;;259      /* Enable End of FLASH Operation interrupt */
;;;260      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
;;;261      
;;;262      /* Enable Error source interrupt */
;;;263      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
;;;264      
;;;265      /* Clear pending flags (if any) */  
;;;266      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
;;;267                             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
;;;268      
;;;269      if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;270      {
;;;271        /*Mass erase to be done*/
;;;272        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;273        pFlash.Bank = pEraseInit->Banks;
;;;274        FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
;;;275      }
;;;276      else
;;;277      {
;;;278        /* Erase by sector to be done*/
;;;279    
;;;280        /* Check the parameters */
;;;281        assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
;;;282    
;;;283        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
;;;284        pFlash.NbSectorsToErase = pEraseInit->NbSectors;
;;;285        pFlash.Sector = pEraseInit->Sector;
;;;286        pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
;;;287    
;;;288        /*Erase 1st sector and wait for IT*/
;;;289        FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
;;;290      }
;;;291    
;;;292      return status;
;;;293    }
00000c  4770              BXEQ     lr
00000e  b430              PUSH     {r4,r5}               ;250
000010  2401              MOVS     r4,#1                 ;254
000012  4930              LDR      r1,|L4.212|
000014  7614              STRB     r4,[r2,#0x18]         ;254
000016  f8d1c000          LDR      r12,[r1,#0]           ;260
00001a  f04c7c80          ORR      r12,r12,#0x1000000    ;260
00001e  f8c1c000          STR      r12,[r1,#0]           ;260
000022  f8d1c000          LDR      r12,[r1,#0]           ;263
000026  f04c7c00          ORR      r12,r12,#0x2000000    ;263
00002a  f8c1c000          STR      r12,[r1,#0]           ;263
00002e  1f0d              SUBS     r5,r1,#4              ;266
000030  f04f0cf3          MOV      r12,#0xf3             ;266
000034  f8c5c000          STR      r12,[r5,#0]           ;266
000038  6805              LDR      r5,[r0,#0]            ;269
00003a  f04f0c02          MOV      r12,#2                ;254
00003e  2d01              CMP      r5,#1                 ;269
000040  d02f              BEQ      |L4.162|
000042  7014              STRB     r4,[r2,#0]            ;283
000044  68c4              LDR      r4,[r0,#0xc]          ;284
000046  6054              STR      r4,[r2,#4]            ;284  ; pFlash
000048  6884              LDR      r4,[r0,#8]            ;285
00004a  60d4              STR      r4,[r2,#0xc]          ;285  ; pFlash
00004c  7c04              LDRB     r4,[r0,#0x10]         ;286
00004e  7214              STRB     r4,[r2,#8]            ;286
000050  6884              LDR      r4,[r0,#8]            ;289
000052  7c00              LDRB     r0,[r0,#0x10]         ;289
000054  f01002ff          ANDS     r2,r0,#0xff           ;289
000058  f04f0000          MOV      r0,#0                 ;289
00005c  d00a              BEQ      |L4.116|
00005e  2a01              CMP      r2,#1                 ;289
000060  bf08              IT       EQ                    ;289
000062  f44f7080          MOVEQ    r0,#0x100             ;289
000066  d005              BEQ      |L4.116|
000068  2a02              CMP      r2,#2                 ;289
00006a  bf0c              ITE      EQ                    ;289
00006c  f44f7000          MOVEQ    r0,#0x200             ;289
000070  f44f7040          MOVNE    r0,#0x300             ;289
                  |L4.116|
000074  680a              LDR      r2,[r1,#0]            ;289
000076  f4227240          BIC      r2,r2,#0x300          ;289
00007a  600a              STR      r2,[r1,#0]            ;289
00007c  680a              LDR      r2,[r1,#0]            ;289
00007e  4310              ORRS     r0,r0,r2              ;289
000080  6008              STR      r0,[r1,#0]            ;289
000082  6808              LDR      r0,[r1,#0]            ;289
000084  f02000f8          BIC      r0,r0,#0xf8           ;289
000088  6008              STR      r0,[r1,#0]            ;289
00008a  6808              LDR      r0,[r1,#0]            ;289
00008c  ea4c02c4          ORR      r2,r12,r4,LSL #3      ;289
000090  4310              ORRS     r0,r0,r2              ;289
000092  6008              STR      r0,[r1,#0]            ;289
000094  6808              LDR      r0,[r1,#0]            ;289
000096  f4403080          ORR      r0,r0,#0x10000        ;289
                  |L4.154|
00009a  6008              STR      r0,[r1,#0]            ;289
00009c  bc30              POP      {r4,r5}
00009e  4618              MOV      r0,r3                 ;292
0000a0  4770              BX       lr
                  |L4.162|
0000a2  f882c000          STRB     r12,[r2,#0]           ;272
0000a6  f8d0c004          LDR      r12,[r0,#4]           ;273
0000aa  f8c2c010          STR      r12,[r2,#0x10]        ;273  ; pFlash
0000ae  7c00              LDRB     r0,[r0,#0x10]         ;274
0000b0  680a              LDR      r2,[r1,#0]            ;274
0000b2  f4227240          BIC      r2,r2,#0x300          ;274
0000b6  600a              STR      r2,[r1,#0]            ;274
0000b8  680a              LDR      r2,[r1,#0]            ;274
0000ba  f0420204          ORR      r2,r2,#4              ;274
0000be  600a              STR      r2,[r1,#0]            ;274
0000c0  680a              LDR      r2,[r1,#0]            ;274
0000c2  f44f3c80          MOV      r12,#0x10000          ;274
0000c6  ea4c2000          ORR      r0,r12,r0,LSL #8      ;274
0000ca  4310              ORRS     r0,r0,r2              ;274
0000cc  e7e5              B        |L4.154|
;;;294    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L4.208|
                          DCD      pFlash
                  |L4.212|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetConfig PROC
;;;360      */
;;;361    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  210f              MOVS     r1,#0xf
000002  6001              STR      r1,[r0,#0]
000004  490c              LDR      r1,|L5.56|
000006  8809              LDRH     r1,[r1,#0]
000008  4a0c              LDR      r2,|L5.60|
00000a  6081              STR      r1,[r0,#8]
00000c  21aa              MOVS     r1,#0xaa
00000e  7813              LDRB     r3,[r2,#0]
000010  2bcc              CMP      r3,#0xcc
000012  bf08              IT       EQ
000014  21cc              MOVEQ    r1,#0xcc
;;;362    {
000016  d003              BEQ      |L5.32|
000018  7812              LDRB     r2,[r2,#0]
00001a  2a55              CMP      r2,#0x55
00001c  bf08              IT       EQ
00001e  2155              MOVEQ    r1,#0x55
                  |L5.32|
000020  6101              STR      r1,[r0,#0x10]
000022  4907              LDR      r1,|L5.64|
000024  680a              LDR      r2,[r1,#0]
000026  f00202e0          AND      r2,r2,#0xe0
;;;363      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
;;;364    
;;;365      /*Get WRP*/
;;;366      pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
;;;367    
;;;368      /*Get RDP Level*/
;;;369      pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
;;;370    
;;;371      /*Get USER*/
;;;372      pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
00002a  7602              STRB     r2,[r0,#0x18]
00002c  7809              LDRB     r1,[r1,#0]
00002e  f001010c          AND      r1,r1,#0xc
;;;373    
;;;374      /*Get BOR Level*/
;;;375      pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
000032  6141              STR      r1,[r0,#0x14]
;;;376    }
000034  4770              BX       lr
;;;377    
                          ENDP

000036  0000              DCW      0x0000
                  |L5.56|
                          DCD      0x40023c16
                  |L5.60|
                          DCD      0x40023c15
                  |L5.64|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;301      */
;;;302    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;303    {
;;;304      HAL_StatusTypeDef status = HAL_ERROR;
;;;305      
;;;306      /* Process Locked */
;;;307      __HAL_LOCK(&pFlash);
000004  4e2f              LDR      r6,|L6.196|
000006  4604              MOV      r4,r0                 ;303
000008  2001              MOVS     r0,#1                 ;304
00000a  7e31              LDRB     r1,[r6,#0x18]  ; pFlash
00000c  2901              CMP      r1,#1
00000e  bf04              ITT      EQ
000010  2002              MOVEQ    r0,#2
;;;308    
;;;309      /* Check the parameters */
;;;310      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;311    
;;;312      /*Write protection configuration*/
;;;313      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
;;;314      {
;;;315        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;316        if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
;;;317        {
;;;318          /*Enable of Write protection on the selected Sector*/
;;;319          status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
;;;320        }
;;;321        else
;;;322        {
;;;323          /*Disable of Write protection on the selected Sector*/
;;;324          status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
;;;325        }
;;;326      }
;;;327    
;;;328      /*Read protection configuration*/
;;;329      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;330      {
;;;331        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;332      }
;;;333    
;;;334      /*USER  configuration*/
;;;335      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;336      {
;;;337        status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
;;;338                                         pOBInit->USERConfig&OB_STOP_NO_RST,
;;;339                                         pOBInit->USERConfig&OB_STDBY_NO_RST);
;;;340      }
;;;341    
;;;342      /*BOR Level  configuration*/
;;;343      if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
;;;344      {
;;;345        status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
;;;346      }
;;;347    
;;;348      /* Process Unlocked */
;;;349      __HAL_UNLOCK(&pFlash);
;;;350    
;;;351      return status;
;;;352    }
000012  e8bd87f0          POPEQ    {r4-r10,pc}
000016  2101              MOVS     r1,#1                 ;307
000018  7631              STRB     r1,[r6,#0x18]         ;307
00001a  7821              LDRB     r1,[r4,#0]            ;313
00001c  f0110f01          TST      r1,#1                 ;313
000020  d016              BEQ      |L6.80|
000022  6860              LDR      r0,[r4,#4]            ;316
000024  4d28              LDR      r5,|L6.200|
000026  2801              CMP      r0,#1                 ;316
000028  68a7              LDR      r7,[r4,#8]            ;316
00002a  f24c3050          MOV      r0,#0xc350            ;316
00002e  d007              BEQ      |L6.64|
000030  f7fffffe          BL       FLASH_WaitForLastOperation
000034  2800              CMP      r0,#0                 ;316
000036  bf04              ITT      EQ                    ;316
000038  8829              LDRHEQ   r1,[r5,#0]            ;316
00003a  4339              ORREQ    r1,r1,r7              ;316
00003c  d007              BEQ      |L6.78|
00003e  e007              B        |L6.80|
                  |L6.64|
000040  f7fffffe          BL       FLASH_WaitForLastOperation
000044  2800              CMP      r0,#0                 ;316
000046  bf04              ITT      EQ                    ;316
000048  8829              LDRHEQ   r1,[r5,#0]            ;316
00004a  43b9              BICEQ    r1,r1,r7              ;316
00004c  d100              BNE      |L6.80|
                  |L6.78|
00004e  8029              STRH     r1,[r5,#0]            ;316
                  |L6.80|
000050  7821              LDRB     r1,[r4,#0]            ;329
000052  f0110f02          TST      r1,#2                 ;329
000056  d008              BEQ      |L6.106|
000058  7c25              LDRB     r5,[r4,#0x10]         ;331
00005a  f24c3050          MOV      r0,#0xc350            ;331
00005e  f7fffffe          BL       FLASH_WaitForLastOperation
000062  2800              CMP      r0,#0                 ;331
000064  bf04              ITT      EQ                    ;331
000066  4919              LDREQ    r1,|L6.204|
000068  700d              STRBEQ   r5,[r1,#0]            ;331
                  |L6.106|
00006a  7821              LDRB     r1,[r4,#0]            ;335
00006c  4d18              LDR      r5,|L6.208|
00006e  f0110f04          TST      r1,#4                 ;335
000072  d014              BEQ      |L6.158|
000074  7e20              LDRB     r0,[r4,#0x18]         ;337
000076  f0000920          AND      r9,r0,#0x20           ;337
00007a  f0000840          AND      r8,r0,#0x40           ;337
00007e  f0000780          AND      r7,r0,#0x80           ;337
000082  f24c3050          MOV      r0,#0xc350            ;337
000086  f7fffffe          BL       FLASH_WaitForLastOperation
00008a  b940              CBNZ     r0,|L6.158|
00008c  7829              LDRB     r1,[r5,#0]            ;337
00008e  f001011f          AND      r1,r1,#0x1f           ;337
000092  ea480101          ORR      r1,r8,r1              ;337
000096  4339              ORRS     r1,r1,r7              ;337
000098  ea410109          ORR      r1,r1,r9              ;337
00009c  7029              STRB     r1,[r5,#0]            ;337
                  |L6.158|
00009e  7821              LDRB     r1,[r4,#0]            ;343
0000a0  f0110f08          TST      r1,#8                 ;343
0000a4  f04f0100          MOV      r1,#0                 ;343
0000a8  d008              BEQ      |L6.188|
0000aa  7d20              LDRB     r0,[r4,#0x14]         ;345
0000ac  782a              LDRB     r2,[r5,#0]            ;345
0000ae  f022020c          BIC      r2,r2,#0xc            ;345
0000b2  702a              STRB     r2,[r5,#0]            ;345
0000b4  782a              LDRB     r2,[r5,#0]            ;345
0000b6  4310              ORRS     r0,r0,r2              ;345
0000b8  7028              STRB     r0,[r5,#0]            ;345
0000ba  4608              MOV      r0,r1                 ;345
                  |L6.188|
0000bc  7631              STRB     r1,[r6,#0x18]         ;349
0000be  e8bd87f0          POP      {r4-r10,pc}
;;;353    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L6.196|
                          DCD      pFlash
                  |L6.200|
                          DCD      0x40023c16
                  |L6.204|
                          DCD      0x40023c15
                  |L6.208|
                          DCD      0x40023c14

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REVSH|
#line 402
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____RRX|
#line 587
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
