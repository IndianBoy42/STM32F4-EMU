; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_hal_pwr_ex.o --depend=stm32nes\stm32f4xx_hal_pwr_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_hal_pwr_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c]
                          THUMB

                          AREA ||i.HAL_PWREx_ControlVoltageScaling||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_ControlVoltageScaling PROC
;;;249      */
;;;250    HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
000000  b538              PUSH     {r3-r5,lr}
;;;251    {
;;;252      uint32_t tickstart = 0U;
;;;253      
;;;254      assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
;;;255      
;;;256      /* Enable PWR RCC Clock Peripheral */
;;;257      __HAL_RCC_PWR_CLK_ENABLE();
000002  4914              LDR      r1,|L1.84|
000004  680a              LDR      r2,[r1,#0]
000006  f0425280          ORR      r2,r2,#0x10000000
00000a  600a              STR      r2,[r1,#0]
00000c  6809              LDR      r1,[r1,#0]
;;;258      
;;;259      /* Set Range */
;;;260      __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
00000e  4d12              LDR      r5,|L1.88|
000010  f0015180          AND      r1,r1,#0x10000000     ;257
000014  9100              STR      r1,[sp,#0]
000016  6829              LDR      r1,[r5,#0]
000018  f4214180          BIC      r1,r1,#0x4000
00001c  4308              ORRS     r0,r0,r1
00001e  6028              STR      r0,[r5,#0]
000020  6828              LDR      r0,[r5,#0]
000022  f4004080          AND      r0,r0,#0x4000
;;;261      
;;;262      /* Get Start Tick*/
;;;263      tickstart = HAL_GetTick();
000026  9000              STR      r0,[sp,#0]
000028  f7fffffe          BL       HAL_GetTick
00002c  4604              MOV      r4,r0
;;;264      while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
00002e  6868              LDR      r0,[r5,#4]
000030  f4104f80          TST      r0,#0x4000
000034  d10c              BNE      |L1.80|
;;;265      {
;;;266        if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
000036  bf00              NOP      
                  |L1.56|
000038  f7fffffe          BL       HAL_GetTick
00003c  1b00              SUBS     r0,r0,r4
00003e  f5b07f7a          CMP      r0,#0x3e8
000042  d901              BLS      |L1.72|
;;;267        {
;;;268          return HAL_TIMEOUT;
000044  2003              MOVS     r0,#3
;;;269        } 
;;;270      }
;;;271    
;;;272      return HAL_OK;
;;;273    }
000046  bd38              POP      {r3-r5,pc}
                  |L1.72|
000048  6868              LDR      r0,[r5,#4]            ;268
00004a  f4104f80          TST      r0,#0x4000            ;268
00004e  d0f3              BEQ      |L1.56|
                  |L1.80|
000050  2000              MOVS     r0,#0                 ;272
000052  bd38              POP      {r3-r5,pc}
;;;274    
                          ENDP

                  |L1.84|
                          DCD      0x40023840
                  |L1.88|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableBkUpReg||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableBkUpReg PROC
;;;182      */
;;;183    HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
;;;185      uint32_t tickstart = 0U;
;;;186    
;;;187      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
000002  490d              LDR      r1,|L2.56|
000004  2000              MOVS     r0,#0
000006  f8c100a4          STR      r0,[r1,#0xa4]
;;;188    
;;;189      /* Get tick */
;;;190      tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
;;;191    
;;;192      /* Wait till Backup regulator ready flag is set */  
;;;193      while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
00000e  4d0b              LDR      r5,|L2.60|
000010  4604              MOV      r4,r0                 ;190
000012  6868              LDR      r0,[r5,#4]
000014  f0100f08          TST      r0,#8
000018  d00c              BEQ      |L2.52|
;;;194      {
;;;195        if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
00001a  bf00              NOP      
                  |L2.28|
00001c  f7fffffe          BL       HAL_GetTick
000020  1b00              SUBS     r0,r0,r4
000022  f5b07f7a          CMP      r0,#0x3e8
000026  d901              BLS      |L2.44|
;;;196        {
;;;197          return HAL_TIMEOUT;
000028  2003              MOVS     r0,#3
;;;198        } 
;;;199      }
;;;200      return HAL_OK;
;;;201    }
00002a  bd70              POP      {r4-r6,pc}
                  |L2.44|
00002c  6868              LDR      r0,[r5,#4]            ;193
00002e  f0100f08          TST      r0,#8                 ;193
000032  d1f3              BNE      |L2.28|
                  |L2.52|
000034  2000              MOVS     r0,#0                 ;200
000036  bd70              POP      {r4-r6,pc}
;;;202    
                          ENDP

                  |L2.56|
                          DCD      0x420e0000
                  |L2.60|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableFlashPowerDown||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableFlashPowerDown PROC
;;;215      */
;;;216    void HAL_PWREx_DisableFlashPowerDown(void)
000000  4901              LDR      r1,|L3.8|
;;;217    {
;;;218      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6248              STR      r0,[r1,#0x24]
;;;219    }
000006  4770              BX       lr
;;;220    
                          ENDP

                  |L3.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_EnableBkUpReg||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableBkUpReg PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
000000  b570              PUSH     {r4-r6,lr}
;;;160    {
;;;161      uint32_t tickstart = 0U;
;;;162    
;;;163      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
000002  490d              LDR      r1,|L4.56|
000004  2001              MOVS     r0,#1
000006  f8c100a4          STR      r0,[r1,#0xa4]
;;;164    
;;;165      /* Get tick */
;;;166      tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
;;;167    
;;;168      /* Wait till Backup regulator ready flag is set */  
;;;169      while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
00000e  4d0b              LDR      r5,|L4.60|
000010  4604              MOV      r4,r0                 ;166
000012  6868              LDR      r0,[r5,#4]
000014  f0100f08          TST      r0,#8
000018  d10c              BNE      |L4.52|
;;;170      {
;;;171        if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
00001a  bf00              NOP      
                  |L4.28|
00001c  f7fffffe          BL       HAL_GetTick
000020  1b00              SUBS     r0,r0,r4
000022  f5b07f7a          CMP      r0,#0x3e8
000026  d901              BLS      |L4.44|
;;;172        {
;;;173          return HAL_TIMEOUT;
000028  2003              MOVS     r0,#3
;;;174        } 
;;;175      }
;;;176      return HAL_OK;
;;;177    }
00002a  bd70              POP      {r4-r6,pc}
                  |L4.44|
00002c  6868              LDR      r0,[r5,#4]            ;169
00002e  f0100f08          TST      r0,#8                 ;169
000032  d0f3              BEQ      |L4.28|
                  |L4.52|
000034  2000              MOVS     r0,#0                 ;176
000036  bd70              POP      {r4-r6,pc}
;;;178    
                          ENDP

                  |L4.56|
                          DCD      0x420e0000
                  |L4.60|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableFlashPowerDown||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableFlashPowerDown PROC
;;;206      */
;;;207    void HAL_PWREx_EnableFlashPowerDown(void)
000000  4901              LDR      r1,|L5.8|
;;;208    {
;;;209      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6248              STR      r0,[r1,#0x24]
;;;210    }
000006  4770              BX       lr
;;;211    
                          ENDP

                  |L5.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_GetVoltageRange||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_GetVoltageRange PROC
;;;228      */  
;;;229    uint32_t HAL_PWREx_GetVoltageRange(void)
000000  4802              LDR      r0,|L6.12|
;;;230    {
;;;231      return (PWR->CR & PWR_CR_VOS);
000002  6800              LDR      r0,[r0,#0]
000004  f4004080          AND      r0,r0,#0x4000
;;;232    }
000008  4770              BX       lr
;;;233    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40007000

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____RRX|
#line 587
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
