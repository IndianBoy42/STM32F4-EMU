<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [stm32nes\stm32nes.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image stm32nes\stm32nes.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Apr 24 04:47:16 2019
<BR><P>
<H3>Maximum Stack Usage =        392 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; tft_prints &rArr; printi &rArr; prints
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[103]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_stm32f4xx_1.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e8]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[6d]">cpu_abs</a> from cpu.o(i.cpu_abs) referenced 26 times from cpu.o(.constdata)
 <LI><a href="#[7c]">cpu_absx</a> from cpu.o(i.cpu_absx) referenced 17 times from cpu.o(.constdata)
 <LI><a href="#[79]">cpu_absy</a> from cpu.o(i.cpu_absy) referenced 9 times from cpu.o(.constdata)
 <LI><a href="#[9c]">cpu_adc</a> from cpu.o(i.cpu_adc) referenced 6 times from cpu.o(.constdata)
 <LI><a href="#[a5]">cpu_adcindzp</a> from cpu.o(i.cpu_adcindzp) referenced from cpu.o(.constdata)
 <LI><a href="#[9e]">cpu_adczp</a> from cpu.o(i.cpu_adczp) referenced from cpu.o(.constdata)
 <LI><a href="#[a7]">cpu_adczpx</a> from cpu.o(i.cpu_adczpx) referenced from cpu.o(.constdata)
 <LI><a href="#[7e]">cpu_and</a> from cpu.o(i.cpu_and) referenced 6 times from cpu.o(.constdata)
 <LI><a href="#[87]">cpu_andindzp</a> from cpu.o(i.cpu_andindzp) referenced from cpu.o(.constdata)
 <LI><a href="#[80]">cpu_andzp</a> from cpu.o(i.cpu_andzp) referenced from cpu.o(.constdata)
 <LI><a href="#[89]">cpu_andzpx</a> from cpu.o(i.cpu_andzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[6e]">cpu_asl</a> from cpu.o(i.cpu_asl) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[6b]">cpu_asla</a> from cpu.o(i.cpu_asla) referenced from cpu.o(.constdata)
 <LI><a href="#[68]">cpu_aslzp</a> from cpu.o(i.cpu_aslzp) referenced from cpu.o(.constdata)
 <LI><a href="#[77]">cpu_aslzpx</a> from cpu.o(i.cpu_aslzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[b5]">cpu_bcc</a> from cpu.o(i.cpu_bcc) referenced from cpu.o(.constdata)
 <LI><a href="#[c6]">cpu_bcs</a> from cpu.o(i.cpu_bcs) referenced from cpu.o(.constdata)
 <LI><a href="#[e2]">cpu_beq</a> from cpu.o(i.cpu_beq) referenced from cpu.o(.constdata)
 <LI><a href="#[84]">cpu_bit</a> from cpu.o(i.cpu_bit) referenced 3 times from cpu.o(.constdata)
 <LI><a href="#[7f]">cpu_bitzp</a> from cpu.o(i.cpu_bitzp) referenced from cpu.o(.constdata)
 <LI><a href="#[88]">cpu_bitzpx</a> from cpu.o(i.cpu_bitzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[86]">cpu_bmi</a> from cpu.o(i.cpu_bmi) referenced from cpu.o(.constdata)
 <LI><a href="#[d5]">cpu_bne</a> from cpu.o(i.cpu_bne) referenced from cpu.o(.constdata)
 <LI><a href="#[6f]">cpu_bpl</a> from cpu.o(i.cpu_bpl) referenced from cpu.o(.constdata)
 <LI><a href="#[ac]">cpu_bra</a> from cpu.o(i.cpu_bra) referenced from cpu.o(.constdata)
 <LI><a href="#[60]">cpu_brk</a> from cpu.o(i.cpu_brk) referenced from cpu.o(.constdata)
 <LI><a href="#[95]">cpu_bvc</a> from cpu.o(i.cpu_bvc) referenced from cpu.o(.constdata)
 <LI><a href="#[a4]">cpu_bvs</a> from cpu.o(i.cpu_bvs) referenced from cpu.o(.constdata)
 <LI><a href="#[78]">cpu_clc</a> from cpu.o(i.cpu_clc) referenced from cpu.o(.constdata)
 <LI><a href="#[d9]">cpu_cld</a> from cpu.o(i.cpu_cld) referenced from cpu.o(.constdata)
 <LI><a href="#[99]">cpu_cli</a> from cpu.o(i.cpu_cli) referenced from cpu.o(.constdata)
 <LI><a href="#[cb]">cpu_clv</a> from cpu.o(i.cpu_clv) referenced from cpu.o(.constdata)
 <LI><a href="#[ce]">cpu_cmp</a> from cpu.o(i.cpu_cmp) referenced 6 times from cpu.o(.constdata)
 <LI><a href="#[d6]">cpu_cmpindzp</a> from cpu.o(i.cpu_cmpindzp) referenced from cpu.o(.constdata)
 <LI><a href="#[d0]">cpu_cmpzp</a> from cpu.o(i.cpu_cmpzp) referenced from cpu.o(.constdata)
 <LI><a href="#[d7]">cpu_cmpzpx</a> from cpu.o(i.cpu_cmpzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[db]">cpu_cpx</a> from cpu.o(i.cpu_cpx) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[dd]">cpu_cpxzp</a> from cpu.o(i.cpu_cpxzp) referenced from cpu.o(.constdata)
 <LI><a href="#[cd]">cpu_cpy</a> from cpu.o(i.cpu_cpy) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[cf]">cpu_cpyzp</a> from cpu.o(i.cpu_cpyzp) referenced from cpu.o(.constdata)
 <LI><a href="#[8c]">cpu_dea</a> from cpu.o(i.cpu_dea) referenced from cpu.o(.constdata)
 <LI><a href="#[d4]">cpu_dec</a> from cpu.o(i.cpu_dec) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[d1]">cpu_deczp</a> from cpu.o(i.cpu_deczp) referenced from cpu.o(.constdata)
 <LI><a href="#[d8]">cpu_deczpx</a> from cpu.o(i.cpu_deczpx) referenced from cpu.o(.constdata)
 <LI><a href="#[d3]">cpu_dex</a> from cpu.o(i.cpu_dex) referenced from cpu.o(.constdata)
 <LI><a href="#[b1]">cpu_dey</a> from cpu.o(i.cpu_dey) referenced from cpu.o(.constdata)
 <LI><a href="#[8e]">cpu_eor</a> from cpu.o(i.cpu_eor) referenced 6 times from cpu.o(.constdata)
 <LI><a href="#[96]">cpu_eorindzp</a> from cpu.o(i.cpu_eorindzp) referenced from cpu.o(.constdata)
 <LI><a href="#[8f]">cpu_eorzp</a> from cpu.o(i.cpu_eorzp) referenced from cpu.o(.constdata)
 <LI><a href="#[97]">cpu_eorzpx</a> from cpu.o(i.cpu_eorzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[6a]">cpu_immediate</a> from cpu.o(i.cpu_immediate) referenced 12 times from cpu.o(.constdata)
 <LI><a href="#[61]">cpu_implied</a> from cpu.o(i.cpu_implied) referenced 114 times from cpu.o(.constdata)
 <LI><a href="#[7a]">cpu_ina</a> from cpu.o(i.cpu_ina) referenced from cpu.o(.constdata)
 <LI><a href="#[e1]">cpu_inc</a> from cpu.o(i.cpu_inc) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[df]">cpu_inczp</a> from cpu.o(i.cpu_inczp) referenced from cpu.o(.constdata)
 <LI><a href="#[e5]">cpu_inczpx</a> from cpu.o(i.cpu_inczpx) referenced from cpu.o(.constdata)
 <LI><a href="#[ab]">cpu_indabsx</a> from cpu.o(i.cpu_indabsx) referenced from cpu.o(.constdata)
 <LI><a href="#[a2]">cpu_indirect</a> from cpu.o(i.cpu_indirect) referenced from cpu.o(.constdata)
 <LI><a href="#[63]">cpu_indx</a> from cpu.o(i.cpu_indx) referenced 8 times from cpu.o(.constdata)
 <LI><a href="#[71]">cpu_indy</a> from cpu.o(i.cpu_indy) referenced 8 times from cpu.o(.constdata)
 <LI><a href="#[73]">cpu_indzp</a> from cpu.o(i.cpu_indzp) referenced 8 times from cpu.o(.constdata)
 <LI><a href="#[e0]">cpu_inx</a> from cpu.o(i.cpu_inx) referenced from cpu.o(.constdata)
 <LI><a href="#[d2]">cpu_iny</a> from cpu.o(i.cpu_iny) referenced from cpu.o(.constdata)
 <LI><a href="#[93]">cpu_jmp</a> from cpu.o(i.cpu_jmp) referenced 3 times from cpu.o(.constdata)
 <LI><a href="#[7d]">cpu_jsr</a> from cpu.o(i.cpu_jsr) referenced from cpu.o(.constdata)
 <LI><a href="#[bf]">cpu_lda</a> from cpu.o(i.cpu_lda) referenced 6 times from cpu.o(.constdata)
 <LI><a href="#[c7]">cpu_ldaindzp</a> from cpu.o(i.cpu_ldaindzp) referenced from cpu.o(.constdata)
 <LI><a href="#[c2]">cpu_ldazp</a> from cpu.o(i.cpu_ldazp) referenced from cpu.o(.constdata)
 <LI><a href="#[c9]">cpu_ldazpx</a> from cpu.o(i.cpu_ldazpx) referenced from cpu.o(.constdata)
 <LI><a href="#[c0]">cpu_ldx</a> from cpu.o(i.cpu_ldx) referenced 3 times from cpu.o(.constdata)
 <LI><a href="#[c3]">cpu_ldxzp</a> from cpu.o(i.cpu_ldxzp) referenced from cpu.o(.constdata)
 <LI><a href="#[ca]">cpu_ldxzpy</a> from cpu.o(i.cpu_ldxzpy) referenced from cpu.o(.constdata)
 <LI><a href="#[be]">cpu_ldy</a> from cpu.o(i.cpu_ldy) referenced 3 times from cpu.o(.constdata)
 <LI><a href="#[c1]">cpu_ldyzp</a> from cpu.o(i.cpu_ldyzp) referenced from cpu.o(.constdata)
 <LI><a href="#[c8]">cpu_ldyzpx</a> from cpu.o(i.cpu_ldyzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[94]">cpu_lsr</a> from cpu.o(i.cpu_lsr) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[92]">cpu_lsra</a> from cpu.o(i.cpu_lsra) referenced from cpu.o(.constdata)
 <LI><a href="#[90]">cpu_lsrzp</a> from cpu.o(i.cpu_lsrzp) referenced from cpu.o(.constdata)
 <LI><a href="#[98]">cpu_lsrzpx</a> from cpu.o(i.cpu_lsrzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[64]">cpu_nop</a> from cpu.o(i.cpu_nop) referenced 78 times from cpu.o(.constdata)
 <LI><a href="#[62]">cpu_ora</a> from cpu.o(i.cpu_ora) referenced 7 times from cpu.o(.constdata)
 <LI><a href="#[72]">cpu_oraindzp</a> from cpu.o(i.cpu_oraindzp) referenced from cpu.o(.constdata)
 <LI><a href="#[67]">cpu_orazp</a> from cpu.o(i.cpu_orazp) referenced from cpu.o(.constdata)
 <LI><a href="#[75]">cpu_orazpx</a> from cpu.o(i.cpu_orazpx) referenced from cpu.o(.constdata)
 <LI><a href="#[91]">cpu_pha</a> from cpu.o(i.cpu_pha) referenced from cpu.o(.constdata)
 <LI><a href="#[69]">cpu_php</a> from cpu.o(i.cpu_php) referenced from cpu.o(.constdata)
 <LI><a href="#[da]">cpu_phx</a> from cpu.o(i.cpu_phx) referenced from cpu.o(.constdata)
 <LI><a href="#[9a]">cpu_phy</a> from cpu.o(i.cpu_phy) referenced from cpu.o(.constdata)
 <LI><a href="#[a0]">cpu_pla</a> from cpu.o(i.cpu_pla) referenced from cpu.o(.constdata)
 <LI><a href="#[82]">cpu_plp</a> from cpu.o(i.cpu_plp) referenced from cpu.o(.constdata)
 <LI><a href="#[e7]">cpu_plx</a> from cpu.o(i.cpu_plx) referenced from cpu.o(.constdata)
 <LI><a href="#[aa]">cpu_ply</a> from cpu.o(i.cpu_ply) referenced from cpu.o(.constdata)
 <LI><a href="#[70]">cpu_relative</a> from cpu.o(i.cpu_relative) referenced 8 times from cpu.o(.constdata)
 <LI><a href="#[85]">cpu_rol</a> from cpu.o(i.cpu_rol) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[83]">cpu_rola</a> from cpu.o(i.cpu_rola) referenced from cpu.o(.constdata)
 <LI><a href="#[81]">cpu_rolzp</a> from cpu.o(i.cpu_rolzp) referenced from cpu.o(.constdata)
 <LI><a href="#[8a]">cpu_rolzpx</a> from cpu.o(i.cpu_rolzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[a3]">cpu_ror</a> from cpu.o(i.cpu_ror) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[a1]">cpu_rora</a> from cpu.o(i.cpu_rora) referenced from cpu.o(.constdata)
 <LI><a href="#[9f]">cpu_rorzp</a> from cpu.o(i.cpu_rorzp) referenced from cpu.o(.constdata)
 <LI><a href="#[a8]">cpu_rorzpx</a> from cpu.o(i.cpu_rorzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[8d]">cpu_rti</a> from cpu.o(i.cpu_rti) referenced from cpu.o(.constdata)
 <LI><a href="#[9b]">cpu_rts</a> from cpu.o(i.cpu_rts) referenced from cpu.o(.constdata)
 <LI><a href="#[dc]">cpu_sbc</a> from cpu.o(i.cpu_sbc) referenced 6 times from cpu.o(.constdata)
 <LI><a href="#[e3]">cpu_sbcindzp</a> from cpu.o(i.cpu_sbcindzp) referenced from cpu.o(.constdata)
 <LI><a href="#[de]">cpu_sbczp</a> from cpu.o(i.cpu_sbczp) referenced from cpu.o(.constdata)
 <LI><a href="#[e4]">cpu_sbczpx</a> from cpu.o(i.cpu_sbczpx) referenced from cpu.o(.constdata)
 <LI><a href="#[8b]">cpu_sec</a> from cpu.o(i.cpu_sec) referenced from cpu.o(.constdata)
 <LI><a href="#[e6]">cpu_sed</a> from cpu.o(i.cpu_sed) referenced from cpu.o(.constdata)
 <LI><a href="#[a9]">cpu_sei</a> from cpu.o(i.cpu_sei) referenced from cpu.o(.constdata)
 <LI><a href="#[ad]">cpu_sta</a> from cpu.o(i.cpu_sta) referenced 5 times from cpu.o(.constdata)
 <LI><a href="#[b6]">cpu_staindzp</a> from cpu.o(i.cpu_staindzp) referenced from cpu.o(.constdata)
 <LI><a href="#[af]">cpu_stazp</a> from cpu.o(i.cpu_stazp) referenced from cpu.o(.constdata)
 <LI><a href="#[b8]">cpu_stazpx</a> from cpu.o(i.cpu_stazpx) referenced from cpu.o(.constdata)
 <LI><a href="#[b4]">cpu_stx</a> from cpu.o(i.cpu_stx) referenced from cpu.o(.constdata)
 <LI><a href="#[b0]">cpu_stxzp</a> from cpu.o(i.cpu_stxzp) referenced from cpu.o(.constdata)
 <LI><a href="#[b9]">cpu_stxzpy</a> from cpu.o(i.cpu_stxzpy) referenced from cpu.o(.constdata)
 <LI><a href="#[b3]">cpu_sty</a> from cpu.o(i.cpu_sty) referenced from cpu.o(.constdata)
 <LI><a href="#[ae]">cpu_styzp</a> from cpu.o(i.cpu_styzp) referenced from cpu.o(.constdata)
 <LI><a href="#[b7]">cpu_styzpx</a> from cpu.o(i.cpu_styzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[bd]">cpu_stz</a> from cpu.o(i.cpu_stz) referenced 2 times from cpu.o(.constdata)
 <LI><a href="#[9d]">cpu_stzzp</a> from cpu.o(i.cpu_stzzp) referenced from cpu.o(.constdata)
 <LI><a href="#[a6]">cpu_stzzpx</a> from cpu.o(i.cpu_stzzpx) referenced from cpu.o(.constdata)
 <LI><a href="#[c5]">cpu_tax</a> from cpu.o(i.cpu_tax) referenced from cpu.o(.constdata)
 <LI><a href="#[c4]">cpu_tay</a> from cpu.o(i.cpu_tay) referenced from cpu.o(.constdata)
 <LI><a href="#[7b]">cpu_trb</a> from cpu.o(i.cpu_trb) referenced from cpu.o(.constdata)
 <LI><a href="#[74]">cpu_trbzp</a> from cpu.o(i.cpu_trbzp) referenced from cpu.o(.constdata)
 <LI><a href="#[6c]">cpu_tsb</a> from cpu.o(i.cpu_tsb) referenced from cpu.o(.constdata)
 <LI><a href="#[65]">cpu_tsbzp</a> from cpu.o(i.cpu_tsbzp) referenced from cpu.o(.constdata)
 <LI><a href="#[cc]">cpu_tsx</a> from cpu.o(i.cpu_tsx) referenced from cpu.o(.constdata)
 <LI><a href="#[b2]">cpu_txa</a> from cpu.o(i.cpu_txa) referenced from cpu.o(.constdata)
 <LI><a href="#[bc]">cpu_txs</a> from cpu.o(i.cpu_txs) referenced from cpu.o(.constdata)
 <LI><a href="#[bb]">cpu_tya</a> from cpu.o(i.cpu_tya) referenced from cpu.o(.constdata)
 <LI><a href="#[66]">cpu_zp</a> from cpu.o(i.cpu_zp) referenced 24 times from cpu.o(.constdata)
 <LI><a href="#[76]">cpu_zpx</a> from cpu.o(i.cpu_zpx) referenced 18 times from cpu.o(.constdata)
 <LI><a href="#[ba]">cpu_zpy</a> from cpu.o(i.cpu_zpy) referenced 2 times from cpu.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e8]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e9]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[eb]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[15f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[160]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[161]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[162]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[ec]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[163]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ed]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[164]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[165]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[166]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[167]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[168]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[169]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[170]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[171]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[172]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[173]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[174]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[175]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[176]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[177]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[178]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[179]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[17a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[17b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[17c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[17d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ea]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[17f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ef]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f1]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[180]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[f3]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; tft_prints &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[181]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[104]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f6]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[182]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f8]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppu_render_line
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[fa]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[183]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_tsb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_trb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sty
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_staindzp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sta
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ror
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rol
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_lsr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_inc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_dec
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_asl
</UL>

<P><STRONG><a name="[fc]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[184]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppu_render_line
</UL>

<P><STRONG><a name="[ff]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[185]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_prints
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[188]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[fe]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[190]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f5]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[191]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[192]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[193]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[105]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_DMA_Init</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_Delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[122]"></a>HAL_GPIO_Init</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[107]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[10e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 508 bytes, Stack size 12 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[115]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_SD_InitCard</STRONG> (Thumb, 446 bytes, Stack size 96 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_InitCard &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_SD_MspInit</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, sdio.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>LL_ADC_CommonInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_ll_adc.o(i.LL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[128]"></a>LL_ADC_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_adc.o(i.LL_ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[129]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, stm32f4xx_ll_adc.o(i.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[12c]"></a>LL_DAC_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_ll_dac.o(i.LL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[127]"></a>LL_GPIO_Init</STRONG> (Thumb, 340 bytes, Stack size 20 bytes, stm32f4xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM13_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[146]"></a>LL_Init1msTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[125]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, stm32f4xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[132]"></a>LL_SPI_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f4xx_ll_spi.o(i.LL_SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[147]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[135]"></a>LL_TIM_Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM13_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[139]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_ll_tim.o(i.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM13_Init
</UL>

<P><STRONG><a name="[124]"></a>LL_USART_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f4xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[126]"></a>MX_ADC1_Init</STRONG> (Thumb, 690 bytes, Stack size 96 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_ADC1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_CommonInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>MX_DAC_Init</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, dac.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_DAC_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DAC_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>MX_DMA_Init</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>MX_GPIO_Init</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>MX_SDIO_SD_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sdio.o(i.MX_SDIO_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_SDIO_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>MX_SPI1_Init</STRONG> (Thumb, 346 bytes, Stack size 80 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_SPI1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>MX_SPI2_Init</STRONG> (Thumb, 444 bytes, Stack size 80 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_SPI2_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>MX_TIM10_Init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, tim.o(i.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM10_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>MX_TIM11_Init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, tim.o(i.MX_TIM11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM11_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>MX_TIM12_Init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, tim.o(i.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM12_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>MX_TIM13_Init</STRONG> (Thumb, 230 bytes, Stack size 104 bytes, tim.o(i.MX_TIM13_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_TIM13_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>MX_TIM14_Init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, tim.o(i.MX_TIM14_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM14_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>MX_TIM6_Init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM6_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>MX_TIM7_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, tim.o(i.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM7_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>MX_TIM9_Init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, tim.o(i.MX_TIM9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM9_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_USART2_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>SDIO_ConfigData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[11c]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[110]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[114]"></a>SDIO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[118]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[144]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[112]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[11b]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[141]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[113]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[119]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[11a]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[121]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[11d]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[11f]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[142]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[11e]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDMMC_CmdSetRelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>SystemClock_Config</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemClock_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_stm32f4xx_1.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>cpu_abs</STRONG> (Thumb, 380 bytes, Stack size 4 bytes, cpu.o(i.cpu_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_abs &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>cpu_absx</STRONG> (Thumb, 422 bytes, Stack size 4 bytes, cpu.o(i.cpu_absx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_absx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>cpu_absy</STRONG> (Thumb, 422 bytes, Stack size 4 bytes, cpu.o(i.cpu_absy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_absy &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>cpu_exec</STRONG> (Thumb, 5528 bytes, Stack size 24 bytes, cpu.o(i.cpu_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cpu_exec &rArr; cpu_staindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_tsb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_trb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sty
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_staindzp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sta
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbczpx
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbczp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbcindzp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ror
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rol
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_oraindzp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ora
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_lsr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldaindzp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_lda
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_inc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_eorindzp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_eor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_dec
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cpx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cmpindzp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cmp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bvs
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bvc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bpl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bne
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bmi
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_beq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bcs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bcc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_asl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_andindzp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_and
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adczpx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adczp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adcindzp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_frame
</UL>

<P><STRONG><a name="[6a]"></a>cpu_immediate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(i.cpu_immediate))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>cpu_implied</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu.o(i.cpu_implied))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>cpu_indabsx</STRONG> (Thumb, 740 bytes, Stack size 4 bytes, cpu.o(i.cpu_indabsx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_indabsx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>cpu_indirect</STRONG> (Thumb, 746 bytes, Stack size 4 bytes, cpu.o(i.cpu_indirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_indirect &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>cpu_indx</STRONG> (Thumb, 746 bytes, Stack size 4 bytes, cpu.o(i.cpu_indx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_indx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>cpu_indy</STRONG> (Thumb, 782 bytes, Stack size 4 bytes, cpu.o(i.cpu_indy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_indy &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>cpu_indzp</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, cpu.o(i.cpu_indzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_staindzp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbcindzp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_oraindzp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldaindzp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_eorindzp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cmpindzp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_andindzp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adcindzp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>cpu_initmem</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cpu.o(i.cpu_initmem))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_init
</UL>

<P><STRONG><a name="[70]"></a>cpu_relative</STRONG> (Thumb, 412 bytes, Stack size 4 bytes, cpu.o(i.cpu_relative))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_relative &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>cpu_reset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cpu.o(i.cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_init
</UL>

<P><STRONG><a name="[66]"></a>cpu_zp</STRONG> (Thumb, 380 bytes, Stack size 4 bytes, cpu.o(i.cpu_zp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_tsbzp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_trbzp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stzzp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_styzp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stxzp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stazp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbczp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rorzp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rolzp
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_orazp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_lsrzp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldyzp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldxzp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldazp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_inczp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_eorzp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_deczp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cpyzp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cpxzp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cmpzp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bitzp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_aslzp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_andzp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adczp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>cpu_zpx</STRONG> (Thumb, 386 bytes, Stack size 4 bytes, cpu.o(i.cpu_zpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stzzpx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_styzpx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stazpx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbczpx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rorzpx
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rolzpx
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_orazpx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_lsrzpx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldyzpx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldazpx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_inczpx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_eorzpx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_deczpx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cmpzpx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bitzpx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_aslzpx
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_andzpx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adczpx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>cpu_zpy</STRONG> (Thumb, 386 bytes, Stack size 4 bytes, cpu.o(i.cpu_zpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpu_zpy &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_stxzpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldxzpy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>joypad_read</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, cpu.o(i.joypad_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_tsb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_trb
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbcindzp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sbc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ror
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_rol
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_oraindzp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ora
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_lsr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_ldaindzp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_lda
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_inc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_eorindzp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_eor
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_dec
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cpx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cmpindzp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_cmp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bvs
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bvc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bpl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bne
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bmi
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_beq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bcs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_bcc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_asl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_andindzp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_and
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adcindzp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_relative
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indirect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indabsx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_absy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_absx
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_abs
</UL>

<P><STRONG><a name="[14c]"></a>joystick_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, adc.o(i.joystick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = joystick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>main</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = main &rArr; tft_prints &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_select
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_frame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joystick_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM13_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_update
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_prints
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_printc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[153]"></a>nes_frame</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, nes.o(i.nes_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nes_frame &rArr; ppu_render_line
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppu_spr0_hit_flag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppu_render_line
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>nes_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nes.o(i.nes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nes_init &rArr; ppu_init &rArr; tft_double_push_pxbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppu_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_initmem
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>ppu_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ppu.o(i.ppu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ppu_init &rArr; tft_double_push_pxbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_double_push_pxbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_init
</UL>

<P><STRONG><a name="[155]"></a>ppu_render_line</STRONG> (Thumb, 2818 bytes, Stack size 136 bytes, ppu.o(i.ppu_render_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ppu_render_line
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_frame
</UL>

<P><STRONG><a name="[154]"></a>ppu_spr0_hit_flag</STRONG> (Thumb, 354 bytes, Stack size 36 bytes, ppu.o(i.ppu_spr0_hit_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ppu_spr0_hit_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_frame
</UL>

<P><STRONG><a name="[151]"></a>rom_select</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nes.o(i.rom_select))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>tft_clear</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lcd_main.o(i.tft_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tft_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_init
</UL>

<P><STRONG><a name="[159]"></a>tft_double_push_pxbuf</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, lcd_main.o(i.tft_double_push_pxbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tft_double_push_pxbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppu_init
</UL>

<P><STRONG><a name="[15d]"></a>tft_fill_color</STRONG> (Thumb, 638 bytes, Stack size 24 bytes, lcd_main.o(i.tft_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tft_fill_color
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_init
</UL>

<P><STRONG><a name="[14b]"></a>tft_init</STRONG> (Thumb, 388 bytes, Stack size 52 bytes, lcd_main.o(i.tft_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tft_init &rArr; tft_fill_color
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_fill_color
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>tft_printc</STRONG> (Thumb, 220 bytes, Stack size 52 bytes, lcd_main.o(i.tft_printc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tft_printc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_prints
</UL>

<P><STRONG><a name="[14f]"></a>tft_prints</STRONG> (Thumb, 332 bytes, Stack size 328 bytes, lcd_main.o(i.tft_prints))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tft_prints &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_printc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>tft_update</STRONG> (Thumb, 818 bytes, Stack size 128 bytes, lcd_main.o(i.tft_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tft_update
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[196]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[197]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15b]"></a>printi</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lcd_main.o(i.printi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_prints
</UL>

<P><STRONG><a name="[15c]"></a>prints</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lcd_main.o(i.prints))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prints
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tft_prints
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
</UL>

<P><STRONG><a name="[9c]"></a>cpu_adc</STRONG> (Thumb, 540 bytes, Stack size 8 bytes, cpu.o(i.cpu_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_adc &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>cpu_adcindzp</STRONG> (Thumb, 528 bytes, Stack size 4 bytes, cpu.o(i.cpu_adcindzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_adcindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>cpu_adczp</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, cpu.o(i.cpu_adczp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_adczp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>cpu_adczpx</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, cpu.o(i.cpu_adczpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_adczpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>cpu_and</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, cpu.o(i.cpu_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_and &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>cpu_andindzp</STRONG> (Thumb, 416 bytes, Stack size 4 bytes, cpu.o(i.cpu_andindzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_andindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>cpu_andzp</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, cpu.o(i.cpu_andzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_andzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>cpu_andzpx</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, cpu.o(i.cpu_andzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_andzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>cpu_asl</STRONG> (Thumb, 894 bytes, Stack size 16 bytes, cpu.o(i.cpu_asl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_asl &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>cpu_asla</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cpu.o(i.cpu_asla))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>cpu_aslzp</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, cpu.o(i.cpu_aslzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_aslzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>cpu_aslzpx</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, cpu.o(i.cpu_aslzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_aslzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>cpu_bcc</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, cpu.o(i.cpu_bcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bcc &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>cpu_bcs</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, cpu.o(i.cpu_bcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bcs &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>cpu_beq</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, cpu.o(i.cpu_beq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_beq &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>cpu_bit</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, cpu.o(i.cpu_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bit &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>cpu_bitzp</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, cpu.o(i.cpu_bitzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bitzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>cpu_bitzpx</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, cpu.o(i.cpu_bitzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bitzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>cpu_bmi</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, cpu.o(i.cpu_bmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bmi &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>cpu_bne</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, cpu.o(i.cpu_bne))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bne &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>cpu_bpl</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, cpu.o(i.cpu_bpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bpl &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>cpu_bra</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cpu.o(i.cpu_bra))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_bra
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>cpu_brk</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cpu.o(i.cpu_brk))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>cpu_bvc</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, cpu.o(i.cpu_bvc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bvc &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>cpu_bvs</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, cpu.o(i.cpu_bvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_bvs &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>cpu_clc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(i.cpu_clc))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>cpu_cld</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(i.cpu_cld))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>cpu_cli</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(i.cpu_cli))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>cpu_clv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(i.cpu_clv))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>cpu_cmp</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, cpu.o(i.cpu_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_cmp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>cpu_cmpindzp</STRONG> (Thumb, 440 bytes, Stack size 4 bytes, cpu.o(i.cpu_cmpindzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_cmpindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>cpu_cmpzp</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, cpu.o(i.cpu_cmpzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_cmpzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>cpu_cmpzpx</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, cpu.o(i.cpu_cmpzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_cmpzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>cpu_cpx</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, cpu.o(i.cpu_cpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_cpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>cpu_cpxzp</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, cpu.o(i.cpu_cpxzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_cpxzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>cpu_cpy</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, cpu.o(i.cpu_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_cpy &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>cpu_cpyzp</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, cpu.o(i.cpu_cpyzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_cpyzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>cpu_dea</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cpu.o(i.cpu_dea))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>cpu_dec</STRONG> (Thumb, 1288 bytes, Stack size 16 bytes, cpu.o(i.cpu_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_dec &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>cpu_deczp</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, cpu.o(i.cpu_deczp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_deczp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>cpu_deczpx</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, cpu.o(i.cpu_deczpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_deczpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>cpu_dex</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cpu.o(i.cpu_dex))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>cpu_dey</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cpu.o(i.cpu_dey))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>cpu_eor</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, cpu.o(i.cpu_eor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_eor &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>cpu_eorindzp</STRONG> (Thumb, 414 bytes, Stack size 4 bytes, cpu.o(i.cpu_eorindzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_eorindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>cpu_eorzp</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, cpu.o(i.cpu_eorzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_eorzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>cpu_eorzpx</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, cpu.o(i.cpu_eorzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_eorzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>cpu_ina</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cpu.o(i.cpu_ina))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>cpu_inc</STRONG> (Thumb, 1288 bytes, Stack size 16 bytes, cpu.o(i.cpu_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_inc &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>cpu_inczp</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, cpu.o(i.cpu_inczp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_inczp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>cpu_inczpx</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, cpu.o(i.cpu_inczpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_inczpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>cpu_inx</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cpu.o(i.cpu_inx))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>cpu_iny</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cpu.o(i.cpu_iny))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>cpu_jmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cpu.o(i.cpu_jmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_jmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>cpu_jsr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cpu.o(i.cpu_jsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_jsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>cpu_lda</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, cpu.o(i.cpu_lda))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_lda &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>cpu_ldaindzp</STRONG> (Thumb, 412 bytes, Stack size 4 bytes, cpu.o(i.cpu_ldaindzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_ldaindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>cpu_ldazp</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, cpu.o(i.cpu_ldazp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ldazp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>cpu_ldazpx</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, cpu.o(i.cpu_ldazpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ldazpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>cpu_ldx</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, cpu.o(i.cpu_ldx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ldx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>cpu_ldxzp</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, cpu.o(i.cpu_ldxzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ldxzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>cpu_ldxzpy</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, cpu.o(i.cpu_ldxzpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ldxzpy &rArr; cpu_zpy &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>cpu_ldy</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, cpu.o(i.cpu_ldy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ldy &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>cpu_ldyzp</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, cpu.o(i.cpu_ldyzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ldyzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>cpu_ldyzpx</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, cpu.o(i.cpu_ldyzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ldyzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>cpu_lsr</STRONG> (Thumb, 894 bytes, Stack size 16 bytes, cpu.o(i.cpu_lsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_lsr &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>cpu_lsra</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cpu.o(i.cpu_lsra))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>cpu_lsrzp</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cpu.o(i.cpu_lsrzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_lsrzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>cpu_lsrzpx</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cpu.o(i.cpu_lsrzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_lsrzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>cpu_nop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu.o(i.cpu_nop))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>cpu_ora</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, cpu.o(i.cpu_ora))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_ora &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>cpu_oraindzp</STRONG> (Thumb, 414 bytes, Stack size 4 bytes, cpu.o(i.cpu_oraindzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_oraindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>cpu_orazp</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, cpu.o(i.cpu_orazp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_orazp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>cpu_orazpx</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, cpu.o(i.cpu_orazpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_orazpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>cpu_pha</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cpu.o(i.cpu_pha))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>cpu_php</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cpu.o(i.cpu_php))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>cpu_phx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cpu.o(i.cpu_phx))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>cpu_phy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cpu.o(i.cpu_phy))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>cpu_pla</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cpu.o(i.cpu_pla))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>cpu_plp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cpu.o(i.cpu_plp))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>cpu_plx</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cpu.o(i.cpu_plx))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>cpu_ply</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cpu.o(i.cpu_ply))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>cpu_rol</STRONG> (Thumb, 906 bytes, Stack size 16 bytes, cpu.o(i.cpu_rol))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_rol &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>cpu_rola</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, cpu.o(i.cpu_rola))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>cpu_rolzp</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cpu.o(i.cpu_rolzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_rolzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>cpu_rolzpx</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cpu.o(i.cpu_rolzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_rolzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>cpu_ror</STRONG> (Thumb, 916 bytes, Stack size 16 bytes, cpu.o(i.cpu_ror))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_ror &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>cpu_rora</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cpu.o(i.cpu_rora))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>cpu_rorzp</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cpu.o(i.cpu_rorzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_rorzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>cpu_rorzpx</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cpu.o(i.cpu_rorzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_rorzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>cpu_rti</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cpu.o(i.cpu_rti))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>cpu_rts</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cpu.o(i.cpu_rts))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>cpu_sbc</STRONG> (Thumb, 558 bytes, Stack size 8 bytes, cpu.o(i.cpu_sbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_sbc &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>cpu_sbcindzp</STRONG> (Thumb, 546 bytes, Stack size 4 bytes, cpu.o(i.cpu_sbcindzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_sbcindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>cpu_sbczp</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, cpu.o(i.cpu_sbczp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_sbczp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>cpu_sbczpx</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, cpu.o(i.cpu_sbczpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_sbczpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>cpu_sec</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(i.cpu_sec))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>cpu_sed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(i.cpu_sed))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>cpu_sei</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(i.cpu_sei))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>cpu_sta</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, cpu.o(i.cpu_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_sta
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>cpu_staindzp</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, cpu.o(i.cpu_staindzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_staindzp &rArr; cpu_indzp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_indzp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>cpu_stazp</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cpu.o(i.cpu_stazp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stazp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>cpu_stazpx</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cpu.o(i.cpu_stazpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stazpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>cpu_stx</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, cpu.o(i.cpu_stx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stx
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>cpu_stxzp</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cpu.o(i.cpu_stxzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stxzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>cpu_stxzpy</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cpu.o(i.cpu_stxzpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stxzpy &rArr; cpu_zpy &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>cpu_sty</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, cpu.o(i.cpu_sty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_sty
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>cpu_styzp</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cpu.o(i.cpu_styzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_styzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>cpu_styzpx</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cpu.o(i.cpu_styzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_styzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>cpu_stz</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, cpu.o(i.cpu_stz))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stz
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>cpu_stzzp</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cpu.o(i.cpu_stzzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stzzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>cpu_stzzpx</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cpu.o(i.cpu_stzzpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_stzzpx &rArr; cpu_zpx &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zpx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>cpu_tax</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cpu.o(i.cpu_tax))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>cpu_tay</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cpu.o(i.cpu_tay))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>cpu_trb</STRONG> (Thumb, 1286 bytes, Stack size 16 bytes, cpu.o(i.cpu_trb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_trb &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>cpu_trbzp</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, cpu.o(i.cpu_trbzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_trbzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>cpu_tsb</STRONG> (Thumb, 1272 bytes, Stack size 16 bytes, cpu.o(i.cpu_tsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpu_tsb &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;joypad_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>cpu_tsbzp</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, cpu.o(i.cpu_tsbzp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_tsbzp &rArr; cpu_zp &rArr; joypad_read
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_zp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>cpu_tsx</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cpu.o(i.cpu_tsx))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>cpu_txa</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cpu.o(i.cpu_txa))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>cpu_txs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(i.cpu_txs))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>cpu_tya</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cpu.o(i.cpu_tya))
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 362 bytes, Stack size 4 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[111]"></a>SD_FindSCR</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, stm32f4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
