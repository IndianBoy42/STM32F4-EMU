; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_ll_tim.o --depend=stm32nes\stm32f4xx_ll_tim.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_ll_tim.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_tim.c]
                          THUMB

                          AREA ||i.LL_TIM_BDTR_Init||, CODE, READONLY, ALIGN=1

                  LL_TIM_BDTR_Init PROC
;;;695      */
;;;696    ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
000000  7b0a              LDRB     r2,[r1,#0xc]
;;;697    {
;;;698      uint32_t tmpbdtr = 0;
;;;699    
;;;700      /* Check the parameters */
;;;701      assert_param(IS_TIM_BREAK_INSTANCE(TIMx));
;;;702      assert_param(IS_LL_TIM_OSSR_STATE(TIM_BDTRInitStruct->OSSRState));
;;;703      assert_param(IS_LL_TIM_OSSI_STATE(TIM_BDTRInitStruct->OSSIState));
;;;704      assert_param(IS_LL_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->LockLevel));
;;;705      assert_param(IS_LL_TIM_BREAK_STATE(TIM_BDTRInitStruct->BreakState));
;;;706      assert_param(IS_LL_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->BreakPolarity));
;;;707      assert_param(IS_LL_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->AutomaticOutput));
;;;708    
;;;709      /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;710      the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;711    
;;;712      /* Set the BDTR bits */
;;;713      MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
;;;714      MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
000002  688b              LDR      r3,[r1,#8]
000004  431a              ORRS     r2,r2,r3
;;;715      MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
000006  684b              LDR      r3,[r1,#4]
000008  f4226280          BIC      r2,r2,#0x400
00000c  431a              ORRS     r2,r2,r3
;;;716      MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
00000e  680b              LDR      r3,[r1,#0]
000010  f4226200          BIC      r2,r2,#0x800
000014  431a              ORRS     r2,r2,r3
;;;717      MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
000016  89cb              LDRH     r3,[r1,#0xe]
000018  f4225280          BIC      r2,r2,#0x1000
00001c  431a              ORRS     r2,r2,r3
;;;718      MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
00001e  690b              LDR      r3,[r1,#0x10]
000020  f4225200          BIC      r2,r2,#0x2000
000024  431a              ORRS     r2,r2,r3
;;;719      MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
000026  6949              LDR      r1,[r1,#0x14]
000028  f4224280          BIC      r2,r2,#0x4000
00002c  430a              ORRS     r2,r2,r1
;;;720      MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
00002e  f4224200          BIC      r2,r2,#0x8000
000032  4311              ORRS     r1,r1,r2
;;;721    
;;;722      /* Set TIMx_BDTR */
;;;723      LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
000034  6441              STR      r1,[r0,#0x44]
;;;724    
;;;725      return SUCCESS;
000036  2001              MOVS     r0,#1
;;;726    }
000038  4770              BX       lr
;;;727    /**
                          ENDP


                          AREA ||i.LL_TIM_BDTR_StructInit||, CODE, READONLY, ALIGN=1

                  LL_TIM_BDTR_StructInit PROC
;;;670      */
;;;671    void LL_TIM_BDTR_StructInit(LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
000000  2100              MOVS     r1,#0
;;;672    {
;;;673      /* Set the default configuration */
;;;674      TIM_BDTRInitStruct->OSSRState       = LL_TIM_OSSR_DISABLE;
;;;675      TIM_BDTRInitStruct->OSSIState       = LL_TIM_OSSI_DISABLE;
000002  6001              STR      r1,[r0,#0]
;;;676      TIM_BDTRInitStruct->LockLevel       = LL_TIM_LOCKLEVEL_OFF;
000004  6041              STR      r1,[r0,#4]
;;;677      TIM_BDTRInitStruct->DeadTime        = (uint8_t)0x00U;
000006  6081              STR      r1,[r0,#8]
000008  7301              STRB     r1,[r0,#0xc]
;;;678      TIM_BDTRInitStruct->BreakState      = LL_TIM_BREAK_DISABLE;
00000a  81c1              STRH     r1,[r0,#0xe]
;;;679      TIM_BDTRInitStruct->BreakPolarity   = LL_TIM_BREAK_POLARITY_LOW;
;;;680      TIM_BDTRInitStruct->AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
00000c  6101              STR      r1,[r0,#0x10]
00000e  6141              STR      r1,[r0,#0x14]
;;;681    }
000010  4770              BX       lr
;;;682    
                          ENDP


                          AREA ||i.LL_TIM_DeInit||, CODE, READONLY, ALIGN=2

                  LL_TIM_DeInit PROC
;;;184      */
;;;185    ErrorStatus LL_TIM_DeInit(TIM_TypeDef *TIMx)
000000  2301              MOVS     r3,#1
000002  4a5f              LDR      r2,|L3.384|
;;;186    {
;;;187      ErrorStatus result = SUCCESS;
;;;188    
;;;189      /* Check the parameters */
;;;190      assert_param(IS_TIM_INSTANCE(TIMx));
;;;191    
;;;192      if (TIMx == TIM1)
000004  f1a04180          SUB      r1,r0,#0x40000000
000008  f5b13180          SUBS     r1,r1,#0x10000
00000c  d042              BEQ      |L3.148|
00000e  1f11              SUBS     r1,r2,#4              ;186
;;;193      {
;;;194        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
;;;195        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
;;;196      }
;;;197    #if defined(TIM2)
;;;198      else if (TIMx == TIM2)
000010  f1b04f80          CMP      r0,#0x40000000
000014  d04f              BEQ      |L3.182|
;;;199      {
;;;200        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM2);
;;;201        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM2);
;;;202      }
;;;203    #endif
;;;204    #if defined(TIM3)
;;;205      else if (TIMx == TIM3)
000016  f1a04c80          SUB      r12,r0,#0x40000000
00001a  f5bc6c80          SUBS     r12,r12,#0x400
00001e  d042              BEQ      |L3.166|
;;;206      {
;;;207        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM3);
;;;208        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM3);
;;;209      }
;;;210    #endif
;;;211    #if defined(TIM4)
;;;212      else if (TIMx == TIM4)
000020  f1a04c80          SUB      r12,r0,#0x40000000
000024  f5bc6c00          SUBS     r12,r12,#0x800
000028  d04e              BEQ      |L3.200|
;;;213      {
;;;214        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM4);
;;;215        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM4);
;;;216      }
;;;217    #endif
;;;218    #if defined(TIM5)
;;;219      else if (TIMx == TIM5)
00002a  f1a04c80          SUB      r12,r0,#0x40000000
00002e  f5bc6c40          SUBS     r12,r12,#0xc00
000032  d052              BEQ      |L3.218|
;;;220      {
;;;221        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM5);
;;;222        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM5);
;;;223      }
;;;224    #endif
;;;225    #if defined(TIM6)
;;;226      else if (TIMx == TIM6)
000034  f1a04c80          SUB      r12,r0,#0x40000000
000038  f5bc5c80          SUBS     r12,r12,#0x1000
00003c  d055              BEQ      |L3.234|
;;;227      {
;;;228        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM6);
;;;229        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM6);
;;;230      }
;;;231    #endif
;;;232    #if defined (TIM7)
;;;233      else if (TIMx == TIM7)
00003e  f1a04c80          SUB      r12,r0,#0x40000000
000042  f5bc5ca0          SUBS     r12,r12,#0x1400
000046  d058              BEQ      |L3.250|
;;;234      {
;;;235        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM7);
;;;236        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM7);
;;;237      }
;;;238    #endif
;;;239    #if defined(TIM8)
;;;240      else if (TIMx == TIM8)
000048  f1a04c80          SUB      r12,r0,#0x40000000
00004c  f5bc3c82          SUBS     r12,r12,#0x10400
000050  d05b              BEQ      |L3.266|
;;;241      {
;;;242        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM8);
;;;243        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM8);
;;;244      }
;;;245    #endif
;;;246    #if defined(TIM9)
;;;247      else if (TIMx == TIM9)
000052  f1a04c80          SUB      r12,r0,#0x40000000
000056  f5bc3ca0          SUBS     r12,r12,#0x14000
00005a  d05e              BEQ      |L3.282|
;;;248      {
;;;249        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM9);
;;;250        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM9);
;;;251      }
;;;252    #endif
;;;253    #if defined(TIM10)
;;;254      else if (TIMx == TIM10)
00005c  f1a04c80          SUB      r12,r0,#0x40000000
000060  f5bc3ca2          SUBS     r12,r12,#0x14400
000064  d063              BEQ      |L3.302|
;;;255      {
;;;256        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM10);
;;;257        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM10);
;;;258      }
;;;259    #endif
;;;260    #if defined(TIM11)
;;;261      else if (TIMx == TIM11)
000066  f1a04c80          SUB      r12,r0,#0x40000000
00006a  f5bc3ca4          SUBS     r12,r12,#0x14800
00006e  d066              BEQ      |L3.318|
;;;262      {
;;;263        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM11);
;;;264        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM11);
;;;265      }
;;;266    #endif
;;;267    #if defined(TIM12)
;;;268      else if (TIMx == TIM12)
000070  f1a04280          SUB      r2,r0,#0x40000000
000074  f5b252c0          SUBS     r2,r2,#0x1800
000078  d069              BEQ      |L3.334|
;;;269      {
;;;270        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM12);
;;;271        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM12);
;;;272      }
;;;273    #endif
;;;274    #if defined(TIM13)
;;;275      else if (TIMx == TIM13)
00007a  f1a04280          SUB      r2,r0,#0x40000000
00007e  f5b252e0          SUBS     r2,r2,#0x1c00
000082  d06c              BEQ      |L3.350|
;;;276      {
;;;277        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM13);
;;;278        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM13);
;;;279      }
;;;280    #endif
;;;281    #if defined(TIM14)
;;;282      else if (TIMx == TIM14)
000084  f1a04280          SUB      r2,r0,#0x40000000
000088  f5b25200          SUBS     r2,r2,#0x2000
;;;283      {
;;;284        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM14);
;;;285        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM14);
;;;286      }
;;;287    #endif
;;;288      else
;;;289      {
;;;290        result = ERROR;
00008c  bf18              IT       NE
00008e  2300              MOVNE    r3,#0
000090  d06d              BEQ      |L3.366|
000092  e04a              B        |L3.298|
                  |L3.148|
000094  6810              LDR      r0,[r2,#0]            ;282
000096  f0400001          ORR      r0,r0,#1              ;282
00009a  6010              STR      r0,[r2,#0]            ;282
00009c  6810              LDR      r0,[r2,#0]            ;282
00009e  f0200001          BIC      r0,r0,#1              ;282
0000a2  6010              STR      r0,[r2,#0]            ;282
0000a4  e041              B        |L3.298|
                  |L3.166|
0000a6  6808              LDR      r0,[r1,#0]            ;195
0000a8  f0400002          ORR      r0,r0,#2              ;195
0000ac  6008              STR      r0,[r1,#0]            ;195
0000ae  6808              LDR      r0,[r1,#0]            ;195
0000b0  f0200002          BIC      r0,r0,#2              ;195
0000b4  e00f              B        |L3.214|
                  |L3.182|
0000b6  6808              LDR      r0,[r1,#0]            ;208
0000b8  f0400001          ORR      r0,r0,#1              ;208
0000bc  6008              STR      r0,[r1,#0]            ;208
0000be  6808              LDR      r0,[r1,#0]            ;208
0000c0  f0200001          BIC      r0,r0,#1              ;208
0000c4  6008              STR      r0,[r1,#0]            ;208
0000c6  e030              B        |L3.298|
                  |L3.200|
0000c8  6808              LDR      r0,[r1,#0]            ;201
0000ca  f0400004          ORR      r0,r0,#4              ;201
0000ce  6008              STR      r0,[r1,#0]            ;201
0000d0  6808              LDR      r0,[r1,#0]            ;201
0000d2  f0200004          BIC      r0,r0,#4              ;201
                  |L3.214|
0000d6  6008              STR      r0,[r1,#0]            ;201
0000d8  e027              B        |L3.298|
                  |L3.218|
0000da  6808              LDR      r0,[r1,#0]            ;201
0000dc  f0400008          ORR      r0,r0,#8              ;201
0000e0  6008              STR      r0,[r1,#0]            ;201
0000e2  6808              LDR      r0,[r1,#0]            ;201
0000e4  f0200008          BIC      r0,r0,#8              ;201
0000e8  e7f5              B        |L3.214|
                  |L3.234|
0000ea  6808              LDR      r0,[r1,#0]            ;222
0000ec  f0400010          ORR      r0,r0,#0x10           ;222
0000f0  6008              STR      r0,[r1,#0]            ;222
0000f2  6808              LDR      r0,[r1,#0]            ;222
0000f4  f0200010          BIC      r0,r0,#0x10           ;222
0000f8  e7ed              B        |L3.214|
                  |L3.250|
0000fa  6808              LDR      r0,[r1,#0]            ;229
0000fc  f0400020          ORR      r0,r0,#0x20           ;229
000100  6008              STR      r0,[r1,#0]            ;229
000102  6808              LDR      r0,[r1,#0]            ;229
000104  f0200020          BIC      r0,r0,#0x20           ;229
000108  e7e5              B        |L3.214|
                  |L3.266|
00010a  6810              LDR      r0,[r2,#0]            ;236
00010c  f0400002          ORR      r0,r0,#2              ;236
000110  6010              STR      r0,[r2,#0]            ;236
000112  6810              LDR      r0,[r2,#0]            ;236
000114  f0200002          BIC      r0,r0,#2              ;236
000118  e006              B        |L3.296|
                  |L3.282|
00011a  6810              LDR      r0,[r2,#0]            ;243
00011c  f4403080          ORR      r0,r0,#0x10000        ;243
000120  6010              STR      r0,[r2,#0]            ;243
000122  6810              LDR      r0,[r2,#0]            ;243
000124  f4203080          BIC      r0,r0,#0x10000        ;243
                  |L3.296|
000128  6010              STR      r0,[r2,#0]            ;243
                  |L3.298|
;;;291      }
;;;292    
;;;293      return result;
00012a  4618              MOV      r0,r3
;;;294    }
00012c  4770              BX       lr
                  |L3.302|
00012e  6810              LDR      r0,[r2,#0]
000130  f4403000          ORR      r0,r0,#0x20000
000134  6010              STR      r0,[r2,#0]
000136  6810              LDR      r0,[r2,#0]
000138  f4203000          BIC      r0,r0,#0x20000
00013c  e7f4              B        |L3.296|
                  |L3.318|
00013e  6810              LDR      r0,[r2,#0]            ;257
000140  f4402080          ORR      r0,r0,#0x40000        ;257
000144  6010              STR      r0,[r2,#0]            ;257
000146  6810              LDR      r0,[r2,#0]            ;257
000148  f4202080          BIC      r0,r0,#0x40000        ;257
00014c  e7ec              B        |L3.296|
                  |L3.334|
00014e  6808              LDR      r0,[r1,#0]            ;264
000150  f0400040          ORR      r0,r0,#0x40           ;264
000154  6008              STR      r0,[r1,#0]            ;264
000156  6808              LDR      r0,[r1,#0]            ;264
000158  f0200040          BIC      r0,r0,#0x40           ;264
00015c  e7bb              B        |L3.214|
                  |L3.350|
00015e  6808              LDR      r0,[r1,#0]            ;271
000160  f0400080          ORR      r0,r0,#0x80           ;271
000164  6008              STR      r0,[r1,#0]            ;271
000166  6808              LDR      r0,[r1,#0]            ;271
000168  f0200080          BIC      r0,r0,#0x80           ;271
00016c  e7b3              B        |L3.214|
                  |L3.366|
00016e  6808              LDR      r0,[r1,#0]            ;278
000170  f4407080          ORR      r0,r0,#0x100          ;278
000174  6008              STR      r0,[r1,#0]            ;278
000176  6808              LDR      r0,[r1,#0]            ;278
000178  f4207080          BIC      r0,r0,#0x100          ;278
00017c  e7ab              B        |L3.214|
;;;295    
                          ENDP

00017e  0000              DCW      0x0000
                  |L3.384|
                          DCD      0x40023824

                          AREA ||i.LL_TIM_ENCODER_Init||, CODE, READONLY, ALIGN=1

                  LL_TIM_ENCODER_Init PROC
;;;501      */
;;;502    ErrorStatus LL_TIM_ENCODER_Init(TIM_TypeDef *TIMx, LL_TIM_ENCODER_InitTypeDef *TIM_EncoderInitStruct)
000000  6a02              LDR      r2,[r0,#0x20]
;;;503    {
;;;504      uint32_t tmpccmr1 = 0U;
;;;505      uint32_t tmpccer = 0U;
;;;506    
;;;507      /* Check the parameters */
;;;508      assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx));
;;;509      assert_param(IS_LL_TIM_ENCODERMODE(TIM_EncoderInitStruct->EncoderMode));
;;;510      assert_param(IS_LL_TIM_IC_POLARITY_ENCODER(TIM_EncoderInitStruct->IC1Polarity));
;;;511      assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_EncoderInitStruct->IC1ActiveInput));
;;;512      assert_param(IS_LL_TIM_ICPSC(TIM_EncoderInitStruct->IC1Prescaler));
;;;513      assert_param(IS_LL_TIM_IC_FILTER(TIM_EncoderInitStruct->IC1Filter));
;;;514      assert_param(IS_LL_TIM_IC_POLARITY_ENCODER(TIM_EncoderInitStruct->IC2Polarity));
;;;515      assert_param(IS_LL_TIM_ACTIVEINPUT(TIM_EncoderInitStruct->IC2ActiveInput));
;;;516      assert_param(IS_LL_TIM_ICPSC(TIM_EncoderInitStruct->IC2Prescaler));
;;;517      assert_param(IS_LL_TIM_IC_FILTER(TIM_EncoderInitStruct->IC2Filter));
;;;518    
;;;519      /* Disable the CC1 and CC2: Reset the CC1E and CC2E Bits */
;;;520      TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
000002  f0220211          BIC      r2,r2,#0x11
000006  6202              STR      r2,[r0,#0x20]
;;;521    
;;;522      /* Get the TIMx CCMR1 register value */
;;;523      tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
000008  6983              LDR      r3,[r0,#0x18]
;;;524    
;;;525      /* Get the TIMx CCER register value */
;;;526      tmpccer = LL_TIM_ReadReg(TIMx, CCER);
00000a  6a02              LDR      r2,[r0,#0x20]
;;;527    
;;;528      /* Configure TI1 */
;;;529      tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
;;;530      tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1ActiveInput >> 16U);
00000c  f8d1c008          LDR      r12,[r1,#8]
000010  f02303ff          BIC      r3,r3,#0xff           ;529
000014  ea43431c          ORR      r3,r3,r12,LSR #16
;;;531      tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Filter >> 16U);
000018  f8d1c010          LDR      r12,[r1,#0x10]
;;;532      tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC1Prescaler >> 16U);
;;;533    
;;;534      /* Configure TI2 */
;;;535      tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC2S | TIM_CCMR1_IC2F  | TIM_CCMR1_IC2PSC);
;;;536      tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2ActiveInput >> 8U);
;;;537      tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Filter >> 8U);
;;;538      tmpccmr1 |= (uint32_t)(TIM_EncoderInitStruct->IC2Prescaler >> 8U);
;;;539    
;;;540      /* Set TI1 and TI2 polarity and enable TI1 and TI2 */
;;;541      tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
00001c  f02202aa          BIC      r2,r2,#0xaa
000020  ea43431c          ORR      r3,r3,r12,LSR #16     ;531
000024  f8d1c00c          LDR      r12,[r1,#0xc]         ;532
000028  ea43431c          ORR      r3,r3,r12,LSR #16     ;532
00002c  f8d1c018          LDR      r12,[r1,#0x18]        ;536
000030  f423437f          BIC      r3,r3,#0xff00         ;535
000034  ea43231c          ORR      r3,r3,r12,LSR #8      ;536
000038  f8d1c020          LDR      r12,[r1,#0x20]        ;537
00003c  ea43231c          ORR      r3,r3,r12,LSR #8      ;537
000040  f8d1c01c          LDR      r12,[r1,#0x1c]        ;538
000044  ea43231c          ORR      r3,r3,r12,LSR #8      ;538
;;;542      tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC1Polarity);
000048  f8d1c004          LDR      r12,[r1,#4]
00004c  ea4c0202          ORR      r2,r12,r2
;;;543      tmpccer |= (uint32_t)(TIM_EncoderInitStruct->IC2Polarity << 4U);
000050  f8d1c014          LDR      r12,[r1,#0x14]
;;;544      tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
;;;545    
;;;546      /* Set encoder mode */
;;;547      LL_TIM_SetEncoderMode(TIMx, TIM_EncoderInitStruct->EncoderMode);
000054  6809              LDR      r1,[r1,#0]
000056  ea42120c          ORR      r2,r2,r12,LSL #4      ;543
00005a  f8d0c008          LDR      r12,[r0,#8]           ;543
00005e  f0420211          ORR      r2,r2,#0x11           ;544
000062  f02c0c07          BIC      r12,r12,#7            ;544
000066  ea4c0101          ORR      r1,r12,r1             ;544
00006a  6081              STR      r1,[r0,#8]            ;544
;;;548    
;;;549      /* Write to TIMx CCMR1 */
;;;550      LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
00006c  6183              STR      r3,[r0,#0x18]
;;;551    
;;;552      /* Write to TIMx CCER */
;;;553      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
00006e  6202              STR      r2,[r0,#0x20]
;;;554    
;;;555      return SUCCESS;
000070  2001              MOVS     r0,#1
;;;556    }
000072  4770              BX       lr
;;;557    
                          ENDP


                          AREA ||i.LL_TIM_ENCODER_StructInit||, CODE, READONLY, ALIGN=1

                  LL_TIM_ENCODER_StructInit PROC
;;;479      */
;;;480    void LL_TIM_ENCODER_StructInit(LL_TIM_ENCODER_InitTypeDef *TIM_EncoderInitStruct)
000000  2101              MOVS     r1,#1
;;;481    {
;;;482      /* Set the default configuration */
;;;483      TIM_EncoderInitStruct->EncoderMode    = LL_TIM_ENCODERMODE_X2_TI1;
;;;484      TIM_EncoderInitStruct->IC1Polarity    = LL_TIM_IC_POLARITY_RISING;
000002  6001              STR      r1,[r0,#0]
000004  2100              MOVS     r1,#0
;;;485      TIM_EncoderInitStruct->IC1ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
000006  f44f3280          MOV      r2,#0x10000
00000a  e9c01201          STRD     r1,r2,[r0,#4]
;;;486      TIM_EncoderInitStruct->IC1Prescaler   = LL_TIM_ICPSC_DIV1;
;;;487      TIM_EncoderInitStruct->IC1Filter      = LL_TIM_IC_FILTER_FDIV1;
00000e  60c1              STR      r1,[r0,#0xc]
000010  6101              STR      r1,[r0,#0x10]
000012  e9c01205          STRD     r1,r2,[r0,#0x14]
;;;488      TIM_EncoderInitStruct->IC2Polarity    = LL_TIM_IC_POLARITY_RISING;
;;;489      TIM_EncoderInitStruct->IC2ActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
;;;490      TIM_EncoderInitStruct->IC2Prescaler   = LL_TIM_ICPSC_DIV1;
;;;491      TIM_EncoderInitStruct->IC2Filter      = LL_TIM_IC_FILTER_FDIV1;
000016  61c1              STR      r1,[r0,#0x1c]
000018  6201              STR      r1,[r0,#0x20]
;;;492    }
00001a  4770              BX       lr
;;;493    
                          ENDP


                          AREA ||i.LL_TIM_HALLSENSOR_Init||, CODE, READONLY, ALIGN=1

                  LL_TIM_HALLSENSOR_Init PROC
;;;592      */
;;;593    ErrorStatus LL_TIM_HALLSENSOR_Init(TIM_TypeDef *TIMx, LL_TIM_HALLSENSOR_InitTypeDef *TIM_HallSensorInitStruct)
000000  b430              PUSH     {r4,r5}
;;;594    {
;;;595      uint32_t tmpcr2 = 0U;
;;;596      uint32_t tmpccmr1 = 0U;
;;;597      uint32_t tmpccer = 0U;
;;;598      uint32_t tmpsmcr = 0U;
;;;599    
;;;600      /* Check the parameters */
;;;601      assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(TIMx));
;;;602      assert_param(IS_LL_TIM_IC_POLARITY_ENCODER(TIM_HallSensorInitStruct->IC1Polarity));
;;;603      assert_param(IS_LL_TIM_ICPSC(TIM_HallSensorInitStruct->IC1Prescaler));
;;;604      assert_param(IS_LL_TIM_IC_FILTER(TIM_HallSensorInitStruct->IC1Filter));
;;;605    
;;;606      /* Disable the CC1 and CC2: Reset the CC1E and CC2E Bits */
;;;607      TIMx->CCER &= (uint32_t)~(TIM_CCER_CC1E | TIM_CCER_CC2E);
000002  6a02              LDR      r2,[r0,#0x20]
000004  f0220211          BIC      r2,r2,#0x11
000008  6202              STR      r2,[r0,#0x20]
;;;608    
;;;609      /* Get the TIMx CR2 register value */
;;;610      tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
00000a  6842              LDR      r2,[r0,#4]
;;;611    
;;;612      /* Get the TIMx CCMR1 register value */
;;;613      tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
00000c  6984              LDR      r4,[r0,#0x18]
;;;614    
;;;615      /* Get the TIMx CCER register value */
;;;616      tmpccer = LL_TIM_ReadReg(TIMx, CCER);
00000e  6a03              LDR      r3,[r0,#0x20]
;;;617    
;;;618      /* Get the TIMx SMCR register value */
;;;619      tmpsmcr = LL_TIM_ReadReg(TIMx, SMCR);
000010  f8d0c008          LDR      r12,[r0,#8]
;;;620    
;;;621      /* Connect TIMx_CH1, CH2 and CH3 pins to the TI1 input */
;;;622      tmpcr2 |= TIM_CR2_TI1S;
;;;623    
;;;624      /* OC2REF signal is used as trigger output (TRGO) */
;;;625      tmpcr2 |= LL_TIM_TRGO_OC2REF;
;;;626    
;;;627      /* Configure the slave mode controller */
;;;628      tmpsmcr &= (uint32_t)~(TIM_SMCR_TS | TIM_SMCR_SMS);
;;;629      tmpsmcr |= LL_TIM_TS_TI1F_ED;
;;;630      tmpsmcr |= LL_TIM_SLAVEMODE_RESET;
;;;631    
;;;632      /* Configure input channel 1 */
;;;633      tmpccmr1 &= (uint32_t)~(TIM_CCMR1_CC1S | TIM_CCMR1_IC1F  | TIM_CCMR1_IC1PSC);
000014  f02404ff          BIC      r4,r4,#0xff
;;;634      tmpccmr1 |= (uint32_t)(LL_TIM_ACTIVEINPUT_TRC >> 16U);
;;;635      tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Filter >> 16U);
000018  688d              LDR      r5,[r1,#8]
00001a  f0440403          ORR      r4,r4,#3              ;634
00001e  ea444415          ORR      r4,r4,r5,LSR #16
;;;636      tmpccmr1 |= (uint32_t)(TIM_HallSensorInitStruct->IC1Prescaler >> 16U);
000022  684d              LDR      r5,[r1,#4]
;;;637    
;;;638      /* Configure input channel 2 */
;;;639      tmpccmr1 &= (uint32_t)~(TIM_CCMR1_OC2M | TIM_CCMR1_OC2FE  | TIM_CCMR1_OC2PE  | TIM_CCMR1_OC2CE);
;;;640      tmpccmr1 |= (uint32_t)(LL_TIM_OCMODE_PWM2 << 8U);
;;;641    
;;;642      /* Set Channel 1 polarity and enable Channel 1 and Channel2 */
;;;643      tmpccer &= (uint32_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC2NP);
000024  f02303aa          BIC      r3,r3,#0xaa
000028  ea444415          ORR      r4,r4,r5,LSR #16      ;636
;;;644      tmpccer |= (uint32_t)(TIM_HallSensorInitStruct->IC1Polarity);
00002c  680d              LDR      r5,[r1,#0]
00002e  f04202d0          ORR      r2,r2,#0xd0           ;625
000032  f02c0c77          BIC      r12,r12,#0x77         ;628
000036  f424447c          BIC      r4,r4,#0xfc00         ;639
00003a  432b              ORRS     r3,r3,r5
00003c  f04c0c44          ORR      r12,r12,#0x44         ;630
000040  f44444e0          ORR      r4,r4,#0x7000         ;640
;;;645      tmpccer |= (uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E);
000044  f0430311          ORR      r3,r3,#0x11
;;;646    
;;;647      /* Write to TIMx CR2 */
;;;648      LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
000048  6042              STR      r2,[r0,#4]
;;;649    
;;;650      /* Write to TIMx SMCR */
;;;651      LL_TIM_WriteReg(TIMx, SMCR, tmpsmcr);
00004a  f8c0c008          STR      r12,[r0,#8]
;;;652    
;;;653      /* Write to TIMx CCMR1 */
;;;654      LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
00004e  6184              STR      r4,[r0,#0x18]
;;;655    
;;;656      /* Write to TIMx CCER */
;;;657      LL_TIM_WriteReg(TIMx, CCER, tmpccer);
000050  6203              STR      r3,[r0,#0x20]
;;;658    
;;;659      /* Write to TIMx CCR2 */
;;;660      LL_TIM_OC_SetCompareCH2(TIMx, TIM_HallSensorInitStruct->CommutationDelay);
000052  68c9              LDR      r1,[r1,#0xc]
000054  6381              STR      r1,[r0,#0x38]
;;;661    
;;;662      return SUCCESS;
;;;663    }
000056  bc30              POP      {r4,r5}
000058  2001              MOVS     r0,#1                 ;662
00005a  4770              BX       lr
;;;664    
                          ENDP


                          AREA ||i.LL_TIM_HALLSENSOR_StructInit||, CODE, READONLY, ALIGN=1

                  LL_TIM_HALLSENSOR_StructInit PROC
;;;563      */
;;;564    void LL_TIM_HALLSENSOR_StructInit(LL_TIM_HALLSENSOR_InitTypeDef *TIM_HallSensorInitStruct)
000000  2100              MOVS     r1,#0
;;;565    {
;;;566      /* Set the default configuration */
;;;567      TIM_HallSensorInitStruct->IC1Polarity       = LL_TIM_IC_POLARITY_RISING;
;;;568      TIM_HallSensorInitStruct->IC1Prescaler      = LL_TIM_ICPSC_DIV1;
000002  6001              STR      r1,[r0,#0]
;;;569      TIM_HallSensorInitStruct->IC1Filter         = LL_TIM_IC_FILTER_FDIV1;
000004  6041              STR      r1,[r0,#4]
;;;570      TIM_HallSensorInitStruct->CommutationDelay  = 0U;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;571    }
00000a  4770              BX       lr
;;;572    
                          ENDP


                          AREA ||i.LL_TIM_IC_Init||, CODE, READONLY, ALIGN=1

                  LL_TIM_IC_Init PROC
;;;449      */
;;;450    ErrorStatus LL_TIM_IC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_IC_InitTypeDef *TIM_IC_InitStruct)
000000  2300              MOVS     r3,#0
;;;451    {
000002  f04f0c01          MOV      r12,#1
;;;452      ErrorStatus result = ERROR;
;;;453    
;;;454      switch (Channel)
000006  2901              CMP      r1,#1
000008  d008              BEQ      |L8.28|
00000a  2910              CMP      r1,#0x10
00000c  d01f              BEQ      |L8.78|
00000e  f5b17f80          CMP      r1,#0x100
000012  d036              BEQ      |L8.130|
000014  f5b15f80          CMP      r1,#0x1000
000018  d04d              BEQ      |L8.182|
00001a  e065              B        |L8.232|
                  |L8.28|
00001c  6a01              LDR      r1,[r0,#0x20]
00001e  f0210101          BIC      r1,r1,#1
000022  6201              STR      r1,[r0,#0x20]
000024  68d3              LDR      r3,[r2,#0xc]
000026  6851              LDR      r1,[r2,#4]
000028  4319              ORRS     r1,r1,r3
00002a  6893              LDR      r3,[r2,#8]
00002c  4319              ORRS     r1,r1,r3
00002e  6983              LDR      r3,[r0,#0x18]
000030  f02303ff          BIC      r3,r3,#0xff
000034  ea434111          ORR      r1,r3,r1,LSR #16
000038  6181              STR      r1,[r0,#0x18]
00003a  6811              LDR      r1,[r2,#0]
00003c  6a02              LDR      r2,[r0,#0x20]
00003e  f022020a          BIC      r2,r2,#0xa
000042  f0420201          ORR      r2,r2,#1
000046  4311              ORRS     r1,r1,r2
000048  6201              STR      r1,[r0,#0x20]
00004a  4663              MOV      r3,r12
;;;455      {
;;;456        case LL_TIM_CHANNEL_CH1:
;;;457          result = IC1Config(TIMx, TIM_IC_InitStruct);
;;;458          break;
00004c  e04c              B        |L8.232|
                  |L8.78|
00004e  6a01              LDR      r1,[r0,#0x20]
000050  f0210110          BIC      r1,r1,#0x10
000054  6201              STR      r1,[r0,#0x20]
000056  68d3              LDR      r3,[r2,#0xc]
000058  6851              LDR      r1,[r2,#4]
00005a  4319              ORRS     r1,r1,r3
00005c  6893              LDR      r3,[r2,#8]
00005e  4319              ORRS     r1,r1,r3
000060  6983              LDR      r3,[r0,#0x18]
000062  f423437f          BIC      r3,r3,#0xff00
000066  ea432111          ORR      r1,r3,r1,LSR #8
00006a  6181              STR      r1,[r0,#0x18]
00006c  6a01              LDR      r1,[r0,#0x20]
00006e  6812              LDR      r2,[r2,#0]
000070  f02101a0          BIC      r1,r1,#0xa0
000074  ea411102          ORR      r1,r1,r2,LSL #4
000078  f0410110          ORR      r1,r1,#0x10
00007c  6201              STR      r1,[r0,#0x20]
00007e  4663              MOV      r3,r12
;;;459        case LL_TIM_CHANNEL_CH2:
;;;460          result = IC2Config(TIMx, TIM_IC_InitStruct);
;;;461          break;
000080  e032              B        |L8.232|
                  |L8.130|
000082  6a01              LDR      r1,[r0,#0x20]
000084  f4217180          BIC      r1,r1,#0x100
000088  6201              STR      r1,[r0,#0x20]
00008a  68d3              LDR      r3,[r2,#0xc]
00008c  6851              LDR      r1,[r2,#4]
00008e  4319              ORRS     r1,r1,r3
000090  6893              LDR      r3,[r2,#8]
000092  4319              ORRS     r1,r1,r3
000094  69c3              LDR      r3,[r0,#0x1c]
000096  f02303ff          BIC      r3,r3,#0xff
00009a  ea434111          ORR      r1,r3,r1,LSR #16
00009e  61c1              STR      r1,[r0,#0x1c]
0000a0  6a01              LDR      r1,[r0,#0x20]
0000a2  6812              LDR      r2,[r2,#0]
0000a4  f4216120          BIC      r1,r1,#0xa00
0000a8  ea412102          ORR      r1,r1,r2,LSL #8
0000ac  f4417180          ORR      r1,r1,#0x100
0000b0  6201              STR      r1,[r0,#0x20]
0000b2  4663              MOV      r3,r12
;;;462        case LL_TIM_CHANNEL_CH3:
;;;463          result = IC3Config(TIMx, TIM_IC_InitStruct);
;;;464          break;
0000b4  e018              B        |L8.232|
                  |L8.182|
0000b6  6a01              LDR      r1,[r0,#0x20]
0000b8  f4215180          BIC      r1,r1,#0x1000
0000bc  6201              STR      r1,[r0,#0x20]
0000be  68d3              LDR      r3,[r2,#0xc]
0000c0  6851              LDR      r1,[r2,#4]
0000c2  4319              ORRS     r1,r1,r3
0000c4  6893              LDR      r3,[r2,#8]
0000c6  4319              ORRS     r1,r1,r3
0000c8  69c3              LDR      r3,[r0,#0x1c]
0000ca  f423437f          BIC      r3,r3,#0xff00
0000ce  ea432111          ORR      r1,r3,r1,LSR #8
0000d2  61c1              STR      r1,[r0,#0x1c]
0000d4  6a01              LDR      r1,[r0,#0x20]
0000d6  6812              LDR      r2,[r2,#0]
0000d8  f4214120          BIC      r1,r1,#0xa000
0000dc  ea413102          ORR      r1,r1,r2,LSL #12
0000e0  f4415180          ORR      r1,r1,#0x1000
0000e4  6201              STR      r1,[r0,#0x20]
0000e6  4663              MOV      r3,r12
                  |L8.232|
;;;465        case LL_TIM_CHANNEL_CH4:
;;;466          result = IC4Config(TIMx, TIM_IC_InitStruct);
;;;467          break;
;;;468        default:
;;;469          break;
;;;470      }
;;;471    
;;;472      return result;
0000e8  4618              MOV      r0,r3
;;;473    }
0000ea  4770              BX       lr
;;;474    
                          ENDP


                          AREA ||i.LL_TIM_IC_StructInit||, CODE, READONLY, ALIGN=1

                  LL_TIM_IC_StructInit PROC
;;;427      */
;;;428    void LL_TIM_IC_StructInit(LL_TIM_IC_InitTypeDef *TIM_ICInitStruct)
000000  2100              MOVS     r1,#0
;;;429    {
;;;430      /* Set the default configuration */
;;;431      TIM_ICInitStruct->ICPolarity    = LL_TIM_IC_POLARITY_RISING;
;;;432      TIM_ICInitStruct->ICActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
000002  f44f3280          MOV      r2,#0x10000
000006  e9c01200          STRD     r1,r2,[r0,#0]
;;;433      TIM_ICInitStruct->ICPrescaler   = LL_TIM_ICPSC_DIV1;
;;;434      TIM_ICInitStruct->ICFilter      = LL_TIM_IC_FILTER_FDIV1;
00000a  6081              STR      r1,[r0,#8]
00000c  60c1              STR      r1,[r0,#0xc]
;;;435    }
00000e  4770              BX       lr
;;;436    
                          ENDP


                          AREA ||i.LL_TIM_Init||, CODE, READONLY, ALIGN=2

                  LL_TIM_Init PROC
;;;319      */
;;;320    ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
000000  b4f0              PUSH     {r4-r7}
;;;321    {
;;;322      uint32_t tmpcr1 = 0U;
;;;323    
;;;324      /* Check the parameters */
;;;325      assert_param(IS_TIM_INSTANCE(TIMx));
;;;326      assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
;;;327      assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
;;;328    
;;;329      tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
000002  6802              LDR      r2,[r0,#0]
;;;330    
;;;331      if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
000004  4b2c              LDR      r3,|L10.184|
000006  4c2d              LDR      r4,|L10.188|
000008  4d2d              LDR      r5,|L10.192|
00000a  4e2e              LDR      r6,|L10.196|
00000c  f8dfc0b8          LDR      r12,|L10.200|
000010  4298              CMP      r0,r3
000012  bf18              IT       NE
000014  f1b04f80          CMPNE    r0,#0x40000000
000018  d007              BEQ      |L10.42|
00001a  42a0              CMP      r0,r4
00001c  bf18              IT       NE
00001e  42a8              CMPNE    r0,r5
000020  d003              BEQ      |L10.42|
000022  42b0              CMP      r0,r6
000024  bf18              IT       NE
000026  4560              CMPNE    r0,r12
000028  d104              BNE      |L10.52|
                  |L10.42|
;;;332      {
;;;333        /* Select the Counter Mode */
;;;334        MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
00002a  684f              LDR      r7,[r1,#4]
00002c  f0220270          BIC      r2,r2,#0x70
000030  ea420207          ORR      r2,r2,r7
                  |L10.52|
;;;335      }
;;;336    
;;;337      if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
000034  4298              CMP      r0,r3
000036  bf18              IT       NE
000038  f1b04f80          CMPNE    r0,#0x40000000
00003c  d025              BEQ      |L10.138|
00003e  42a0              CMP      r0,r4
000040  bf18              IT       NE
000042  42a8              CMPNE    r0,r5
000044  d021              BEQ      |L10.138|
000046  42b0              CMP      r0,r6
000048  bf18              IT       NE
00004a  4560              CMPNE    r0,r12
00004c  d01d              BEQ      |L10.138|
00004e  f1a04480          SUB      r4,r0,#0x40000000
000052  f5b434a0          SUBS     r4,r4,#0x14000
000056  bf1c              ITT      NE
000058  f1a04480          SUBNE    r4,r0,#0x40000000
00005c  f5b434a2          SUBSNE   r4,r4,#0x14400
000060  d013              BEQ      |L10.138|
000062  f1a04480          SUB      r4,r0,#0x40000000
000066  f5b434a4          SUBS     r4,r4,#0x14800
00006a  bf1c              ITT      NE
00006c  f1a04480          SUBNE    r4,r0,#0x40000000
000070  f5b454c0          SUBSNE   r4,r4,#0x1800
000074  d009              BEQ      |L10.138|
000076  f1a04480          SUB      r4,r0,#0x40000000
00007a  f5b454e0          SUBS     r4,r4,#0x1c00
00007e  bf1c              ITT      NE
000080  f1a04480          SUBNE    r4,r0,#0x40000000
000084  f5b45400          SUBSNE   r4,r4,#0x2000
000088  d103              BNE      |L10.146|
                  |L10.138|
;;;338      {
;;;339        /* Set the clock division */
;;;340        MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
00008a  68cc              LDR      r4,[r1,#0xc]
00008c  f4227240          BIC      r2,r2,#0x300
000090  4322              ORRS     r2,r2,r4
                  |L10.146|
;;;341      }
;;;342    
;;;343      /* Write to TIMx CR1 */
;;;344      LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
000092  6002              STR      r2,[r0,#0]
000094  688a              LDR      r2,[r1,#8]
000096  62c2              STR      r2,[r0,#0x2c]
;;;345    
;;;346      /* Set the Autoreload value */
;;;347      LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
;;;348    
;;;349      /* Set the Prescaler value */
;;;350      LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
000098  880a              LDRH     r2,[r1,#0]
00009a  6282              STR      r2,[r0,#0x28]
;;;351    
;;;352      if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
00009c  4298              CMP      r0,r3
00009e  bf12              ITEE     NE
0000a0  4560              CMPNE    r0,r12
;;;353      {
;;;354        /* Set the Repetition Counter value */
;;;355        LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
0000a2  7c09              LDRBEQ   r1,[r1,#0x10]
0000a4  6301              STREQ    r1,[r0,#0x30]
0000a6  6941              LDR      r1,[r0,#0x14]
0000a8  f0410101          ORR      r1,r1,#1
0000ac  6141              STR      r1,[r0,#0x14]
;;;356      }
;;;357    
;;;358      /* Generate an update event to reload the Prescaler
;;;359         and the repetition counter value (if applicable) immediately */
;;;360      LL_TIM_GenerateEvent_UPDATE(TIMx);
;;;361    
;;;362      return SUCCESS;
;;;363    }
0000ae  bcf0              POP      {r4-r7}
0000b0  f04f0001          MOV      r0,#1                 ;362
0000b4  4770              BX       lr
;;;364    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L10.184|
                          DCD      0x40010000
                  |L10.188|
                          DCD      0x40000400
                  |L10.192|
                          DCD      0x40000800
                  |L10.196|
                          DCD      0x40000c00
                  |L10.200|
                          DCD      0x40010400

                          AREA ||i.LL_TIM_OC_Init||, CODE, READONLY, ALIGN=2

                  LL_TIM_OC_Init PROC
;;;396      */
;;;397    ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
000000  b4f0              PUSH     {r4-r7}
;;;398    {
;;;399      ErrorStatus result = ERROR;
000002  2500              MOVS     r5,#0
000004  2301              MOVS     r3,#1                 ;398
000006  f8dfc1b8          LDR      r12,|L11.448|
00000a  4c6e              LDR      r4,|L11.452|
;;;400    
;;;401      switch (Channel)
00000c  2901              CMP      r1,#1
00000e  d009              BEQ      |L11.36|
000010  2910              CMP      r1,#0x10
000012  d03b              BEQ      |L11.140|
000014  f5b17f80          CMP      r1,#0x100
000018  d071              BEQ      |L11.254|
00001a  f5b15f80          CMP      r1,#0x1000
00001e  d06d              BEQ      |L11.252|
000020  f000b8ca          B.W      |L11.440|
                  |L11.36|
000024  6a01              LDR      r1,[r0,#0x20]
000026  f0210101          BIC      r1,r1,#1
00002a  6201              STR      r1,[r0,#0x20]
00002c  6a05              LDR      r5,[r0,#0x20]
00002e  6841              LDR      r1,[r0,#4]
000030  6986              LDR      r6,[r0,#0x18]
000032  6817              LDR      r7,[r2,#0]
000034  f0260673          BIC      r6,r6,#0x73
000038  433e              ORRS     r6,r6,r7
00003a  6917              LDR      r7,[r2,#0x10]
00003c  f0250502          BIC      r5,r5,#2
000040  433d              ORRS     r5,r5,r7
000042  6857              LDR      r7,[r2,#4]
000044  f0250501          BIC      r5,r5,#1
000048  433d              ORRS     r5,r5,r7
00004a  4560              CMP      r0,r12
00004c  bf18              IT       NE
00004e  42a0              CMPNE    r0,r4
;;;402      {
;;;403        case LL_TIM_CHANNEL_CH1:
;;;404          result = OC1Config(TIMx, TIM_OC_InitStruct);
000050  d115              BNE      |L11.126|
000052  6954              LDR      r4,[r2,#0x14]
000054  f0250c08          BIC      r12,r5,#8
000058  ea4c0c84          ORR      r12,r12,r4,LSL #2
00005c  6894              LDR      r4,[r2,#8]
00005e  f02c0c04          BIC      r12,r12,#4
000062  ea4c0584          ORR      r5,r12,r4,LSL #2
000066  f8d2c018          LDR      r12,[r2,#0x18]
00006a  f4217180          BIC      r1,r1,#0x100
00006e  ea41010c          ORR      r1,r1,r12
000072  f8d2c01c          LDR      r12,[r2,#0x1c]
000076  f4217100          BIC      r1,r1,#0x200
00007a  ea41014c          ORR      r1,r1,r12,LSL #1
                  |L11.126|
00007e  6041              STR      r1,[r0,#4]
000080  6186              STR      r6,[r0,#0x18]
000082  68d1              LDR      r1,[r2,#0xc]
000084  6341              STR      r1,[r0,#0x34]
000086  6205              STR      r5,[r0,#0x20]
000088  461d              MOV      r5,r3
;;;405          break;
00008a  e095              B        |L11.440|
                  |L11.140|
00008c  6a01              LDR      r1,[r0,#0x20]
00008e  f0210110          BIC      r1,r1,#0x10
000092  6201              STR      r1,[r0,#0x20]
000094  6a05              LDR      r5,[r0,#0x20]
000096  6841              LDR      r1,[r0,#4]
000098  6986              LDR      r6,[r0,#0x18]
00009a  6817              LDR      r7,[r2,#0]
00009c  f42646e6          BIC      r6,r6,#0x7300
0000a0  ea462607          ORR      r6,r6,r7,LSL #8
0000a4  6917              LDR      r7,[r2,#0x10]
0000a6  f0250520          BIC      r5,r5,#0x20
0000aa  ea451507          ORR      r5,r5,r7,LSL #4
0000ae  6857              LDR      r7,[r2,#4]
0000b0  f0250510          BIC      r5,r5,#0x10
0000b4  ea451507          ORR      r5,r5,r7,LSL #4
0000b8  4560              CMP      r0,r12
0000ba  bf18              IT       NE
0000bc  42a0              CMPNE    r0,r4
;;;406        case LL_TIM_CHANNEL_CH2:
;;;407          result = OC2Config(TIMx, TIM_OC_InitStruct);
0000be  d115              BNE      |L11.236|
0000c0  6954              LDR      r4,[r2,#0x14]
0000c2  f0250c80          BIC      r12,r5,#0x80
0000c6  ea4c1c84          ORR      r12,r12,r4,LSL #6
0000ca  6894              LDR      r4,[r2,#8]
0000cc  f02c0c40          BIC      r12,r12,#0x40
0000d0  ea4c1584          ORR      r5,r12,r4,LSL #6
0000d4  f8d2c018          LDR      r12,[r2,#0x18]
0000d8  f4216180          BIC      r1,r1,#0x400
0000dc  ea41018c          ORR      r1,r1,r12,LSL #2
0000e0  f8d2c01c          LDR      r12,[r2,#0x1c]
0000e4  f4216100          BIC      r1,r1,#0x800
0000e8  ea4101cc          ORR      r1,r1,r12,LSL #3
                  |L11.236|
0000ec  6041              STR      r1,[r0,#4]
0000ee  6186              STR      r6,[r0,#0x18]
0000f0  68d1              LDR      r1,[r2,#0xc]
0000f2  6381              STR      r1,[r0,#0x38]
0000f4  6205              STR      r5,[r0,#0x20]
0000f6  461d              MOV      r5,r3
;;;408          break;
0000f8  e05e              B        |L11.440|
0000fa  e000              B        |L11.254|
                  |L11.252|
0000fc  e036              B        |L11.364|
                  |L11.254|
0000fe  6a01              LDR      r1,[r0,#0x20]
000100  f4217180          BIC      r1,r1,#0x100
000104  6201              STR      r1,[r0,#0x20]
000106  6a05              LDR      r5,[r0,#0x20]
000108  6841              LDR      r1,[r0,#4]
00010a  69c6              LDR      r6,[r0,#0x1c]
00010c  6817              LDR      r7,[r2,#0]
00010e  f0260673          BIC      r6,r6,#0x73
000112  ea460607          ORR      r6,r6,r7
000116  6917              LDR      r7,[r2,#0x10]
000118  f4257500          BIC      r5,r5,#0x200
00011c  ea452507          ORR      r5,r5,r7,LSL #8
000120  6857              LDR      r7,[r2,#4]
000122  f4257580          BIC      r5,r5,#0x100
000126  ea452507          ORR      r5,r5,r7,LSL #8
00012a  4560              CMP      r0,r12
00012c  bf18              IT       NE
00012e  42a0              CMPNE    r0,r4
;;;409        case LL_TIM_CHANNEL_CH3:
;;;410          result = OC3Config(TIMx, TIM_OC_InitStruct);
000130  d115              BNE      |L11.350|
000132  6954              LDR      r4,[r2,#0x14]
000134  f4256c00          BIC      r12,r5,#0x800
000138  ea4c2c84          ORR      r12,r12,r4,LSL #10
00013c  6894              LDR      r4,[r2,#8]
00013e  f42c6c80          BIC      r12,r12,#0x400
000142  ea4c2584          ORR      r5,r12,r4,LSL #10
000146  f8d2c018          LDR      r12,[r2,#0x18]
00014a  f4215180          BIC      r1,r1,#0x1000
00014e  ea41110c          ORR      r1,r1,r12,LSL #4
000152  f8d2c01c          LDR      r12,[r2,#0x1c]
000156  f4215100          BIC      r1,r1,#0x2000
00015a  ea41114c          ORR      r1,r1,r12,LSL #5
                  |L11.350|
00015e  6041              STR      r1,[r0,#4]
000160  61c6              STR      r6,[r0,#0x1c]
000162  68d1              LDR      r1,[r2,#0xc]
000164  63c1              STR      r1,[r0,#0x3c]
000166  6205              STR      r5,[r0,#0x20]
000168  461d              MOV      r5,r3
;;;411          break;
00016a  e025              B        |L11.440|
                  |L11.364|
00016c  6a01              LDR      r1,[r0,#0x20]
00016e  f4215180          BIC      r1,r1,#0x1000
000172  6201              STR      r1,[r0,#0x20]
000174  6a05              LDR      r5,[r0,#0x20]
000176  6841              LDR      r1,[r0,#4]
000178  69c6              LDR      r6,[r0,#0x1c]
00017a  6817              LDR      r7,[r2,#0]
00017c  f42646e6          BIC      r6,r6,#0x7300
000180  ea462607          ORR      r6,r6,r7,LSL #8
000184  6917              LDR      r7,[r2,#0x10]
000186  f4255500          BIC      r5,r5,#0x2000
00018a  ea453507          ORR      r5,r5,r7,LSL #12
00018e  6857              LDR      r7,[r2,#4]
000190  f4255580          BIC      r5,r5,#0x1000
000194  ea453507          ORR      r5,r5,r7,LSL #12
000198  4560              CMP      r0,r12
00019a  bf18              IT       NE
00019c  42a0              CMPNE    r0,r4
;;;412        case LL_TIM_CHANNEL_CH4:
;;;413          result = OC4Config(TIMx, TIM_OC_InitStruct);
00019e  d105              BNE      |L11.428|
0001a0  f8d2c018          LDR      r12,[r2,#0x18]
0001a4  f4214180          BIC      r1,r1,#0x4000
0001a8  ea41118c          ORR      r1,r1,r12,LSL #6
                  |L11.428|
0001ac  6041              STR      r1,[r0,#4]
0001ae  61c6              STR      r6,[r0,#0x1c]
0001b0  68d1              LDR      r1,[r2,#0xc]
0001b2  6401              STR      r1,[r0,#0x40]
0001b4  6205              STR      r5,[r0,#0x20]
0001b6  461d              MOV      r5,r3
                  |L11.440|
;;;414          break;
;;;415        default:
;;;416          break;
;;;417      }
;;;418    
;;;419      return result;
0001b8  4628              MOV      r0,r5
;;;420    }
0001ba  bcf0              POP      {r4-r7}
0001bc  4770              BX       lr
;;;421    
                          ENDP

0001be  0000              DCW      0x0000
                  |L11.448|
                          DCD      0x40010000
                  |L11.452|
                          DCD      0x40010400

                          AREA ||i.LL_TIM_OC_StructInit||, CODE, READONLY, ALIGN=1

                  LL_TIM_OC_StructInit PROC
;;;370      */
;;;371    void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
000000  2100              MOVS     r1,#0
;;;372    {
;;;373      /* Set the default configuration */
;;;374      TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
;;;375      TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
000002  6001              STR      r1,[r0,#0]
;;;376      TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
000004  6041              STR      r1,[r0,#4]
;;;377      TIM_OC_InitStruct->CompareValue = 0x00000000U;
000006  6081              STR      r1,[r0,#8]
;;;378      TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
000008  60c1              STR      r1,[r0,#0xc]
;;;379      TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
00000a  6101              STR      r1,[r0,#0x10]
;;;380      TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
00000c  6141              STR      r1,[r0,#0x14]
;;;381      TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
00000e  6181              STR      r1,[r0,#0x18]
000010  61c1              STR      r1,[r0,#0x1c]
;;;382    }
000012  4770              BX       lr
;;;383    
                          ENDP


                          AREA ||i.LL_TIM_StructInit||, CODE, READONLY, ALIGN=1

                  LL_TIM_StructInit PROC
;;;301      */
;;;302    void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
000000  2100              MOVS     r1,#0
;;;303    {
;;;304      /* Set the default configuration */
;;;305      TIM_InitStruct->Prescaler         = (uint16_t)0x0000U;
000002  8001              STRH     r1,[r0,#0]
;;;306      TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
;;;307      TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
000004  1e4a              SUBS     r2,r1,#1
000006  e9c01201          STRD     r1,r2,[r0,#4]
;;;308      TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
;;;309      TIM_InitStruct->RepetitionCounter = (uint8_t)0x00U;
00000a  60c1              STR      r1,[r0,#0xc]
00000c  7401              STRB     r1,[r0,#0x10]
;;;310    }
00000e  4770              BX       lr
;;;311    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_tim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_tim_c_d1be445c____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___18_stm32f4xx_ll_tim_c_d1be445c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_tim_c_d1be445c____REVSH|
#line 402
|__asm___18_stm32f4xx_ll_tim_c_d1be445c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_tim_c_d1be445c____RRX|
#line 587
|__asm___18_stm32f4xx_ll_tim_c_d1be445c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
