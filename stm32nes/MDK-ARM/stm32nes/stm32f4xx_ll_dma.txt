; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_ll_dma.o --depend=stm32nes\stm32f4xx_ll_dma.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\FieryDragon\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F407xx -DUSE_FULL_LL_DRIVER -DSTM32F407xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_ll_dma.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_dma.c]
                          THUMB

                          AREA ||i.LL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  LL_DMA_DeInit PROC
;;;171      */
;;;172    uint32_t LL_DMA_DeInit(DMA_TypeDef *DMAx, uint32_t Stream)
000000  b4f0              PUSH     {r4-r7}
;;;173    {
;;;174      DMA_Stream_TypeDef *tmp = (DMA_Stream_TypeDef *)DMA1_Stream0;
000002  4a4e              LDR      r2,|L1.316|
;;;175      ErrorStatus status = SUCCESS;
;;;176    
;;;177      /* Check the DMA Instance DMAx and Stream parameters*/
;;;178      assert_param(IS_LL_DMA_ALL_STREAM_INSTANCE(DMAx, Stream));
;;;179    
;;;180      if (Stream == LL_DMA_STREAM_ALL)
;;;181      {
;;;182        if (DMAx == DMA1)
;;;183        {
;;;184          /* Force reset of DMA clock */
;;;185          LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_DMA1);
;;;186    
;;;187          /* Release reset of DMA clock */
;;;188          LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_DMA1);
;;;189        }
;;;190        else if (DMAx == DMA2)
000004  4b4e              LDR      r3,|L1.320|
000006  4d4f              LDR      r5,|L1.324|
000008  f04f0c01          MOV      r12,#1                ;175
00000c  f5113f80          CMN      r1,#0x10000           ;180
000010  d026              BEQ      |L1.96|
000012  4c4d              LDR      r4,|L1.328|
000014  5c66              LDRB     r6,[r4,r1]            ;173
000016  5987              LDR      r7,[r0,r6]            ;173
000018  f0270701          BIC      r7,r7,#1              ;173
00001c  5187              STR      r7,[r0,r6]            ;173
;;;191        {
;;;192          /* Force reset of DMA clock */
;;;193          LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_DMA2);
;;;194    
;;;195          /* Release reset of DMA clock */
;;;196          LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_DMA2);
;;;197        }
;;;198        else
;;;199        {
;;;200          status = ERROR;
;;;201        }
;;;202      }
;;;203      else
;;;204      {
;;;205        /* Disable the selected Stream */
;;;206        LL_DMA_DisableStream(DMAx,Stream);
;;;207    
;;;208        /* Get the DMA Stream Instance */
;;;209        tmp = (DMA_Stream_TypeDef *)(__LL_DMA_GET_STREAM_INSTANCE(DMAx, Stream));
00001e  42a8              CMP      r0,r5
000020  d134              BNE      |L1.140|
000022  2900              CMP      r1,#0
000024  d051              BEQ      |L1.202|
000026  2901              CMP      r1,#1
000028  bf08              IT       EQ
00002a  4a48              LDREQ    r2,|L1.332|
00002c  d04d              BEQ      |L1.202|
00002e  2902              CMP      r1,#2
000030  bf08              IT       EQ
000032  4a47              LDREQ    r2,|L1.336|
000034  d049              BEQ      |L1.202|
000036  2903              CMP      r1,#3
000038  bf08              IT       EQ
00003a  4a46              LDREQ    r2,|L1.340|
00003c  d045              BEQ      |L1.202|
00003e  2904              CMP      r1,#4
000040  bf08              IT       EQ
000042  4a45              LDREQ    r2,|L1.344|
000044  d041              BEQ      |L1.202|
000046  2905              CMP      r1,#5
000048  bf08              IT       EQ
00004a  4a44              LDREQ    r2,|L1.348|
00004c  d03d              BEQ      |L1.202|
00004e  2906              CMP      r1,#6
000050  bf08              IT       EQ
000052  4a43              LDREQ    r2,|L1.352|
000054  d039              BEQ      |L1.202|
000056  2907              CMP      r1,#7
000058  bf08              IT       EQ
00005a  4a42              LDREQ    r2,|L1.356|
00005c  d035              BEQ      |L1.202|
00005e  e033              B        |L1.200|
                  |L1.96|
000060  4941              LDR      r1,|L1.360|
000062  42a8              CMP      r0,r5                 ;182
000064  d107              BNE      |L1.118|
000066  6808              LDR      r0,[r1,#0]            ;182
000068  f4401000          ORR      r0,r0,#0x200000       ;182
00006c  6008              STR      r0,[r1,#0]            ;182
00006e  6808              LDR      r0,[r1,#0]            ;182
000070  f4201000          BIC      r0,r0,#0x200000       ;182
000074  e008              B        |L1.136|
                  |L1.118|
000076  4298              CMP      r0,r3                 ;190
000078  d15b              BNE      |L1.306|
00007a  6808              LDR      r0,[r1,#0]            ;190
00007c  f4400080          ORR      r0,r0,#0x400000       ;190
000080  6008              STR      r0,[r1,#0]            ;190
000082  6808              LDR      r0,[r1,#0]            ;190
000084  f4200080          BIC      r0,r0,#0x400000       ;190
                  |L1.136|
000088  6008              STR      r0,[r1,#0]            ;190
00008a  e054              B        |L1.310|
                  |L1.140|
00008c  4298              CMP      r0,r3
00008e  d11b              BNE      |L1.200|
000090  2900              CMP      r1,#0
000092  bf08              IT       EQ
000094  4a35              LDREQ    r2,|L1.364|
000096  d018              BEQ      |L1.202|
000098  2901              CMP      r1,#1
00009a  bf08              IT       EQ
00009c  4a34              LDREQ    r2,|L1.368|
00009e  d014              BEQ      |L1.202|
0000a0  2902              CMP      r1,#2
0000a2  bf08              IT       EQ
0000a4  4a33              LDREQ    r2,|L1.372|
0000a6  d010              BEQ      |L1.202|
0000a8  2903              CMP      r1,#3
0000aa  bf08              IT       EQ
0000ac  4a32              LDREQ    r2,|L1.376|
0000ae  d00c              BEQ      |L1.202|
0000b0  2904              CMP      r1,#4
0000b2  bf08              IT       EQ
0000b4  4a31              LDREQ    r2,|L1.380|
0000b6  d008              BEQ      |L1.202|
0000b8  2905              CMP      r1,#5
0000ba  bf08              IT       EQ
0000bc  4a30              LDREQ    r2,|L1.384|
0000be  d004              BEQ      |L1.202|
0000c0  2906              CMP      r1,#6
0000c2  bf08              IT       EQ
0000c4  4a2f              LDREQ    r2,|L1.388|
0000c6  d000              BEQ      |L1.202|
                  |L1.200|
0000c8  4a2f              LDR      r2,|L1.392|
                  |L1.202|
;;;210    
;;;211        /* Reset DMAx_Streamy configuration register */
;;;212        LL_DMA_WriteReg(tmp, CR, 0U);
0000ca  2300              MOVS     r3,#0
0000cc  6013              STR      r3,[r2,#0]
;;;213    
;;;214        /* Reset DMAx_Streamy remaining bytes register */
;;;215        LL_DMA_WriteReg(tmp, NDTR, 0U);
0000ce  6053              STR      r3,[r2,#4]
;;;216    
;;;217        /* Reset DMAx_Streamy peripheral address register */
;;;218        LL_DMA_WriteReg(tmp, PAR, 0U);
0000d0  6093              STR      r3,[r2,#8]
;;;219    
;;;220        /* Reset DMAx_Streamy memory address register */
;;;221        LL_DMA_WriteReg(tmp, M0AR, 0U);
0000d2  60d3              STR      r3,[r2,#0xc]
;;;222    
;;;223        /* Reset DMAx_Streamy memory address register */
;;;224        LL_DMA_WriteReg(tmp, M1AR, 0U);
0000d4  6113              STR      r3,[r2,#0x10]
;;;225    
;;;226        /* Reset DMAx_Streamy FIFO control register */
;;;227        LL_DMA_WriteReg(tmp, FCR, 0x00000021U);
0000d6  2321              MOVS     r3,#0x21
0000d8  6153              STR      r3,[r2,#0x14]
0000da  5c62              LDRB     r2,[r4,r1]
0000dc  5883              LDR      r3,[r0,r2]
0000de  f0236360          BIC      r3,r3,#0xe000000
0000e2  5083              STR      r3,[r0,r2]
;;;228    
;;;229        /* Reset Channel register field for DMAx Stream*/
;;;230        LL_DMA_SetChannelSelection(DMAx, Stream, LL_DMA_CHANNEL_0);
;;;231    
;;;232        if(Stream == LL_DMA_STREAM_0)
;;;233        {
;;;234           /* Reset the Stream0 pending flags */
;;;235           DMAx->LIFCR = 0x0000003FU;
0000e4  233f              MOVS     r3,#0x3f
0000e6  2900              CMP      r1,#0                 ;232
0000e8  bf08              IT       EQ
0000ea  6083              STREQ    r3,[r0,#8]
0000ec  d023              BEQ      |L1.310|
;;;236        }
;;;237        else if(Stream == LL_DMA_STREAM_1)
;;;238        {
;;;239           /* Reset the Stream1 pending flags */
;;;240           DMAx->LIFCR = 0x00000F40U;
0000ee  f44f6274          MOV      r2,#0xf40
0000f2  2901              CMP      r1,#1                 ;237
0000f4  bf08              IT       EQ
0000f6  6082              STREQ    r2,[r0,#8]
0000f8  d01d              BEQ      |L1.310|
;;;241        }
;;;242        else if(Stream == LL_DMA_STREAM_2)
;;;243        {
;;;244           /* Reset the Stream2 pending flags */
;;;245           DMAx->LIFCR = 0x003F0000U;
0000fa  f44f147c          MOV      r4,#0x3f0000
0000fe  2902              CMP      r1,#2                 ;242
000100  bf08              IT       EQ
000102  6084              STREQ    r4,[r0,#8]
000104  d017              BEQ      |L1.310|
;;;246        }
;;;247        else if(Stream == LL_DMA_STREAM_3)
;;;248        {
;;;249           /* Reset the Stream3 pending flags */
;;;250           DMAx->LIFCR = 0x0F400000U;
000106  f04f6574          MOV      r5,#0xf400000
00010a  2903              CMP      r1,#3                 ;247
00010c  bf08              IT       EQ
00010e  6085              STREQ    r5,[r0,#8]
000110  d011              BEQ      |L1.310|
;;;251        }
;;;252        else if(Stream == LL_DMA_STREAM_4)
000112  2904              CMP      r1,#4
;;;253        {
;;;254           /* Reset the Stream4 pending flags */
;;;255           DMAx->HIFCR = 0x0000003FU;
000114  bf08              IT       EQ
000116  60c3              STREQ    r3,[r0,#0xc]
000118  d00d              BEQ      |L1.310|
;;;256        }
;;;257        else if(Stream == LL_DMA_STREAM_5)
00011a  2905              CMP      r1,#5
;;;258        {
;;;259           /* Reset the Stream5 pending flags */
;;;260           DMAx->HIFCR = 0x00000F40U;
00011c  bf08              IT       EQ
00011e  60c2              STREQ    r2,[r0,#0xc]
000120  d009              BEQ      |L1.310|
;;;261        }
;;;262        else if(Stream == LL_DMA_STREAM_6)
000122  2906              CMP      r1,#6
;;;263        {
;;;264           /* Reset the Stream6 pending flags */
;;;265           DMAx->HIFCR = 0x003F0000U;
000124  bf08              IT       EQ
000126  60c4              STREQ    r4,[r0,#0xc]
000128  d005              BEQ      |L1.310|
;;;266        }
;;;267        else if(Stream == LL_DMA_STREAM_7)
00012a  2907              CMP      r1,#7
;;;268        {
;;;269           /* Reset the Stream7 pending flags */
;;;270           DMAx->HIFCR = 0x0F400000U;
00012c  bf08              IT       EQ
00012e  60c5              STREQ    r5,[r0,#0xc]
000130  d001              BEQ      |L1.310|
                  |L1.306|
;;;271        }
;;;272        else
;;;273        {
;;;274          status = ERROR;
000132  f04f0c00          MOV      r12,#0
                  |L1.310|
;;;275        }
;;;276      }
;;;277    
;;;278      return status;
;;;279    }
000136  bcf0              POP      {r4-r7}
000138  4660              MOV      r0,r12                ;278
00013a  4770              BX       lr
;;;280    
                          ENDP

                  |L1.316|
                          DCD      0x40026010
                  |L1.320|
                          DCD      0x40026400
                  |L1.324|
                          DCD      0x40026000
                  |L1.328|
                          DCD      ||.constdata||
                  |L1.332|
                          DCD      0x40026028
                  |L1.336|
                          DCD      0x40026040
                  |L1.340|
                          DCD      0x40026058
                  |L1.344|
                          DCD      0x40026070
                  |L1.348|
                          DCD      0x40026088
                  |L1.352|
                          DCD      0x400260a0
                  |L1.356|
                          DCD      0x400260b8
                  |L1.360|
                          DCD      0x40023810
                  |L1.364|
                          DCD      0x40026410
                  |L1.368|
                          DCD      0x40026428
                  |L1.372|
                          DCD      0x40026440
                  |L1.376|
                          DCD      0x40026458
                  |L1.380|
                          DCD      0x40026470
                  |L1.384|
                          DCD      0x40026488
                  |L1.388|
                          DCD      0x400264a0
                  |L1.392|
                          DCD      0x400264b8

                          AREA ||i.LL_DMA_Init||, CODE, READONLY, ALIGN=2

                  LL_DMA_Init PROC
;;;300      */
;;;301    uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct)
000000  b4f0              PUSH     {r4-r7}
;;;302    {
000002  e9d23c02          LDRD     r3,r12,[r2,#8]
;;;303      /* Check the DMA Instance DMAx and Stream parameters*/
;;;304      assert_param(IS_LL_DMA_ALL_STREAM_INSTANCE(DMAx, Stream));
;;;305    
;;;306      /* Check the DMA parameters from DMA_InitStruct */
;;;307      assert_param(IS_LL_DMA_DIRECTION(DMA_InitStruct->Direction));
;;;308      assert_param(IS_LL_DMA_MODE(DMA_InitStruct->Mode));
;;;309      assert_param(IS_LL_DMA_PERIPHINCMODE(DMA_InitStruct->PeriphOrM2MSrcIncMode));
;;;310      assert_param(IS_LL_DMA_MEMORYINCMODE(DMA_InitStruct->MemoryOrM2MDstIncMode));
;;;311      assert_param(IS_LL_DMA_PERIPHDATASIZE(DMA_InitStruct->PeriphOrM2MSrcDataSize));
;;;312      assert_param(IS_LL_DMA_MEMORYDATASIZE(DMA_InitStruct->MemoryOrM2MDstDataSize));
;;;313      assert_param(IS_LL_DMA_NBDATA(DMA_InitStruct->NbData));
;;;314      assert_param(IS_LL_DMA_CHANNEL(DMA_InitStruct->Channel));
;;;315      assert_param(IS_LL_DMA_PRIORITY(DMA_InitStruct->Priority));
;;;316      assert_param(IS_LL_DMA_FIFO_MODE_STATE(DMA_InitStruct->FIFOMode));
;;;317      /* Check the memory burst, peripheral burst and FIFO threshold parameters only
;;;318         when FIFO mode is enabled */
;;;319      if(DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
;;;320      {
;;;321        assert_param(IS_LL_DMA_FIFO_THRESHOLD(DMA_InitStruct->FIFOThreshold));
;;;322        assert_param(IS_LL_DMA_MEMORY_BURST(DMA_InitStruct->MemBurst));
;;;323        assert_param(IS_LL_DMA_PERIPHERAL_BURST(DMA_InitStruct->PeriphBurst));
;;;324      }
;;;325    
;;;326      /*---------------------------- DMAx SxCR Configuration ------------------------
;;;327       * Configure DMAx_Streamy: data transfer direction, data transfer mode,
;;;328       *                          peripheral and memory increment mode,
;;;329       *                          data size alignment and  priority level with parameters :
;;;330       * - Direction:      DMA_SxCR_DIR[1:0] bits
;;;331       * - Mode:           DMA_SxCR_CIRC bit
;;;332       * - PeriphOrM2MSrcIncMode:  DMA_SxCR_PINC bit
;;;333       * - MemoryOrM2MDstIncMode:  DMA_SxCR_MINC bit
;;;334       * - PeriphOrM2MSrcDataSize: DMA_SxCR_PSIZE[1:0] bits
;;;335       * - MemoryOrM2MDstDataSize: DMA_SxCR_MSIZE[1:0] bits
;;;336       * - Priority:               DMA_SxCR_PL[1:0] bits
;;;337       */
;;;338      LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
000006  ea43030c          ORR      r3,r3,r12
00000a  e9d2c404          LDRD     r12,r4,[r2,#0x10]
00000e  ea4c0c04          ORR      r12,r12,r4
000012  ea43030c          ORR      r3,r3,r12
000016  f8d2c018          LDR      r12,[r2,#0x18]
00001a  ea43030c          ORR      r3,r3,r12
00001e  f8d2c01c          LDR      r12,[r2,#0x1c]
000022  ea43030c          ORR      r3,r3,r12
000026  f8d2c028          LDR      r12,[r2,#0x28]
00002a  ea43040c          ORR      r4,r3,r12
00002e  4b2a              LDR      r3,|L2.216|
000030  f813c001          LDRB     r12,[r3,r1]
000034  f850500c          LDR      r5,[r0,r12]
000038  f42555ff          BIC      r5,r5,#0x1fe0
00003c  f4253558          BIC      r5,r5,#0x36000
000040  432c              ORRS     r4,r4,r5
000042  f840400c          STR      r4,[r0,r12]
;;;339                            DMA_InitStruct->Mode                    | \
;;;340                            DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
;;;341                            DMA_InitStruct->MemoryOrM2MDstIncMode   | \
;;;342                            DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
;;;343                            DMA_InitStruct->MemoryOrM2MDstDataSize  | \
;;;344                            DMA_InitStruct->Priority
;;;345                            );
;;;346    
;;;347      if(DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
000046  f8d2c02c          LDR      r12,[r2,#0x2c]
00004a  f1bc0f00          CMP      r12,#0
00004e  d020              BEQ      |L2.146|
000050  5c5d              LDRB     r5,[r3,r1]            ;302
000052  f1000614          ADD      r6,r0,#0x14           ;302
000056  6b14              LDR      r4,[r2,#0x30]         ;302
000058  59af              LDR      r7,[r5,r6]            ;302
00005a  ea4c0c04          ORR      r12,r12,r4            ;302
00005e  f0270707          BIC      r7,r7,#7              ;302
000062  ea470c0c          ORR      r12,r7,r12            ;302
000066  f845c006          STR      r12,[r5,r6]           ;302
00006a  5c5c              LDRB     r4,[r3,r1]            ;302
00006c  f8d2c034          LDR      r12,[r2,#0x34]        ;302
000070  5905              LDR      r5,[r0,r4]            ;302
000072  f02575c0          BIC      r5,r5,#0x1800000      ;302
000076  ea450c0c          ORR      r12,r5,r12            ;302
00007a  f840c004          STR      r12,[r0,r4]           ;302
00007e  5c5c              LDRB     r4,[r3,r1]            ;302
000080  f8d2c038          LDR      r12,[r2,#0x38]        ;302
000084  5905              LDR      r5,[r0,r4]            ;302
000086  f42505c0          BIC      r5,r5,#0x600000       ;302
00008a  ea450c0c          ORR      r12,r5,r12            ;302
00008e  f840c004          STR      r12,[r0,r4]           ;302
                  |L2.146|
000092  5c5c              LDRB     r4,[r3,r1]            ;302
000094  f100050c          ADD      r5,r0,#0xc            ;302
000098  f8d2c004          LDR      r12,[r2,#4]           ;302
00009c  f844c005          STR      r12,[r4,r5]           ;302
0000a0  5c5c              LDRB     r4,[r3,r1]            ;302
0000a2  1f2d              SUBS     r5,r5,#4              ;302
0000a4  f8d2c000          LDR      r12,[r2,#0]           ;302
0000a8  f844c005          STR      r12,[r4,r5]           ;302
0000ac  5c5c              LDRB     r4,[r3,r1]            ;302
0000ae  1d05              ADDS     r5,r0,#4              ;302
0000b0  f8d2c020          LDR      r12,[r2,#0x20]        ;302
0000b4  5966              LDR      r6,[r4,r5]            ;302
0000b6  f36f060f          BFC      r6,#0,#16             ;302
0000ba  ea460c0c          ORR      r12,r6,r12            ;302
0000be  f844c005          STR      r12,[r4,r5]           ;302
0000c2  5c59              LDRB     r1,[r3,r1]            ;302
;;;348      {
;;;349        /*---------------------------- DMAx SxFCR Configuration ------------------------
;;;350         * Configure DMAx_Streamy:  fifo mode and fifo threshold with parameters :
;;;351         * - FIFOMode:                DMA_SxFCR_DMDIS bit
;;;352         * - FIFOThreshold:           DMA_SxFCR_FTH[1:0] bits
;;;353         */
;;;354        LL_DMA_ConfigFifo(DMAx, Stream, DMA_InitStruct->FIFOMode, DMA_InitStruct->FIFOThreshold);   
;;;355    
;;;356        /*---------------------------- DMAx SxCR Configuration --------------------------
;;;357         * Configure DMAx_Streamy:  memory burst transfer with parameters :
;;;358         * - MemBurst:                DMA_SxCR_MBURST[1:0] bits
;;;359         */
;;;360        LL_DMA_SetMemoryBurstxfer(DMAx,Stream,DMA_InitStruct->MemBurst); 
;;;361    
;;;362        /*---------------------------- DMAx SxCR Configuration --------------------------
;;;363         * Configure DMAx_Streamy:  peripheral burst transfer with parameters :
;;;364         * - PeriphBurst:             DMA_SxCR_PBURST[1:0] bits
;;;365         */
;;;366        LL_DMA_SetPeriphBurstxfer(DMAx,Stream,DMA_InitStruct->PeriphBurst);
;;;367      }
;;;368    
;;;369      /*-------------------------- DMAx SxM0AR Configuration --------------------------
;;;370       * Configure the memory or destination base address with parameter :
;;;371       * - MemoryOrM2MDstAddress:     DMA_SxM0AR_M0A[31:0] bits
;;;372       */
;;;373      LL_DMA_SetMemoryAddress(DMAx, Stream, DMA_InitStruct->MemoryOrM2MDstAddress);
;;;374    
;;;375      /*-------------------------- DMAx SxPAR Configuration ---------------------------
;;;376       * Configure the peripheral or source base address with parameter :
;;;377       * - PeriphOrM2MSrcAddress:     DMA_SxPAR_PA[31:0] bits
;;;378       */
;;;379      LL_DMA_SetPeriphAddress(DMAx, Stream, DMA_InitStruct->PeriphOrM2MSrcAddress);
;;;380    
;;;381      /*--------------------------- DMAx SxNDTR Configuration -------------------------
;;;382       * Configure the peripheral base address with parameter :
;;;383       * - NbData:                    DMA_SxNDT[15:0] bits
;;;384       */
;;;385      LL_DMA_SetDataLength(DMAx, Stream, DMA_InitStruct->NbData);
;;;386    
;;;387      /*--------------------------- DMA SxCR_CHSEL Configuration ----------------------
;;;388       * Configure the peripheral base address with parameter :
;;;389       * - PeriphRequest:             DMA_SxCR_CHSEL[2:0] bits
;;;390       */
;;;391      LL_DMA_SetChannelSelection(DMAx, Stream, DMA_InitStruct->Channel);
0000c4  6a52              LDR      r2,[r2,#0x24]
0000c6  5843              LDR      r3,[r0,r1]
0000c8  f0236360          BIC      r3,r3,#0xe000000
0000cc  431a              ORRS     r2,r2,r3
0000ce  5042              STR      r2,[r0,r1]
;;;392    
;;;393      return SUCCESS;
;;;394    }
0000d0  bcf0              POP      {r4-r7}
0000d2  2001              MOVS     r0,#1                 ;393
0000d4  4770              BX       lr
;;;395    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L2.216|
                          DCD      ||.constdata||

                          AREA ||i.LL_DMA_StructInit||, CODE, READONLY, ALIGN=1

                  LL_DMA_StructInit PROC
;;;400      */
;;;401    void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;402    {
;;;403      /* Set DMA_InitStruct fields to default values */
;;;404      DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
;;;405      DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
000002  6001              STR      r1,[r0,#0]
;;;406      DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
000004  6041              STR      r1,[r0,#4]
;;;407      DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
000006  6081              STR      r1,[r0,#8]
;;;408      DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
000008  60c1              STR      r1,[r0,#0xc]
;;;409      DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
00000a  6101              STR      r1,[r0,#0x10]
;;;410      DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
00000c  6141              STR      r1,[r0,#0x14]
;;;411      DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
00000e  6181              STR      r1,[r0,#0x18]
;;;412      DMA_InitStruct->NbData                 = 0x00000000U;
000010  61c1              STR      r1,[r0,#0x1c]
;;;413      DMA_InitStruct->Channel                = LL_DMA_CHANNEL_0;
000012  6201              STR      r1,[r0,#0x20]
;;;414      DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
000014  6241              STR      r1,[r0,#0x24]
;;;415      DMA_InitStruct->FIFOMode               = LL_DMA_FIFOMODE_DISABLE;
000016  6281              STR      r1,[r0,#0x28]
;;;416      DMA_InitStruct->FIFOThreshold          = LL_DMA_FIFOTHRESHOLD_1_4;
000018  62c1              STR      r1,[r0,#0x2c]
;;;417      DMA_InitStruct->MemBurst               = LL_DMA_MBURST_SINGLE;
00001a  6301              STR      r1,[r0,#0x30]
;;;418      DMA_InitStruct->PeriphBurst            = LL_DMA_PBURST_SINGLE;
00001c  6341              STR      r1,[r0,#0x34]
00001e  6381              STR      r1,[r0,#0x38]
;;;419    }
000020  4770              BX       lr
;;;420    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STREAM_OFFSET_TAB
000000  10284058          DCB      0x10,0x28,0x40,0x58
000004  7088a0b8          DCB      0x70,0x88,0xa0,0xb8

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_dma_c_fc5381f7____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___18_stm32f4xx_ll_dma_c_fc5381f7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_dma_c_fc5381f7____REVSH|
#line 402
|__asm___18_stm32f4xx_ll_dma_c_fc5381f7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_dma_c_fc5381f7____RRX|
#line 587
|__asm___18_stm32f4xx_ll_dma_c_fc5381f7____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
